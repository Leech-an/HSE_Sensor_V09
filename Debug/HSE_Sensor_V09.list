
HSE_Sensor_V09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd0  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800cd60  0800cd60  0000dd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cda8  0800cda8  0000e00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cda8  0800cda8  0000dda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb0  0800cdb0  0000e00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb0  0800cdb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdb4  0800cdb4  0000ddb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800cdb8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  2000000c  0800cdc4  0000e00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800cdc4  0000e8bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd99  00000000  00000000  0000e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d43  00000000  00000000  0002add5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  0002eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a3  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3fe  00000000  00000000  00031a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d40  00000000  00000000  00050e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c240f  00000000  00000000  00071b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071dc  00000000  00000000  00133fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0013b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd48 	.word	0x0800cd48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800cd48 	.word	0x0800cd48

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b988 	b.w	8000d34 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	468e      	mov	lr, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	4688      	mov	r8, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d962      	bls.n	8000b18 <__udivmoddi4+0xdc>
 8000a52:	fab2 f682 	clz	r6, r2
 8000a56:	b14e      	cbz	r6, 8000a6c <__udivmoddi4+0x30>
 8000a58:	f1c6 0320 	rsb	r3, r6, #32
 8000a5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a60:	fa20 f303 	lsr.w	r3, r0, r3
 8000a64:	40b7      	lsls	r7, r6
 8000a66:	ea43 0808 	orr.w	r8, r3, r8
 8000a6a:	40b4      	lsls	r4, r6
 8000a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a78:	0c23      	lsrs	r3, r4, #16
 8000a7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fb01 f20c 	mul.w	r2, r1, ip
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d909      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a90:	f080 80ea 	bcs.w	8000c68 <__udivmoddi4+0x22c>
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f240 80e7 	bls.w	8000c68 <__udivmoddi4+0x22c>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	443b      	add	r3, r7
 8000a9e:	1a9a      	subs	r2, r3, r2
 8000aa0:	b2a3      	uxth	r3, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab2:	459c      	cmp	ip, r3
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0x8e>
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abc:	f080 80d6 	bcs.w	8000c6c <__udivmoddi4+0x230>
 8000ac0:	459c      	cmp	ip, r3
 8000ac2:	f240 80d3 	bls.w	8000c6c <__udivmoddi4+0x230>
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3802      	subs	r0, #2
 8000aca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ace:	eba3 030c 	sub.w	r3, r3, ip
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11d      	cbz	r5, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40f3      	lsrs	r3, r6
 8000ad8:	2200      	movs	r2, #0
 8000ada:	e9c5 3200 	strd	r3, r2, [r5]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d905      	bls.n	8000af2 <__udivmoddi4+0xb6>
 8000ae6:	b10d      	cbz	r5, 8000aec <__udivmoddi4+0xb0>
 8000ae8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4608      	mov	r0, r1
 8000af0:	e7f5      	b.n	8000ade <__udivmoddi4+0xa2>
 8000af2:	fab3 f183 	clz	r1, r3
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d146      	bne.n	8000b88 <__udivmoddi4+0x14c>
 8000afa:	4573      	cmp	r3, lr
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xc8>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 8105 	bhi.w	8000d0e <__udivmoddi4+0x2d2>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d0e5      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b12:	e9c5 4800 	strd	r4, r8, [r5]
 8000b16:	e7e2      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	f000 8090 	beq.w	8000c3e <__udivmoddi4+0x202>
 8000b1e:	fab2 f682 	clz	r6, r2
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	f040 80a4 	bne.w	8000c70 <__udivmoddi4+0x234>
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	0c03      	lsrs	r3, r0, #16
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	b280      	uxth	r0, r0
 8000b32:	b2bc      	uxth	r4, r7
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b42:	fb04 f20c 	mul.w	r2, r4, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d907      	bls.n	8000b5a <__udivmoddi4+0x11e>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x11c>
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f200 80e0 	bhi.w	8000d18 <__udivmoddi4+0x2dc>
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b68:	fb02 f404 	mul.w	r4, r2, r4
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x144>
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x142>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f200 80ca 	bhi.w	8000d12 <__udivmoddi4+0x2d6>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	1b1b      	subs	r3, r3, r4
 8000b82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b88:	f1c1 0620 	rsb	r6, r1, #32
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b92:	431f      	orrs	r7, r3
 8000b94:	fa0e f401 	lsl.w	r4, lr, r1
 8000b98:	fa20 f306 	lsr.w	r3, r0, r6
 8000b9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ba0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	fa1f fc87 	uxth.w	ip, r7
 8000bae:	fbbe f0f9 	udiv	r0, lr, r9
 8000bb2:	0c1c      	lsrs	r4, r3, #16
 8000bb4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x1a0>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bce:	f080 809c 	bcs.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f240 8099 	bls.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	fa1f fe83 	uxth.w	lr, r3
 8000be4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bf0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf4:	45a4      	cmp	ip, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1ce>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bfe:	f080 8082 	bcs.w	8000d06 <__udivmoddi4+0x2ca>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d97f      	bls.n	8000d06 <__udivmoddi4+0x2ca>
 8000c06:	3b02      	subs	r3, #2
 8000c08:	443c      	add	r4, r7
 8000c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c16:	4564      	cmp	r4, ip
 8000c18:	4673      	mov	r3, lr
 8000c1a:	46e1      	mov	r9, ip
 8000c1c:	d362      	bcc.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c1e:	d05f      	beq.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c20:	b15d      	cbz	r5, 8000c3a <__udivmoddi4+0x1fe>
 8000c22:	ebb8 0203 	subs.w	r2, r8, r3
 8000c26:	eb64 0409 	sbc.w	r4, r4, r9
 8000c2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c32:	431e      	orrs	r6, r3
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e74f      	b.n	8000ade <__udivmoddi4+0xa2>
 8000c3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c42:	0c01      	lsrs	r1, r0, #16
 8000c44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4638      	mov	r0, r7
 8000c52:	463c      	mov	r4, r7
 8000c54:	46b8      	mov	r8, r7
 8000c56:	46be      	mov	lr, r7
 8000c58:	2620      	movs	r6, #32
 8000c5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c5e:	eba2 0208 	sub.w	r2, r2, r8
 8000c62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c66:	e766      	b.n	8000b36 <__udivmoddi4+0xfa>
 8000c68:	4601      	mov	r1, r0
 8000c6a:	e718      	b.n	8000a9e <__udivmoddi4+0x62>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	e72c      	b.n	8000aca <__udivmoddi4+0x8e>
 8000c70:	f1c6 0220 	rsb	r2, r6, #32
 8000c74:	fa2e f302 	lsr.w	r3, lr, r2
 8000c78:	40b7      	lsls	r7, r6
 8000c7a:	40b1      	lsls	r1, r6
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	430a      	orrs	r2, r1
 8000c86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb08 f904 	mul.w	r9, r8, r4
 8000c9a:	40b0      	lsls	r0, r6
 8000c9c:	4589      	cmp	r9, r1
 8000c9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ca2:	b280      	uxth	r0, r0
 8000ca4:	d93e      	bls.n	8000d24 <__udivmoddi4+0x2e8>
 8000ca6:	1879      	adds	r1, r7, r1
 8000ca8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cac:	d201      	bcs.n	8000cb2 <__udivmoddi4+0x276>
 8000cae:	4589      	cmp	r9, r1
 8000cb0:	d81f      	bhi.n	8000cf2 <__udivmoddi4+0x2b6>
 8000cb2:	eba1 0109 	sub.w	r1, r1, r9
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	4542      	cmp	r2, r8
 8000cca:	d229      	bcs.n	8000d20 <__udivmoddi4+0x2e4>
 8000ccc:	18ba      	adds	r2, r7, r2
 8000cce:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cd2:	d2c4      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd4:	4542      	cmp	r2, r8
 8000cd6:	d2c2      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd8:	f1a9 0102 	sub.w	r1, r9, #2
 8000cdc:	443a      	add	r2, r7
 8000cde:	e7be      	b.n	8000c5e <__udivmoddi4+0x222>
 8000ce0:	45f0      	cmp	r8, lr
 8000ce2:	d29d      	bcs.n	8000c20 <__udivmoddi4+0x1e4>
 8000ce4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cec:	3801      	subs	r0, #1
 8000cee:	46e1      	mov	r9, ip
 8000cf0:	e796      	b.n	8000c20 <__udivmoddi4+0x1e4>
 8000cf2:	eba7 0909 	sub.w	r9, r7, r9
 8000cf6:	4449      	add	r1, r9
 8000cf8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cfc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d00:	fb09 f804 	mul.w	r8, r9, r4
 8000d04:	e7db      	b.n	8000cbe <__udivmoddi4+0x282>
 8000d06:	4673      	mov	r3, lr
 8000d08:	e77f      	b.n	8000c0a <__udivmoddi4+0x1ce>
 8000d0a:	4650      	mov	r0, sl
 8000d0c:	e766      	b.n	8000bdc <__udivmoddi4+0x1a0>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e6fd      	b.n	8000b0e <__udivmoddi4+0xd2>
 8000d12:	443b      	add	r3, r7
 8000d14:	3a02      	subs	r2, #2
 8000d16:	e733      	b.n	8000b80 <__udivmoddi4+0x144>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	443b      	add	r3, r7
 8000d1e:	e71c      	b.n	8000b5a <__udivmoddi4+0x11e>
 8000d20:	4649      	mov	r1, r9
 8000d22:	e79c      	b.n	8000c5e <__udivmoddi4+0x222>
 8000d24:	eba1 0109 	sub.w	r1, r1, r9
 8000d28:	46c4      	mov	ip, r8
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fb09 f804 	mul.w	r8, r9, r4
 8000d32:	e7c4      	b.n	8000cbe <__udivmoddi4+0x282>

08000d34 <__aeabi_idiv0>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <I2C_EEP_Init>:
EEP_HandleTypeDef I2C_HI2C;


//EEPROM Init
bool I2C_EEP_Init(I2C_HandleTypeDef *HI2c, uint8_t I2CAddress)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	bool answer = false;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

	I2C_HI2C.HI2c = HI2c;
 8000d48:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	I2C_HI2C.Address = I2CAddress;
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	7153      	strb	r3, [r2, #5]

	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5e:	f008 f871 	bl	8008e44 <HAL_GPIO_WritePin>

	if (HAL_I2C_IsDeviceReady(I2C_HI2C.HI2c, I2C_HI2C.Address , 2, 100) == HAL_OK)
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <I2C_EEP_Init+0x50>)
 8000d68:	795b      	ldrb	r3, [r3, #5]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2364      	movs	r3, #100	@ 0x64
 8000d6e:	2202      	movs	r2, #2
 8000d70:	f008 fb62 	bl	8009438 <HAL_I2C_IsDeviceReady>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <I2C_EEP_Init+0x46>
	{
		answer = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
	}
	return answer;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000028 	.word	0x20000028

08000d8c <I2C_EEP_Read>:

uint8_t I2C_EEP_Read(uint32_t MemAddress)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	6078      	str	r0, [r7, #4]
	uint8_t result[2] = {0,};
 8000d94:	2300      	movs	r3, #0
 8000d96:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f008 f84f 	bl	8008e44 <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	while(HAL_I2C_IsDeviceReady(I2C_HI2C.HI2c, I2C_HI2C.Address, 1, HAL_MAX_DELAY) != HAL_OK);
 8000da6:	bf00      	nop
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000dae:	795b      	ldrb	r3, [r3, #5]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	2201      	movs	r2, #1
 8000db8:	f008 fb3e 	bl	8009438 <HAL_I2C_IsDeviceReady>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f2      	bne.n	8000da8 <I2C_EEP_Read+0x1c>

	HAL_I2C_Mem_Read(I2C_HI2C.HI2c, I2C_HI2C.Address, MemAddress, I2C_MEMADD_SIZE_8BIT, result, 1, HAL_MAX_DELAY);
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <I2C_EEP_Read+0x64>)
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	f008 fa0f 	bl	8009204 <HAL_I2C_Mem_Read>
	//HAL_Delay(10);
	return result[0];
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000028 	.word	0x20000028

08000df4 <I2C_EEP_Write>:

bool I2C_EEP_Write(uint32_t MemAddress, uint8_t Data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	bool answer = false;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
	uint8_t result[2] = {Data,};
 8000e04:	2300      	movs	r3, #0
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f008 f815 	bl	8008e44 <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	while(HAL_I2C_IsDeviceReady(I2C_HI2C.HI2c, I2C_HI2C.Address, 1, HAL_MAX_DELAY) != HAL_OK);
 8000e1a:	bf00      	nop
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e22:	795b      	ldrb	r3, [r3, #5]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f008 fb04 	bl	8009438 <HAL_I2C_IsDeviceReady>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f2      	bne.n	8000e1c <I2C_EEP_Write+0x28>

	HAL_I2C_Mem_Write(I2C_HI2C.HI2c, I2C_HI2C.Address, MemAddress, I2C_MEMADD_SIZE_8BIT, result, 1, HAL_MAX_DELAY);
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <I2C_EEP_Write+0x80>)
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	f008 f8c1 	bl	8008fdc <HAL_I2C_Mem_Write>
	//HAL_Delay(10);
	HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f007 ffee 	bl	8008e44 <HAL_GPIO_WritePin>
	//HAL_Delay(10);
	return answer;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000028 	.word	0x20000028

08000e78 <I2C_EEP_READ_U08>:
	HAL_I2C_Mem_Read(&hI2C1, DEVICE_ADDR, Idx, I2C_MEMADD_SIZE_8BIT, &rbuf, Page, HAL_MAX_DELAY);//(hI2C1, DEVICE_ADDR, Idx, I2C_MEMADD_SIZE_16BIT, rbuf, Page, 1000);
	return rbuf;
}
*/
uint8_t I2C_EEP_READ_U08 (uint32_t Idx)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
	result = I2C_EEP_Read(Idx);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff81 	bl	8000d8c <I2C_EEP_Read>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	return result;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <I2C_EEP_READ_U16>:

uint16_t I2C_EEP_READ_U16(uint32_t Idx)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	uint16_t result = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	81fb      	strh	r3, [r7, #14]

	result =  (uint16_t)(I2C_EEP_Read(Idx) << 8) ;
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff71 	bl	8000d8c <I2C_EEP_Read>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	81fb      	strh	r3, [r7, #14]
	result |= (uint16_t)(I2C_EEP_Read(Idx+1));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff69 	bl	8000d8c <I2C_EEP_Read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	81fb      	strh	r3, [r7, #14]

	return result;
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <I2C_EEP_READ_U32>:

uint32_t I2C_EEP_READ_U32(uint32_t Idx)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]

	result  = (uint32_t)(I2C_EEP_Read(Idx)   << 24);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff56 	bl	8000d8c <I2C_EEP_Read>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	061b      	lsls	r3, r3, #24
 8000ee4:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+1) << 16);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff4e 	bl	8000d8c <I2C_EEP_Read>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+2) << 8);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3302      	adds	r3, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff44 	bl	8000d8c <I2C_EEP_Read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+3));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3303      	adds	r3, #3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff3a 	bl	8000d8c <I2C_EEP_Read>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]

	return result;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <I2C_EEP_READ_FLOAT>:

float I2C_EEP_READ_FLOAT (uint32_t Idx)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	uint32_t result  = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]

	result  = (uint32_t)(I2C_EEP_Read(Idx)   << 24);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff27 	bl	8000d8c <I2C_EEP_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+1) << 16);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff1f 	bl	8000d8c <I2C_EEP_Read>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+2) << 8);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff15 	bl	8000d8c <I2C_EEP_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	021a      	lsls	r2, r3, #8
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(I2C_EEP_Read(Idx+3));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3303      	adds	r3, #3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff0b 	bl	8000d8c <I2C_EEP_Read>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]


	return *((float*)&result);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	ee07 3a90 	vmov	s15, r3
}
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <I2C_EEP_WRITE_U08>:

uint8_t I2C_EEP_WRITE_U08 (uint32_t Idx, uint8_t nData)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]

	uint8_t ret1 		= 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73bb      	strb	r3, [r7, #14]
	uint8_t ret2 		= 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	737b      	strb	r3, [r7, #13]

	uint8_t nVerifyOk 	= FAULT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

	ret1 = I2C_EEP_Write(Idx, nData);
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff1f 	bl	8000df4 <I2C_EEP_Write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73bb      	strb	r3, [r7, #14]
	ret2 = I2C_EEP_Read (Idx);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fee6 	bl	8000d8c <I2C_EEP_Read>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	737b      	strb	r3, [r7, #13]

	if(ret1 == ret2) nVerifyOk = OK;
 8000fc4:	7bba      	ldrb	r2, [r7, #14]
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d101      	bne.n	8000fd0 <I2C_EEP_WRITE_U08+0x3c>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]

	return nVerifyOk;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <I2C_EEP_WRITE_U16>:

uint8_t I2C_EEP_WRITE_U16(uint32_t Idx, uint16_t nData)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
	uint16_t ret1 		= 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	81bb      	strh	r3, [r7, #12]
	uint8_t nVerifyOk 	= FAULT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]


	I2C_EEP_Write(Idx  , ((nData >>  8)  & 0xFF)	);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fefb 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+1, ((nData      )  & 0xFF) 	);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fef3 	bl	8000df4 <I2C_EEP_Write>

	ret1  = (uint16_t) (I2C_EEP_Read(Idx) << 8);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff febc 	bl	8000d8c <I2C_EEP_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	81bb      	strh	r3, [r7, #12]
	ret1 |= (uint16_t) (I2C_EEP_Read(Idx+1) 	 );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff feb4 	bl	8000d8c <I2C_EEP_Read>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	81bb      	strh	r3, [r7, #12]


	if(ret1 == nData) nVerifyOk = OK;
 800102e:	89ba      	ldrh	r2, [r7, #12]
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	429a      	cmp	r2, r3
 8001034:	d101      	bne.n	800103a <I2C_EEP_WRITE_U16+0x60>
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]

	return nVerifyOk;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <I2C_EEP_WRITE_U32>:

uint8_t I2C_EEP_WRITE_U32(uint32_t Idx, uint32_t nData)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	uint32_t ret1 		= 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
	uint8_t nVerifyOk 	= FAULT;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]

	I2C_EEP_Write(Idx,   ((nData >> 24)  & 0xFF) 	);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	0e1b      	lsrs	r3, r3, #24
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fec8 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+1, ((nData >> 16)  & 0xFF) 	);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff febf 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+2, ((nData >>  8)  & 0xFF)	);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c9a      	adds	r2, r3, #2
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f7ff feb6 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+3, ((nData      )  & 0xFF) 	);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3303      	adds	r3, #3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff feae 	bl	8000df4 <I2C_EEP_Write>

	ret1  = (uint32_t) (I2C_EEP_Read (Idx  ) << 24);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fe77 	bl	8000d8c <I2C_EEP_Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	061b      	lsls	r3, r3, #24
 80010a2:	60bb      	str	r3, [r7, #8]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+1) << 16);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe6f 	bl	8000d8c <I2C_EEP_Read>
 80010ae:	4603      	mov	r3, r0
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+2) <<  8);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3302      	adds	r3, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe65 	bl	8000d8c <I2C_EEP_Read>
 80010c2:	4603      	mov	r3, r0
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+3)      );
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3303      	adds	r3, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe5b 	bl	8000d8c <I2C_EEP_Read>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]

	if(ret1 == nData) nVerifyOk = OK;
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d101      	bne.n	80010ec <I2C_EEP_WRITE_U32+0xa8>
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]

	return nVerifyOk;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <I2C_EEP_WRITE_FLOAT>:

uint8_t I2C_EEP_WRITE_FLOAT (uint32_t Idx, float fData)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	ed87 0a00 	vstr	s0, [r7]
	uint32_t nRelt = *((uint32_t*)&fData);
 8001102:	463b      	mov	r3, r7
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
	uint32_t ret1 		= 0;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]

	uint8_t nVerifyOk 	= FAULT;
 800110c:	2300      	movs	r3, #0
 800110e:	75fb      	strb	r3, [r7, #23]

	I2C_EEP_Write(Idx,   ((nRelt >> 24)  & 0xFF) 	);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	0e1b      	lsrs	r3, r3, #24
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fe6b 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+1, ((nRelt >> 16)  & 0xFF) 	);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f7ff fe62 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+2, ((nRelt >>  8)  & 0xFF)	);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	1c9a      	adds	r2, r3, #2
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f7ff fe59 	bl	8000df4 <I2C_EEP_Write>
	I2C_EEP_Write(Idx+3, ((nRelt      )  & 0xFF) 	);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3303      	adds	r3, #3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe51 	bl	8000df4 <I2C_EEP_Write>

	ret1  = (uint32_t) (I2C_EEP_Read (Idx  ) << 24);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fe1a 	bl	8000d8c <I2C_EEP_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	60fb      	str	r3, [r7, #12]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+1) << 16);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe12 	bl	8000d8c <I2C_EEP_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+2) <<  8);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3302      	adds	r3, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe08 	bl	8000d8c <I2C_EEP_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
	ret1 |= (uint32_t) (I2C_EEP_Read (Idx+3)      );
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3303      	adds	r3, #3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fdfe 	bl	8000d8c <I2C_EEP_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]

	if(ret1 == nRelt) nVerifyOk = OK;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d101      	bne.n	80011a6 <I2C_EEP_WRITE_FLOAT+0xb0>
 80011a2:	2301      	movs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]

	return nVerifyOk;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <EXT_Init>:
struct _tLDCTRL	tLdCtrl;
struct _tHVCTRL	tHvCtrl;
struct _tSiPMCTRL	tSiPmCtrl;

void EXT_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	memset(&tLdCtrl, 0, sizeof(struct _tLDCTRL));
 80011b4:	2210      	movs	r2, #16
 80011b6:	2100      	movs	r1, #0
 80011b8:	4816      	ldr	r0, [pc, #88]	@ (8001214 <EXT_Init+0x64>)
 80011ba:	f00b fd8b 	bl	800ccd4 <memset>
	memset(&tPdCtrl, 0, sizeof(struct _tPDCTRL));
 80011be:	2210      	movs	r2, #16
 80011c0:	2100      	movs	r1, #0
 80011c2:	4815      	ldr	r0, [pc, #84]	@ (8001218 <EXT_Init+0x68>)
 80011c4:	f00b fd86 	bl	800ccd4 <memset>
	memset(&tHvCtrl, 0, sizeof(struct _tHVCTRL));
 80011c8:	2210      	movs	r2, #16
 80011ca:	2100      	movs	r1, #0
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <EXT_Init+0x6c>)
 80011ce:	f00b fd81 	bl	800ccd4 <memset>
	memset(&tSiPmCtrl, 0, sizeof(struct _tSiPMCTRL));
 80011d2:	2210      	movs	r2, #16
 80011d4:	2100      	movs	r1, #0
 80011d6:	4812      	ldr	r0, [pc, #72]	@ (8001220 <EXT_Init+0x70>)
 80011d8:	f00b fd7c 	bl	800ccd4 <memset>

	tPdCtrl.AvgAdcVal 		= DEFAULT_ADC_PD_NORMAL_VAL;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <EXT_Init+0x68>)
 80011de:	220a      	movs	r2, #10
 80011e0:	809a      	strh	r2, [r3, #4]
	tLdCtrl.AvgAdcVal 		= DEFAULT_ADC_LD_NORMAL_VAL;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <EXT_Init+0x64>)
 80011e4:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 80011e8:	809a      	strh	r2, [r3, #4]
	tHvCtrl.AvgAdcVal		= DEFAULT_ADC_HV_NORMAL_VAL;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <EXT_Init+0x6c>)
 80011ec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80011f0:	809a      	strh	r2, [r3, #4]
	tSiPmCtrl.AvgAdcVal 	= DEFAULT_ADC_SiPM_NORMAL_VAL;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <EXT_Init+0x70>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	809a      	strh	r2, [r3, #4]

	EXT_LD_Ctrl(EXT_LD_CTRL_OFF);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f813 	bl	8001224 <EXT_LD_Ctrl>
	EXT_HV_Ctrl(EXT_HV_CTRL_OFF);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f834 	bl	800126c <EXT_HV_Ctrl>
	EXT_PD_Ctrl(EXT_PD_CTRL_OFF);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f855 	bl	80012b4 <EXT_PD_Ctrl>
	EXT_SiPM_Ctrl(EXT_SiPM_CTRL_OFF);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f876 	bl	80012fc <EXT_SiPM_Ctrl>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000084 	.word	0x20000084
 8001218:	20000074 	.word	0x20000074
 800121c:	20000094 	.word	0x20000094
 8001220:	200000a4 	.word	0x200000a4

08001224 <EXT_LD_Ctrl>:

// GPIO Control-----------------------------------------------------------------------------------------------------------------------
void EXT_LD_Ctrl(uint8_t nCtrl)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	if(EXT_LD_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_SET);    tLdCtrl.FlagCtrlOn = EXT_LD_CTRL_ON;  }
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d108      	bne.n	8001246 <EXT_LD_Ctrl+0x22>
 8001234:	2201      	movs	r2, #1
 8001236:	2101      	movs	r1, #1
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <EXT_LD_Ctrl+0x40>)
 800123a:	f007 fe03 	bl	8008e44 <HAL_GPIO_WritePin>
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <EXT_LD_Ctrl+0x44>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tLdCtrl.FlagCtrlOn = EXT_LD_CTRL_OFF; tLdCtrl.ErrorCount = 0;}
}
 8001244:	e00a      	b.n	800125c <EXT_LD_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tLdCtrl.FlagCtrlOn = EXT_LD_CTRL_OFF; tLdCtrl.ErrorCount = 0;}
 8001246:	2200      	movs	r2, #0
 8001248:	2101      	movs	r1, #1
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <EXT_LD_Ctrl+0x40>)
 800124c:	f007 fdfa 	bl	8008e44 <HAL_GPIO_WritePin>
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <EXT_LD_Ctrl+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <EXT_LD_Ctrl+0x44>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000400 	.word	0x48000400
 8001268:	20000084 	.word	0x20000084

0800126c <EXT_HV_Ctrl>:

void EXT_HV_Ctrl(uint8_t nCtrl)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if(EXT_HV_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(HV_CON_GPIO_Port, HV_CON_Pin, GPIO_PIN_SET);    tHvCtrl.FlagCtrlOn = EXT_HV_CTRL_ON;  }
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <EXT_HV_Ctrl+0x22>
 800127c:	2201      	movs	r2, #1
 800127e:	2102      	movs	r1, #2
 8001280:	480a      	ldr	r0, [pc, #40]	@ (80012ac <EXT_HV_Ctrl+0x40>)
 8001282:	f007 fddf 	bl	8008e44 <HAL_GPIO_WritePin>
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <EXT_HV_Ctrl+0x44>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(HV_CON_GPIO_Port, HV_CON_Pin, GPIO_PIN_RESET);  tHvCtrl.FlagCtrlOn = EXT_HV_CTRL_OFF; tHvCtrl.ErrorCount = 0;}
}
 800128c:	e00a      	b.n	80012a4 <EXT_HV_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(HV_CON_GPIO_Port, HV_CON_Pin, GPIO_PIN_RESET);  tHvCtrl.FlagCtrlOn = EXT_HV_CTRL_OFF; tHvCtrl.ErrorCount = 0;}
 800128e:	2200      	movs	r2, #0
 8001290:	2102      	movs	r1, #2
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <EXT_HV_Ctrl+0x40>)
 8001294:	f007 fdd6 	bl	8008e44 <HAL_GPIO_WritePin>
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <EXT_HV_Ctrl+0x44>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <EXT_HV_Ctrl+0x44>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	48000400 	.word	0x48000400
 80012b0:	20000094 	.word	0x20000094

080012b4 <EXT_PD_Ctrl>:

void EXT_PD_Ctrl(uint8_t nCtrl)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	if(EXT_PD_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_SET);    tPdCtrl.FlagCtrlOn = EXT_PD_CTRL_ON;  }
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <EXT_PD_Ctrl+0x22>
 80012c4:	2201      	movs	r2, #1
 80012c6:	2101      	movs	r1, #1
 80012c8:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <EXT_PD_Ctrl+0x40>)
 80012ca:	f007 fdbb 	bl	8008e44 <HAL_GPIO_WritePin>
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <EXT_PD_Ctrl+0x44>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tPdCtrl.FlagCtrlOn = EXT_PD_CTRL_OFF; tPdCtrl.ErrorCount = 0;}
}
 80012d4:	e00a      	b.n	80012ec <EXT_PD_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tPdCtrl.FlagCtrlOn = EXT_PD_CTRL_OFF; tPdCtrl.ErrorCount = 0;}
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <EXT_PD_Ctrl+0x40>)
 80012dc:	f007 fdb2 	bl	8008e44 <HAL_GPIO_WritePin>
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <EXT_PD_Ctrl+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <EXT_PD_Ctrl+0x44>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	48000400 	.word	0x48000400
 80012f8:	20000074 	.word	0x20000074

080012fc <EXT_SiPM_Ctrl>:

void EXT_SiPM_Ctrl(uint8_t nCtrl)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	if(EXT_SiPM_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_SET);    tSiPmCtrl.FlagCtrlOn = EXT_SiPM_CTRL_ON;  }
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <EXT_SiPM_Ctrl+0x22>
 800130c:	2201      	movs	r2, #1
 800130e:	2101      	movs	r1, #1
 8001310:	480a      	ldr	r0, [pc, #40]	@ (800133c <EXT_SiPM_Ctrl+0x40>)
 8001312:	f007 fd97 	bl	8008e44 <HAL_GPIO_WritePin>
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <EXT_SiPM_Ctrl+0x44>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tSiPmCtrl.FlagCtrlOn = EXT_SiPM_CTRL_OFF; tSiPmCtrl.ErrorCount = 0;}
}
 800131c:	e00a      	b.n	8001334 <EXT_SiPM_Ctrl+0x38>
	else							{ HAL_GPIO_WritePin(LD_CON_GPIO_Port, LD_CON_Pin, GPIO_PIN_RESET);  tSiPmCtrl.FlagCtrlOn = EXT_SiPM_CTRL_OFF; tSiPmCtrl.ErrorCount = 0;}
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <EXT_SiPM_Ctrl+0x40>)
 8001324:	f007 fd8e 	bl	8008e44 <HAL_GPIO_WritePin>
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <EXT_SiPM_Ctrl+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <EXT_SiPM_Ctrl+0x44>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	48000400 	.word	0x48000400
 8001340:	200000a4 	.word	0x200000a4

08001344 <ADC_PD_Measuerment>:
	}
}
*/

void ADC_PD_Measuerment(uint8_t OnChk)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	if (ON == OnChk)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d130      	bne.n	80013b6 <ADC_PD_Measuerment+0x72>
	{
		tPdCtrl.FlagCmdBusyOn = TRUE;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001356:	2201      	movs	r2, #1
 8001358:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_PD_LB_VAL < tPdCtrl.CurrAdcVal) && (DEFAULT_ADC_PD_UB_VAL > tPdCtrl.CurrAdcVal))
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800135c:	88db      	ldrh	r3, [r3, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d01c      	beq.n	800139c <ADC_PD_Measuerment+0x58>
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001364:	88db      	ldrh	r3, [r3, #6]
 8001366:	2b1d      	cmp	r3, #29
 8001368:	d818      	bhi.n	800139c <ADC_PD_Measuerment+0x58>
		{
			if (PD_MAX_COUNT > tPdCtrl.ChkCount++) {
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	491c      	ldr	r1, [pc, #112]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001372:	608a      	str	r2, [r1, #8]
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <ADC_PD_Measuerment+0xa4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d80c      	bhi.n	8001394 <ADC_PD_Measuerment+0x50>
				tPdCtrl.AvgAdcVal  = (tPdCtrl.CurrAdcVal + tPdCtrl.AvgAdcVal) / 2;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800137c:	88db      	ldrh	r3, [r3, #6]
 800137e:	461a      	mov	r2, r3
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001382:	889b      	ldrh	r3, [r3, #4]
 8001384:	4413      	add	r3, r2
 8001386:	0fda      	lsrs	r2, r3, #31
 8001388:	4413      	add	r3, r2
 800138a:	105b      	asrs	r3, r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001390:	809a      	strh	r2, [r3, #4]
			if (PD_MAX_COUNT > tPdCtrl.ChkCount++) {
 8001392:	e020      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
			}
			else
			{
				tPdCtrl.ChkCount = PD_MAX_COUNT;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 8001396:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <ADC_PD_Measuerment+0xa8>)
 8001398:	609a      	str	r2, [r3, #8]
			if (PD_MAX_COUNT > tPdCtrl.ChkCount++) {
 800139a:	e01c      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
			}
		}

		else
		{
			if (PD_MAX_COUNT < tPdCtrl.ErrorCount++) { tPdCtrl.ErrorCount = PD_MAX_COUNT; }
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	4910      	ldr	r1, [pc, #64]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013a4:	60ca      	str	r2, [r1, #12]
 80013a6:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d313      	bcc.n	80013d6 <ADC_PD_Measuerment+0x92>
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <ADC_PD_Measuerment+0xa8>)
 80013b2:	60da      	str	r2, [r3, #12]
		tPdCtrl.FlagCmdBusyOn = FALSE;
		tPdCtrl.CurrAdcVal = 0;
		tPdCtrl.ChkCount = 0;
		tPdCtrl.AvgAdcVal = DEFAULT_ADC_PD_NORMAL_VAL;
	}
}
 80013b4:	e00f      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
		tPdCtrl.FlagErrOn = OFF;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	70da      	strb	r2, [r3, #3]
		tPdCtrl.FlagCmdBusyOn = FALSE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	705a      	strb	r2, [r3, #1]
		tPdCtrl.CurrAdcVal = 0;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	80da      	strh	r2, [r3, #6]
		tPdCtrl.ChkCount = 0;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
		tPdCtrl.AvgAdcVal = DEFAULT_ADC_PD_NORMAL_VAL;
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <ADC_PD_Measuerment+0xa0>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	809a      	strh	r2, [r3, #4]
}
 80013d4:	e7ff      	b.n	80013d6 <ADC_PD_Measuerment+0x92>
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000074 	.word	0x20000074
 80013e8:	00fffffd 	.word	0x00fffffd
 80013ec:	00fffffe 	.word	0x00fffffe

080013f0 <ADC_LD_Measuerment>:

void ADC_LD_Measuerment(uint8_t OnChk)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]

	if (ON == OnChk)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d132      	bne.n	8001466 <ADC_LD_Measuerment+0x76>
	{
		tLdCtrl.FlagCmdBusyOn = TRUE;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001402:	2201      	movs	r2, #1
 8001404:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_LD_LB_VAL < tLdCtrl.CurrAdcVal) && (DEFAULT_ADC_LD_UB_VAL > tLdCtrl.CurrAdcVal))
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001408:	88db      	ldrh	r3, [r3, #6]
 800140a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800140e:	d91d      	bls.n	800144c <ADC_LD_Measuerment+0x5c>
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001412:	88db      	ldrh	r3, [r3, #6]
 8001414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001418:	d218      	bcs.n	800144c <ADC_LD_Measuerment+0x5c>
		{
			if (LD_MAX_COUNT > tLdCtrl.ChkCount++) {
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	491e      	ldr	r1, [pc, #120]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001422:	608a      	str	r2, [r1, #8]
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <ADC_LD_Measuerment+0xb0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d80c      	bhi.n	8001444 <ADC_LD_Measuerment+0x54>
				tLdCtrl.AvgAdcVal  = (tLdCtrl.CurrAdcVal + tLdCtrl.AvgAdcVal) / 2;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800142c:	88db      	ldrh	r3, [r3, #6]
 800142e:	461a      	mov	r2, r3
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	4413      	add	r3, r2
 8001436:	0fda      	lsrs	r2, r3, #31
 8001438:	4413      	add	r3, r2
 800143a:	105b      	asrs	r3, r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001440:	809a      	strh	r2, [r3, #4]
			if (LD_MAX_COUNT > tLdCtrl.ChkCount++) {
 8001442:	e024      	b.n	800148e <ADC_LD_Measuerment+0x9e>
			}
			else
			{
				tLdCtrl.ChkCount = LD_MAX_COUNT;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001446:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <ADC_LD_Measuerment+0xb4>)
 8001448:	609a      	str	r2, [r3, #8]
			if (LD_MAX_COUNT > tLdCtrl.ChkCount++) {
 800144a:	e020      	b.n	800148e <ADC_LD_Measuerment+0x9e>
			}
		}

		else
		{
			if (LD_MAX_COUNT < tLdCtrl.ErrorCount++) { tLdCtrl.ErrorCount = LD_MAX_COUNT; }
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	4912      	ldr	r1, [pc, #72]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001454:	60ca      	str	r2, [r1, #12]
 8001456:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800145a:	4293      	cmp	r3, r2
 800145c:	d317      	bcc.n	800148e <ADC_LD_Measuerment+0x9e>
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001460:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <ADC_LD_Measuerment+0xb4>)
 8001462:	60da      	str	r2, [r3, #12]
		tLdCtrl.ChkCount = 0;
		tLdCtrl.ErrorCount = 0;

		tLdCtrl.AvgAdcVal = DEFAULT_ADC_LD_NORMAL_VAL;
	}
}
 8001464:	e013      	b.n	800148e <ADC_LD_Measuerment+0x9e>
		tLdCtrl.FlagErrOn = OFF;
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001468:	2200      	movs	r2, #0
 800146a:	70da      	strb	r2, [r3, #3]
		tLdCtrl.FlagCmdBusyOn = FALSE;
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800146e:	2200      	movs	r2, #0
 8001470:	705a      	strb	r2, [r3, #1]
		tLdCtrl.CurrAdcVal = 0;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001474:	2200      	movs	r2, #0
 8001476:	80da      	strh	r2, [r3, #6]
		tLdCtrl.ChkCount = 0;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <ADC_LD_Measuerment+0xac>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
		tLdCtrl.ErrorCount = 0;
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
		tLdCtrl.AvgAdcVal = DEFAULT_ADC_LD_NORMAL_VAL;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <ADC_LD_Measuerment+0xac>)
 8001486:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800148a:	809a      	strh	r2, [r3, #4]
}
 800148c:	e7ff      	b.n	800148e <ADC_LD_Measuerment+0x9e>
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000084 	.word	0x20000084
 80014a0:	00fffffd 	.word	0x00fffffd
 80014a4:	00fffffe 	.word	0x00fffffe

080014a8 <ADC_HV_Measuerment>:

void ADC_HV_Measuerment(uint8_t OnChk)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]

	if (ON == OnChk)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d132      	bne.n	800151e <ADC_HV_Measuerment+0x76>
	{
		tHvCtrl.FlagCmdBusyOn = TRUE;
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_HV_LB_VAL < tHvCtrl.CurrAdcVal) && (DEFAULT_ADC_HV_UB_VAL > tHvCtrl.CurrAdcVal))
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014c6:	d91d      	bls.n	8001504 <ADC_HV_Measuerment+0x5c>
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014ca:	88db      	ldrh	r3, [r3, #6]
 80014cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014d0:	d218      	bcs.n	8001504 <ADC_HV_Measuerment+0x5c>
		{
			if (HV_MAX_COUNT > tHvCtrl.ChkCount++) {
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	491c      	ldr	r1, [pc, #112]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014da:	608a      	str	r2, [r1, #8]
 80014dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <ADC_HV_Measuerment+0xa8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d80c      	bhi.n	80014fc <ADC_HV_Measuerment+0x54>
				tHvCtrl.AvgAdcVal = (tHvCtrl.CurrAdcVal + tHvCtrl.AvgAdcVal) / 2;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014e4:	88db      	ldrh	r3, [r3, #6]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	0fda      	lsrs	r2, r3, #31
 80014f0:	4413      	add	r3, r2
 80014f2:	105b      	asrs	r3, r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014f8:	809a      	strh	r2, [r3, #4]
			if (HV_MAX_COUNT > tHvCtrl.ChkCount++) {
 80014fa:	e021      	b.n	8001540 <ADC_HV_Measuerment+0x98>
			}
			else
			{
				tHvCtrl.ChkCount = HV_MAX_COUNT;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <ADC_HV_Measuerment+0xac>)
 8001500:	609a      	str	r2, [r3, #8]
			if (HV_MAX_COUNT > tHvCtrl.ChkCount++) {
 8001502:	e01d      	b.n	8001540 <ADC_HV_Measuerment+0x98>
			}
		}

		else
		{
			if (HV_MAX_COUNT < tHvCtrl.ErrorCount++) { tHvCtrl.ErrorCount = HV_MAX_COUNT; }
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4910      	ldr	r1, [pc, #64]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 800150c:	60ca      	str	r2, [r1, #12]
 800150e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001512:	4293      	cmp	r3, r2
 8001514:	d314      	bcc.n	8001540 <ADC_HV_Measuerment+0x98>
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001518:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <ADC_HV_Measuerment+0xac>)
 800151a:	60da      	str	r2, [r3, #12]
		tHvCtrl.FlagCmdBusyOn = FALSE;
		tHvCtrl.CurrAdcVal = 0;
		tHvCtrl.ChkCount = 0;
		tHvCtrl.AvgAdcVal = DEFAULT_ADC_HV_NORMAL_VAL;
	}
}
 800151c:	e010      	b.n	8001540 <ADC_HV_Measuerment+0x98>
		tHvCtrl.FlagErrOn = OFF;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	70da      	strb	r2, [r3, #3]
		tHvCtrl.FlagCmdBusyOn = FALSE;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
		tHvCtrl.CurrAdcVal = 0;
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	80da      	strh	r2, [r3, #6]
		tHvCtrl.ChkCount = 0;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
		tHvCtrl.AvgAdcVal = DEFAULT_ADC_HV_NORMAL_VAL;
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <ADC_HV_Measuerment+0xa4>)
 8001538:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800153c:	809a      	strh	r2, [r3, #4]
}
 800153e:	e7ff      	b.n	8001540 <ADC_HV_Measuerment+0x98>
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20000094 	.word	0x20000094
 8001550:	00fffffd 	.word	0x00fffffd
 8001554:	00fffffe 	.word	0x00fffffe

08001558 <ADC_SiPM_Measuerment>:

void ADC_SiPM_Measuerment(uint8_t OnChk)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]

	if (ON == OnChk)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d130      	bne.n	80015ca <ADC_SiPM_Measuerment+0x72>
	{
		tSiPmCtrl.FlagCmdBusyOn = TRUE;
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 800156a:	2201      	movs	r2, #1
 800156c:	705a      	strb	r2, [r3, #1]

		if((DEFAULT_ADC_SiPM_LB_VAL < tSiPmCtrl.CurrAdcVal) && (DEFAULT_ADC_SiPM_UB_VAL > tSiPmCtrl.CurrAdcVal))
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001570:	88db      	ldrh	r3, [r3, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01c      	beq.n	80015b0 <ADC_SiPM_Measuerment+0x58>
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001578:	88db      	ldrh	r3, [r3, #6]
 800157a:	2b1d      	cmp	r3, #29
 800157c:	d818      	bhi.n	80015b0 <ADC_SiPM_Measuerment+0x58>
		{
			if (SiPM_MAX_COUNT > tSiPmCtrl.ChkCount++) { tSiPmCtrl.AvgAdcVal = (tSiPmCtrl.CurrAdcVal + tSiPmCtrl.AvgAdcVal) / 2; }
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001586:	608a      	str	r2, [r1, #8]
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <ADC_SiPM_Measuerment+0xa4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d80c      	bhi.n	80015a8 <ADC_SiPM_Measuerment+0x50>
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001590:	88db      	ldrh	r3, [r3, #6]
 8001592:	461a      	mov	r2, r3
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	4413      	add	r3, r2
 800159a:	0fda      	lsrs	r2, r3, #31
 800159c:	4413      	add	r3, r2
 800159e:	105b      	asrs	r3, r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015a4:	809a      	strh	r2, [r3, #4]
 80015a6:	e020      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
			else
			{
				tSiPmCtrl.ChkCount = SiPM_MAX_COUNT;
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <ADC_SiPM_Measuerment+0xa8>)
 80015ac:	609a      	str	r2, [r3, #8]
			if (SiPM_MAX_COUNT > tSiPmCtrl.ChkCount++) { tSiPmCtrl.AvgAdcVal = (tSiPmCtrl.CurrAdcVal + tSiPmCtrl.AvgAdcVal) / 2; }
 80015ae:	e01c      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
			}
		}

		else
		{
			if (SiPM_MAX_COUNT < tSiPmCtrl.ErrorCount++) { tSiPmCtrl.ErrorCount = HV_MAX_COUNT; }
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4910      	ldr	r1, [pc, #64]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015b8:	60ca      	str	r2, [r1, #12]
 80015ba:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80015be:	4293      	cmp	r3, r2
 80015c0:	d313      	bcc.n	80015ea <ADC_SiPM_Measuerment+0x92>
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <ADC_SiPM_Measuerment+0xa8>)
 80015c6:	60da      	str	r2, [r3, #12]
		tSiPmCtrl.FlagCmdBusyOn = FALSE;
		tSiPmCtrl.CurrAdcVal = 0;
		tSiPmCtrl.ChkCount = 0;
		tSiPmCtrl.AvgAdcVal = DEFAULT_ADC_SiPM_NORMAL_VAL;
	}
}
 80015c8:	e00f      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
		tSiPmCtrl.FlagErrOn = OFF;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	70da      	strb	r2, [r3, #3]
		tSiPmCtrl.FlagCmdBusyOn = FALSE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	705a      	strb	r2, [r3, #1]
		tSiPmCtrl.CurrAdcVal = 0;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	80da      	strh	r2, [r3, #6]
		tSiPmCtrl.ChkCount = 0;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
		tSiPmCtrl.AvgAdcVal = DEFAULT_ADC_SiPM_NORMAL_VAL;
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <ADC_SiPM_Measuerment+0xa0>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	809a      	strh	r2, [r3, #4]
}
 80015e8:	e7ff      	b.n	80015ea <ADC_SiPM_Measuerment+0x92>
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200000a4 	.word	0x200000a4
 80015fc:	00fffffd 	.word	0x00fffffd
 8001600:	00fffffe 	.word	0x00fffffe
 8001604:	00000000 	.word	0x00000000

08001608 <ADC_ChkCondition>:


uint8_t ADC_ChkCondition(uint16_t DefSpd, uint16_t nAdcVal)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]
	uint8_t result = FALSE;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

	if( (CONST_REF_GUIDE_VAL_LB(DefSpd) <= nAdcVal) && (CONST_REF_GUIDE_VAL_UB(DefSpd) >= nAdcVal) )
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff28 	bl	8000474 <__aeabi_i2d>
 8001624:	a31c      	add	r3, pc, #112	@ (adr r3, 8001698 <ADC_ChkCondition+0x90>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff f999 	bl	800096c <__aeabi_d2f>
 800163a:	ee07 0a10 	vmov	s14, r0
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d81c      	bhi.n	800168c <ADC_ChkCondition+0x84>
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff0d 	bl	8000474 <__aeabi_i2d>
 800165a:	a311      	add	r3, pc, #68	@ (adr r3, 80016a0 <ADC_ChkCondition+0x98>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f97e 	bl	800096c <__aeabi_d2f>
 8001670:	ee07 0a10 	vmov	s14, r0
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	db01      	blt.n	800168c <ADC_ChkCondition+0x84>
	{
		result  = TRUE;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	3feccccc 	.word	0x3feccccc
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3ff19999 	.word	0x3ff19999

080016a8 <SetFanSpdCtrl>:
#include <Fan.h>

struct _tFAN	tFan;

static void SetFanSpdCtrl(uint8_t nSpd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	if(FAN_SPD_HI == nSpd) 	{ HAL_GPIO_WritePin(FAN_SPEED_GPIO_Port, FAN_SPEED_Pin, GPIO_PIN_SET); 		tFan.SelSpd = FAN_SPD_HI; }
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <SetFanSpdCtrl+0x22>
 80016b8:	2201      	movs	r2, #1
 80016ba:	2108      	movs	r1, #8
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <SetFanSpdCtrl+0x3c>)
 80016be:	f007 fbc1 	bl	8008e44 <HAL_GPIO_WritePin>
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <SetFanSpdCtrl+0x40>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	715a      	strb	r2, [r3, #5]
	else					{ HAL_GPIO_WritePin(FAN_SPEED_GPIO_Port, FAN_SPEED_Pin, GPIO_PIN_RESET); 	tFan.SelSpd = FAN_SPD_LO; }
}
 80016c8:	e007      	b.n	80016da <SetFanSpdCtrl+0x32>
	else					{ HAL_GPIO_WritePin(FAN_SPEED_GPIO_Port, FAN_SPEED_Pin, GPIO_PIN_RESET); 	tFan.SelSpd = FAN_SPD_LO; }
 80016ca:	2200      	movs	r2, #0
 80016cc:	2108      	movs	r1, #8
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <SetFanSpdCtrl+0x3c>)
 80016d0:	f007 fbb8 	bl	8008e44 <HAL_GPIO_WritePin>
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SetFanSpdCtrl+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	715a      	strb	r2, [r3, #5]
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	48000400 	.word	0x48000400
 80016e8:	200000b4 	.word	0x200000b4

080016ec <SetFanCtrl>:

static void SetFanCtrl(uint8_t nCtrl)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	if(FAN_CTRL_ON == nCtrl) 	{ HAL_GPIO_WritePin(FAN_CON_GPIO_Port, FAN_CON_Pin, GPIO_PIN_SET); 	  tFan.FlagCtrlOn = FAN_CTRL_ON;  }
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <SetFanCtrl+0x22>
 80016fc:	2201      	movs	r2, #1
 80016fe:	2110      	movs	r1, #16
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <SetFanCtrl+0x3c>)
 8001702:	f007 fb9f 	bl	8008e44 <HAL_GPIO_WritePin>
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <SetFanCtrl+0x40>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
	else						{ HAL_GPIO_WritePin(FAN_CON_GPIO_Port, FAN_CON_Pin, GPIO_PIN_RESET);  tFan.FlagCtrlOn = FAN_CTRL_OFF; }
}
 800170c:	e007      	b.n	800171e <SetFanCtrl+0x32>
	else						{ HAL_GPIO_WritePin(FAN_CON_GPIO_Port, FAN_CON_Pin, GPIO_PIN_RESET);  tFan.FlagCtrlOn = FAN_CTRL_OFF; }
 800170e:	2200      	movs	r2, #0
 8001710:	2110      	movs	r1, #16
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <SetFanCtrl+0x3c>)
 8001714:	f007 fb96 	bl	8008e44 <HAL_GPIO_WritePin>
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SetFanCtrl+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	48000400 	.word	0x48000400
 800172c:	200000b4 	.word	0x200000b4

08001730 <FAN_Init>:



void FAN_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	memset(&tFan, 0, sizeof(struct _tFAN));
 8001734:	2218      	movs	r2, #24
 8001736:	2100      	movs	r1, #0
 8001738:	4803      	ldr	r0, [pc, #12]	@ (8001748 <FAN_Init+0x18>)
 800173a:	f00b facb 	bl	800ccd4 <memset>
	SetFanCtrl(FAN_CTRL_OFF);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ffd4 	bl	80016ec <SetFanCtrl>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000b4 	.word	0x200000b4

0800174c <FAN_Ctrl>:


void FAN_Ctrl(unsigned char SelSpd, unsigned char nCtrlOn)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	4613      	mov	r3, r2
 800175a:	71bb      	strb	r3, [r7, #6]
	SetFanSpdCtrl(SelSpd);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffa2 	bl	80016a8 <SetFanSpdCtrl>
	SetFanCtrl(nCtrlOn);
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffc0 	bl	80016ec <SetFanCtrl>

	if(FAN_CTRL_OFF == nCtrlOn) { tFan.RpmCurrCnt = 0; SetFanSpdCtrl(FAN_SPD_LO); }
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <FAN_Ctrl+0x32>
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <FAN_Ctrl+0x3c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff ff95 	bl	80016a8 <SetFanSpdCtrl>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000b4 	.word	0x200000b4

0800178c <FAN_RpmMeasuerment>:

uint8_t FAN_RpmMeasuerment(uint8_t MeasureOn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	uint8_t result = FALSE;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]

	if(OFF == MeasureOn) { HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);  tFan.RpmCurrCnt = 0;  return;}
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <FAN_RpmMeasuerment+0x24>
 80017a0:	2017      	movs	r0, #23
 80017a2:	f006 ff40 	bl	8008626 <HAL_NVIC_DisableIRQ>
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <FAN_RpmMeasuerment+0x40>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	bf00      	nop
 80017ae:	e009      	b.n	80017c4 <FAN_RpmMeasuerment+0x38>
	else
	{
		 HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b0:	2017      	movs	r0, #23
 80017b2:	f006 ff2a 	bl	800860a <HAL_NVIC_EnableIRQ>

		 if(ON == tFan.FlagMeasureComp)
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <FAN_RpmMeasuerment+0x40>)
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <FAN_RpmMeasuerment+0x36>
		 {
			 result = TRUE;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
		 }
	}
	 return result;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200000b4 	.word	0x200000b4

080017d0 <FAN_ChkCondition>:

uint8_t FAN_ChkCondition(uint16_t DefSpd,uint32_t nRpmCnt)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	ed2d 8b02 	vpush	{d8}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	80fb      	strh	r3, [r7, #6]
	uint8_t result = FALSE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

	if( (nRpmCnt >= CONST_REF_GUIDE_VAL_LB(DefSpd)) && (nRpmCnt <= CONST_REF_GUIDE_VAL_UB(DefSpd)) )
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe3f 	bl	8000474 <__aeabi_i2d>
 80017f6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001868 <FAN_ChkCondition+0x98>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f8b0 	bl	800096c <__aeabi_d2f>
 800180c:	ee07 0a90 	vmov	s15, r0
 8001810:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	db1c      	blt.n	8001854 <FAN_ChkCondition+0x84>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe24 	bl	8000474 <__aeabi_i2d>
 800182c:	a310      	add	r3, pc, #64	@ (adr r3, 8001870 <FAN_ChkCondition+0xa0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f895 	bl	800096c <__aeabi_d2f>
 8001842:	ee07 0a90 	vmov	s15, r0
 8001846:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d801      	bhi.n	8001854 <FAN_ChkCondition+0x84>
	{
		result  = TRUE;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	ecbd 8b02 	vpop	{d8}
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	cccccccd 	.word	0xcccccccd
 800186c:	3feccccc 	.word	0x3feccccc
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3ff19999 	.word	0x3ff19999

08001878 <Calc_Init>:
#include <G_Value.h>

#include <Measure.h>

void Calc_Init(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
	for(i = PM_CH1; i < PM_CH_MAX; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	e038      	b.n	80018fa <Calc_Init+0x82>
	{
		tPmResult1[i].fMass_Concet = 0.0f;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4a28      	ldr	r2, [pc, #160]	@ (800192c <Calc_Init+0xb4>)
 800188c:	015b      	lsls	r3, r3, #5
 800188e:	4413      	add	r3, r2
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
		tPmResult1[i].fTmpMassConcet = 0.0f;
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <Calc_Init+0xb4>)
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].C = 0.0f;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a20      	ldr	r2, [pc, #128]	@ (800192c <Calc_Init+0xb4>)
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4413      	add	r3, r2
 80018ae:	3308      	adds	r3, #8
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].M = 0.0f;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <Calc_Init+0xb4>)
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	4413      	add	r3, r2
 80018be:	330c      	adds	r3, #12
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].fNum_Concet = 0.0f;
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <Calc_Init+0xb4>)
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	4413      	add	r3, r2
 80018ce:	3310      	adds	r3, #16
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		tPmResult1[i].nTmpNumConcet = 0;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <Calc_Init+0xb4>)
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	4413      	add	r3, r2
 80018de:	3314      	adds	r3, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

		tPmResult1[i].fTps = 0.0f;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a11      	ldr	r2, [pc, #68]	@ (800192c <Calc_Init+0xb4>)
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	4413      	add	r3, r2
 80018ec:	3318      	adds	r3, #24
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
	for(i = PM_CH1; i < PM_CH_MAX; i++)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3301      	adds	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d9c3      	bls.n	8001888 <Calc_Init+0x10>
	}

	tPmResult2.fCFU = 0.0f;
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <Calc_Init+0xb8>)
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
	tPmResult2.fNumConcetBio = 0.0f;
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <Calc_Init+0xb8>)
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
	tPmResult2.fResultTps = 0.0f;
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <Calc_Init+0xb8>)
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
	tPmResult2.fReverved = 0.0f;
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <Calc_Init+0xb8>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	200001bc 	.word	0x200001bc
 8001930:	2000027c 	.word	0x2000027c

08001934 <Calc_GetSelNumConnect>:

void Calc_GetSelNumConnect(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].C = (float)( (tPmResult1[PM_CH1].nTmpNumConcet * tParam[PM_CH1].Cal));
 8001938:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 8001946:	edd3 7a08 	vldr	s15, [r3, #32]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001950:	edc3 7a02 	vstr	s15, [r3, #8]
	tPmResult1[PM_CH2].C = (float)( (tPmResult1[PM_CH2].nTmpNumConcet * tParam[PM_CH2].Cal));
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 8001962:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 800196c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	tPmResult1[PM_CH3].C = (float)( (tPmResult1[PM_CH3].nTmpNumConcet * tParam[PM_CH3].Cal));
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197c:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 800197e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 8001988:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	tPmResult1[PM_CH4].C = (float)( (tPmResult1[PM_CH4].nTmpNumConcet * tParam[PM_CH4].Cal));
 800198c:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 800199a:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 80019a4:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	tPmResult1[PM_CH5].C = (float)( (tPmResult1[PM_CH5].nTmpNumConcet * tParam[PM_CH5].Cal));
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <Calc_GetSelNumConnect+0xa0>)
 80019b8:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <Calc_GetSelNumConnect+0x9c>)
 80019c2:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200001bc 	.word	0x200001bc
 80019d4:	200000cc 	.word	0x200000cc

080019d8 <Calc_GetNumberConcent>:

// Number Concentration Calc
void Calc_GetNumberConcent(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].fNum_Concet = tPmResult1[PM_CH1].C;
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019e2:	6113      	str	r3, [r2, #16]
	tPmResult1[PM_CH2].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C;
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ea:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019ec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019f6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	tPmResult1[PM_CH3].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C + tPmResult1[PM_CH3].C;
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 80019fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a0c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a16:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	tPmResult1[PM_CH4].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C + tPmResult1[PM_CH3].C + tPmResult1[PM_CH4].C;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a22:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a2c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a36:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a40:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	tPmResult1[PM_CH5].fNum_Concet = tPmResult1[PM_CH1].C + tPmResult1[PM_CH2].C + tPmResult1[PM_CH3].C + tPmResult1[PM_CH4].C + tPmResult1[PM_CH5].C;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a4c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a56:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a60:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a6a:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <Calc_GetNumberConcent+0xac>)
 8001a74:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200001bc 	.word	0x200001bc

08001a88 <Calc_GetSelMassConnect>:

void Calc_GetSelMassConnect(void) //PM Count * Calibration  * Density * (4/3*Pi*(Dpv/2)^3;
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].M = (float)( tPmResult1[PM_CH1].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH1_DPV_VAL / 2.0, 3) ) );
 8001a8c:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001a8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a92:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001a94:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001b34 <Calc_GetSelMassConnect+0xac>
 8001aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001aa6:	edc3 7a03 	vstr	s15, [r3, #12]
	tPmResult1[PM_CH2].M = (float)( tPmResult1[PM_CH2].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH2_DPV_VAL / 2.0, 3) ) );
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001aac:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001ab2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001b38 <Calc_GetSelMassConnect+0xb0>
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001ac4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	tPmResult1[PM_CH3].M = (float)( tPmResult1[PM_CH3].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH3_DPV_VAL / 2.0, 3) ) );
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001aca:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001ad0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001b3c <Calc_GetSelMassConnect+0xb4>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001ae2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	tPmResult1[PM_CH4].M = (float)( tPmResult1[PM_CH4].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH4_DPV_VAL / 2.0, 3) ) );
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001ae8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001aee:	edd3 7a07 	vldr	s15, [r3, #28]
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001b40 <Calc_GetSelMassConnect+0xb8>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001b00:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	tPmResult1[PM_CH5].M = (float)( tPmResult1[PM_CH5].C * tParam[PM_CH1].den ) * (float)( (4.0/3.0) * M_PI*( powf(DEFAULT_PARAM_PDCH5_DPV_VAL / 2.0, 3) ) );
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001b06:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <Calc_GetSelMassConnect+0xa8>)
 8001b0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001b44 <Calc_GetSelMassConnect+0xbc>
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <Calc_GetSelMassConnect+0xa4>)
 8001b1e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	200001bc 	.word	0x200001bc
 8001b30:	200000cc 	.word	0x200000cc
 8001b34:	3d11a8da 	.word	0x3d11a8da
 8001b38:	3e7b8383 	.word	0x3e7b8383
 8001b3c:	405484df 	.word	0x405484df
 8001b40:	41977e15 	.word	0x41977e15
 8001b44:	43549aed 	.word	0x43549aed

08001b48 <Calc_GetMassConcentration>:


// Mass Concentration
void Calc_GetMassConcentration(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	tPmResult1[PM0_5].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M);
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b54:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	tPmResult1[PM1_0].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M + tPmResult1[PM_CH3].M);
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b64:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b74:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b7e:	edc3 7a08 	vstr	s15, [r3, #32]
	tPmResult1[PM2_5].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M + tPmResult1[PM_CH3].M + tPmResult1[PM_CH4].M);
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b8a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b94:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001b9e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001ba8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	tPmResult1[PM4_0].fMass_Concet = (float)(tPmResult1[PM_CH1].M + tPmResult1[PM_CH2].M + tPmResult1[PM_CH3].M + tPmResult1[PM_CH4].M + tPmResult1[PM_CH5].M);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bae:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bbe:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bc8:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bd2:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <Calc_GetMassConcentration+0xa4>)
 8001bdc:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200001bc 	.word	0x200001bc

08001bf0 <Calc_GetTypicalPaticleSize>:

// TPS
void Calc_GetTypicalPaticleSize(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	tPmResult1[PM_CH1].fTps = (float)( tPmResult1[PM_CH1].C * DEFAULT_PARAM_PDCH1_DP_VAL );
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001bf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bfa:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c68 <Calc_GetTypicalPaticleSize+0x78>
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c04:	edc3 7a06 	vstr	s15, [r3, #24]
	tPmResult1[PM_CH2].fTps = (float)( tPmResult1[PM_CH2].C * DEFAULT_PARAM_PDCH2_DP_VAL );
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c0e:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c18:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	tPmResult1[PM_CH3].fTps = (float)( tPmResult1[PM_CH3].C * DEFAULT_PARAM_PDCH3_DP_VAL );
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c1e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001c22:	eeb7 7a0c 	vmov.f32	s14, #124	@ 0x3fe00000  1.750
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c2c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	tPmResult1[PM_CH4].fTps = (float)( tPmResult1[PM_CH4].C * DEFAULT_PARAM_PDCH4_DP_VAL );
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c32:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001c36:	eeb0 7a0a 	vmov.f32	s14, #10	@ 0x40500000  3.250
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c40:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	tPmResult1[PM_CH5].fTps = (float)( tPmResult1[PM_CH5].C * DEFAULT_PARAM_PDCH5_DP_VAL );
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c46:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8001c4a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <Calc_GetTypicalPaticleSize+0x74>)
 8001c54:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200001bc 	.word	0x200001bc
 8001c68:	3ecccccd 	.word	0x3ecccccd

08001c6c <Default_FactorySet>:

struct _tPARAM 		tParam[PM_CH_MAX];


void Default_FactorySet(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
//-------- Param -------------//
	uint8_t  i = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t strDevType[8] 		= {0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00};
 8001c78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
	uint8_t strDevSerial[16] 	= {0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001c82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
	uint8_t strDevVer[5] 		= {0x01, 0x00, 0x00, 0x01, 0x00};
 8001c94:	4b66      	ldr	r3, [pc, #408]	@ (8001e30 <Default_FactorySet+0x1c4>)
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	723b      	strb	r3, [r7, #8]
	//Set Boundary

	SetCfg_CurrentFanUseTime(0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f8cb 	bl	8001e38 <SetCfg_CurrentFanUseTime>
	SetCfg_CurrentFanInterValTime(604800); // 1 Weak Sec
 8001ca2:	4864      	ldr	r0, [pc, #400]	@ (8001e34 <Default_FactorySet+0x1c8>)
 8001ca4:	f000 f8dc 	bl	8001e60 <SetCfg_CurrentFanInterValTime>

	for (i = 0; i <= 7; i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001cae:	e05f      	b.n	8001d70 <Default_FactorySet+0x104>
	{
			 if (0x00 == i) SetParam_BoundaryVolt(i, 0x0010);
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <Default_FactorySet+0x5a>
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f9ec 	bl	800209c <SetParam_BoundaryVolt>
 8001cc4:	e04f      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x01 == i) SetParam_BoundaryVolt(i, 0x001C);
 8001cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <Default_FactorySet+0x70>
 8001cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cd2:	211c      	movs	r1, #28
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f9e1 	bl	800209c <SetParam_BoundaryVolt>
 8001cda:	e044      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x02 == i) SetParam_BoundaryVolt(i, 0x006F);
 8001cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d106      	bne.n	8001cf2 <Default_FactorySet+0x86>
 8001ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ce8:	216f      	movs	r1, #111	@ 0x6f
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f9d6 	bl	800209c <SetParam_BoundaryVolt>
 8001cf0:	e039      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x03 == i) SetParam_BoundaryVolt(i, 0x0108);
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <Default_FactorySet+0x9e>
 8001cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cfe:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f9ca 	bl	800209c <SetParam_BoundaryVolt>
 8001d08:	e02d      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x04 == i) SetParam_BoundaryVolt(i, 0x05FA);
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <Default_FactorySet+0xb6>
 8001d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d16:	f240 51fa 	movw	r1, #1530	@ 0x5fa
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f9be 	bl	800209c <SetParam_BoundaryVolt>
 8001d20:	e021      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x05 == i) SetParam_BoundaryVolt(i, 0x0CE4);
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d107      	bne.n	8001d3a <Default_FactorySet+0xce>
 8001d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d2e:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f9b2 	bl	800209c <SetParam_BoundaryVolt>
 8001d38:	e015      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x06 == i) SetParam_BoundaryVolt(i, 0x0064);
 8001d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d106      	bne.n	8001d50 <Default_FactorySet+0xe4>
 8001d42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d46:	2164      	movs	r1, #100	@ 0x64
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f9a7 	bl	800209c <SetParam_BoundaryVolt>
 8001d4e:	e00a      	b.n	8001d66 <Default_FactorySet+0xfa>
		else if (0x07 == i) SetParam_BoundaryVolt(i, 0x012C);
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	d106      	bne.n	8001d66 <Default_FactorySet+0xfa>
 8001d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d5c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f99b 	bl	800209c <SetParam_BoundaryVolt>
	for (i = 0; i <= 7; i++)
 8001d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d74:	2b07      	cmp	r3, #7
 8001d76:	d99b      	bls.n	8001cb0 <Default_FactorySet+0x44>
	}

	for (i = 0; i < 8; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d7e:	e009      	b.n	8001d94 <Default_FactorySet+0x128>
	{
		SetCfg_Device_ProcType(strDevType);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f87f 	bl	8001e88 <SetCfg_Device_ProcType>
	for (i = 0; i < 8; i++)
 8001d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d9f1      	bls.n	8001d80 <Default_FactorySet+0x114>
	}

	for (i = 0; i < 16; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001da2:	e009      	b.n	8001db8 <Default_FactorySet+0x14c>
	{
		SetCfg_Device_ProcSerial(strDevSerial);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f8aa 	bl	8001f02 <SetCfg_Device_ProcSerial>
	for (i = 0; i < 16; i++)
 8001dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db2:	3301      	adds	r3, #1
 8001db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d9f1      	bls.n	8001da4 <Default_FactorySet+0x138>
	}

	for (i = 0; i < 5; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001dc6:	e008      	b.n	8001dda <Default_FactorySet+0x16e>
	{
		SetCfg_Device_ProcVer(strDevVer);
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f8d6 	bl	8001f7c <SetCfg_Device_ProcVer>
	for (i = 0; i < 5; i++)
 8001dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d9f2      	bls.n	8001dc8 <Default_FactorySet+0x15c>
	}

	SetParam_AdjCal(0x00, 1.0f);
 8001de2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f9fe 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x01, 1.0f);
 8001dec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001df0:	2001      	movs	r0, #1
 8001df2:	f000 f9f9 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x02, 1.0f);
 8001df6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f000 f9f4 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x03, 1.0f);
 8001e00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f9ef 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x04, 1.0f);
 8001e0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e0e:	2004      	movs	r0, #4
 8001e10:	f000 f9ea 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x05, 1.0f);
 8001e14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e18:	2005      	movs	r0, #5
 8001e1a:	f000 f9e5 	bl	80021e8 <SetParam_AdjCal>
	SetParam_AdjCal(0x06, 1.0f);
 8001e1e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001e22:	2006      	movs	r0, #6
 8001e24:	f000 f9e0 	bl	80021e8 <SetParam_AdjCal>
	//Device Info (Product Type)

	//Device Info (Serial Num)

	//Device Info
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	01000001 	.word	0x01000001
 8001e34:	00093a80 	.word	0x00093a80

08001e38 <SetCfg_CurrentFanUseTime>:

// CONFIG
//=============================================================================

void SetCfg_CurrentFanUseTime(uint32_t nVal)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	I2C_EEP_WRITE_U32(EEP_IDX_CFG_FAN_USE_TIME, nVal);
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	2023      	movs	r0, #35	@ 0x23
 8001e44:	f7ff f8fe 	bl	8001044 <I2C_EEP_WRITE_U32>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <GetCfg_CurrentFanUseTime>:

uint32_t GetCfg_CurrentFanUseTime(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	return I2C_EEP_READ_U32(EEP_IDX_CFG_FAN_USE_TIME);
 8001e54:	2023      	movs	r0, #35	@ 0x23
 8001e56:	f7ff f83a 	bl	8000ece <I2C_EEP_READ_U32>
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SetCfg_CurrentFanInterValTime>:


void SetCfg_CurrentFanInterValTime(uint32_t nVal)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	I2C_EEP_WRITE_U32(EEP_IDX_CFG_FAN_CLEAN_SET_TIME, nVal);
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	2027      	movs	r0, #39	@ 0x27
 8001e6c:	f7ff f8ea 	bl	8001044 <I2C_EEP_WRITE_U32>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <GetCfg_CurrentFanInterValTime>:

uint32_t GetCfg_CurrentFanInterValTime(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	return I2C_EEP_READ_U32(EEP_IDX_CFG_FAN_CLEAN_SET_TIME);
 8001e7c:	2027      	movs	r0, #39	@ 0x27
 8001e7e:	f7ff f826 	bl	8000ece <I2C_EEP_READ_U32>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <SetCfg_Device_ProcType>:

void SetCfg_Device_ProcType(uint8_t* nVal)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<8; i++ )
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e00c      	b.n	8001eb4 <SetCfg_Device_ProcType+0x2c>
	{
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_DEVICE_PROC_TYPE+i, nVal[i]);
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7ff f873 	bl	8000f94 <I2C_EEP_WRITE_U08>
	for (i = 0; i<8; i++ )
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d9ef      	bls.n	8001e9a <SetCfg_Device_ProcType+0x12>
	}
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <GetCfg_Device_ProcType>:

void GetCfg_Device_ProcType(uint8_t* nVal)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<8; i++ )
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e00d      	b.n	8001ef2 <GetCfg_Device_ProcType+0x2e>
	{
		 nVal[i] = I2C_EEP_READ_U08(EEP_IDX_CFG_DEVICE_PROC_TYPE+i);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	4619      	mov	r1, r3
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	4608      	mov	r0, r1
 8001ee4:	f7fe ffc8 	bl	8000e78 <I2C_EEP_READ_U08>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]
	for (i = 0; i<8; i++ )
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d9ee      	bls.n	8001ed6 <GetCfg_Device_ProcType+0x12>
	}
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}

08001f02 <SetCfg_Device_ProcSerial>:

void SetCfg_Device_ProcSerial(uint8_t* nVal)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<16; i++ )
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e00c      	b.n	8001f2e <SetCfg_Device_ProcSerial+0x2c>
	{
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_DEVICE_PROC_SERIAL+i, nVal[i]);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	330e      	adds	r3, #14
 8001f18:	4618      	mov	r0, r3
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7ff f836 	bl	8000f94 <I2C_EEP_WRITE_U08>
	for (i = 0; i<16; i++ )
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d9ef      	bls.n	8001f14 <SetCfg_Device_ProcSerial+0x12>
	}
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <GetCfg_Device_ProcSerial>:

void GetCfg_Device_ProcSerial(uint8_t* nVal)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<16; i++ )
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e00d      	b.n	8001f6c <GetCfg_Device_ProcSerial+0x2e>
	{
		 nVal[i] = I2C_EEP_READ_U08(EEP_IDX_CFG_DEVICE_PROC_SERIAL+i);
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	330e      	adds	r3, #14
 8001f54:	4619      	mov	r1, r3
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	18d4      	adds	r4, r2, r3
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	f7fe ff8b 	bl	8000e78 <I2C_EEP_READ_U08>
 8001f62:	4603      	mov	r3, r0
 8001f64:	7023      	strb	r3, [r4, #0]
	for (i = 0; i<16; i++ )
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d9ee      	bls.n	8001f50 <GetCfg_Device_ProcSerial+0x12>
	}
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <SetCfg_Device_ProcVer>:

void SetCfg_Device_ProcVer(uint8_t* nVal)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<5; i++ )
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e00c      	b.n	8001fa8 <SetCfg_Device_ProcVer+0x2c>
	{
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_FIRMWARE_VERSION+i, nVal[i]);
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	331e      	adds	r3, #30
 8001f92:	4618      	mov	r0, r3
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fff9 	bl	8000f94 <I2C_EEP_WRITE_U08>
	for (i = 0; i<5; i++ )
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d9ef      	bls.n	8001f8e <SetCfg_Device_ProcVer+0x12>
	}
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <GetCfg_Device_ProcVer>:

void GetCfg_Device_ProcVer(uint8_t* nVal)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i<5; i++ )
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e00d      	b.n	8001fe6 <GetCfg_Device_ProcVer+0x2e>
	{
		 nVal[i] = I2C_EEP_READ_U08(EEP_IDX_CFG_FIRMWARE_VERSION+i);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	331e      	adds	r3, #30
 8001fce:	4619      	mov	r1, r3
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	18d4      	adds	r4, r2, r3
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	f7fe ff4e 	bl	8000e78 <I2C_EEP_READ_U08>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	7023      	strb	r3, [r4, #0]
	for (i = 0; i<5; i++ )
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d9ee      	bls.n	8001fca <GetCfg_Device_ProcVer+0x12>
	}
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}

08001ff6 <SetCfg_DeviceUseCount>:


void SetCfg_DeviceUseCount(uint32_t nVal)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK, 	 (uint8_t)((nVal >> 24)) );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0e1b      	lsrs	r3, r3, #24
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe ffc4 	bl	8000f94 <I2C_EEP_WRITE_U08>
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK+1, (uint8_t)((nVal >> 16)) );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	2003      	movs	r0, #3
 8002016:	f7fe ffbd 	bl	8000f94 <I2C_EEP_WRITE_U08>
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK+2, (uint8_t)((nVal >>  8)) );
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	2004      	movs	r0, #4
 8002024:	f7fe ffb6 	bl	8000f94 <I2C_EEP_WRITE_U08>
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_SET_EEP_CHK+3, (uint8_t)((nVal      )) );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	2005      	movs	r0, #5
 8002030:	f7fe ffb0 	bl	8000f94 <I2C_EEP_WRITE_U08>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <GetCfg_DeviceUseCount>:

uint32_t GetCfg_DeviceUseCount(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
	uint32_t Result = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]

	Result   = (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK  ) << 24);
 8002046:	2002      	movs	r0, #2
 8002048:	f7fe ff16 	bl	8000e78 <I2C_EEP_READ_U08>
 800204c:	4603      	mov	r3, r0
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	607b      	str	r3, [r7, #4]
	Result  |= (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK+1) << 16);
 8002052:	2003      	movs	r0, #3
 8002054:	f7fe ff10 	bl	8000e78 <I2C_EEP_READ_U08>
 8002058:	4603      	mov	r3, r0
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4313      	orrs	r3, r2
 8002060:	607b      	str	r3, [r7, #4]
	Result  |= (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK+2) <<  8);
 8002062:	2004      	movs	r0, #4
 8002064:	f7fe ff08 	bl	8000e78 <I2C_EEP_READ_U08>
 8002068:	4603      	mov	r3, r0
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	607b      	str	r3, [r7, #4]
	Result  |= (uint32_t)(I2C_EEP_READ_U08(EEP_IDX_CFG_SET_EEP_CHK+3)      );
 8002072:	2005      	movs	r0, #5
 8002074:	f7fe ff00 	bl	8000e78 <I2C_EEP_READ_U08>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4313      	orrs	r3, r2
 8002080:	607b      	str	r3, [r7, #4]

	return Result;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <SetCfg_Flash_Firmware_Write>:
{
	return  I2C_EEP_READ_U08(EEP_IDX_CFG_FLAG_FLASH_WR);
}

void SetCfg_Flash_Firmware_Write(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	I2C_EEP_WRITE_U08(EEP_IDX_CFG_FLAG_FLASH_WR, OFF);
 8002090:	2100      	movs	r1, #0
 8002092:	2032      	movs	r0, #50	@ 0x32
 8002094:	f7fe ff7e 	bl	8000f94 <I2C_EEP_WRITE_U08>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <SetParam_BoundaryVolt>:
//=============================================================================

// PARAM
void SetParam_BoundaryVolt(uint8_t nCh,  uint16_t nVal)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	460a      	mov	r2, r1
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4613      	mov	r3, r2
 80020aa:	80bb      	strh	r3, [r7, #4]
		 if(0x00 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_BASE_ADC, nVal);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <SetParam_BoundaryVolt+0x22>
 80020b2:	88bb      	ldrh	r3, [r7, #4]
 80020b4:	4619      	mov	r1, r3
 80020b6:	2044      	movs	r0, #68	@ 0x44
 80020b8:	f7fe ff8f 	bl	8000fda <I2C_EEP_WRITE_U16>
	else if(0x03 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH3_ADC_UB, nVal);
	else if(0x04 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH4_ADC_UB, nVal);
	else if(0x05 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH5_ADC_UB, nVal);
	else if(0x06 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_LB, nVal);
	else if(0x07 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_UB, nVal);
}
 80020bc:	e03d      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x01 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH1_ADC_UB, nVal);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <SetParam_BoundaryVolt+0x34>
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	4619      	mov	r1, r3
 80020c8:	2046      	movs	r0, #70	@ 0x46
 80020ca:	f7fe ff86 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 80020ce:	e034      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x02 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH2_ADC_UB, nVal);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d105      	bne.n	80020e2 <SetParam_BoundaryVolt+0x46>
 80020d6:	88bb      	ldrh	r3, [r7, #4]
 80020d8:	4619      	mov	r1, r3
 80020da:	2048      	movs	r0, #72	@ 0x48
 80020dc:	f7fe ff7d 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 80020e0:	e02b      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x03 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH3_ADC_UB, nVal);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d105      	bne.n	80020f4 <SetParam_BoundaryVolt+0x58>
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	4619      	mov	r1, r3
 80020ec:	204a      	movs	r0, #74	@ 0x4a
 80020ee:	f7fe ff74 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 80020f2:	e022      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x04 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH4_ADC_UB, nVal);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d105      	bne.n	8002106 <SetParam_BoundaryVolt+0x6a>
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	4619      	mov	r1, r3
 80020fe:	204c      	movs	r0, #76	@ 0x4c
 8002100:	f7fe ff6b 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 8002104:	e019      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x05 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_PD_CH5_ADC_UB, nVal);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d105      	bne.n	8002118 <SetParam_BoundaryVolt+0x7c>
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	4619      	mov	r1, r3
 8002110:	204e      	movs	r0, #78	@ 0x4e
 8002112:	f7fe ff62 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 8002116:	e010      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x06 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_LB, nVal);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d105      	bne.n	800212a <SetParam_BoundaryVolt+0x8e>
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	4619      	mov	r1, r3
 8002122:	2050      	movs	r0, #80	@ 0x50
 8002124:	f7fe ff59 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 8002128:	e007      	b.n	800213a <SetParam_BoundaryVolt+0x9e>
	else if(0x07 == nCh) I2C_EEP_WRITE_U16(EEP_IDX_PARAM_SiPM_ADC_UB, nVal);
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b07      	cmp	r3, #7
 800212e:	d104      	bne.n	800213a <SetParam_BoundaryVolt+0x9e>
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	4619      	mov	r1, r3
 8002134:	2052      	movs	r0, #82	@ 0x52
 8002136:	f7fe ff50 	bl	8000fda <I2C_EEP_WRITE_U16>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <GetParam_BoundaryVolt>:

uint16_t GetParam_BoundaryVolt(uint8_t nCh)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
	uint16_t Result = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	81fb      	strh	r3, [r7, #14]

		 if(0x00 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_BASE_ADC);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <GetParam_BoundaryVolt+0x20>
 8002156:	2044      	movs	r0, #68	@ 0x44
 8002158:	f7fe fe9e 	bl	8000e98 <I2C_EEP_READ_U16>
 800215c:	4603      	mov	r3, r0
 800215e:	81fb      	strh	r3, [r7, #14]
 8002160:	e03d      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x01 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH1_ADC_UB);
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <GetParam_BoundaryVolt+0x32>
 8002168:	2046      	movs	r0, #70	@ 0x46
 800216a:	f7fe fe95 	bl	8000e98 <I2C_EEP_READ_U16>
 800216e:	4603      	mov	r3, r0
 8002170:	81fb      	strh	r3, [r7, #14]
 8002172:	e034      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x02 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH2_ADC_UB);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d105      	bne.n	8002186 <GetParam_BoundaryVolt+0x44>
 800217a:	2048      	movs	r0, #72	@ 0x48
 800217c:	f7fe fe8c 	bl	8000e98 <I2C_EEP_READ_U16>
 8002180:	4603      	mov	r3, r0
 8002182:	81fb      	strh	r3, [r7, #14]
 8002184:	e02b      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x03 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH3_ADC_UB);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d105      	bne.n	8002198 <GetParam_BoundaryVolt+0x56>
 800218c:	204a      	movs	r0, #74	@ 0x4a
 800218e:	f7fe fe83 	bl	8000e98 <I2C_EEP_READ_U16>
 8002192:	4603      	mov	r3, r0
 8002194:	81fb      	strh	r3, [r7, #14]
 8002196:	e022      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x04 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH4_ADC_UB);
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d105      	bne.n	80021aa <GetParam_BoundaryVolt+0x68>
 800219e:	204c      	movs	r0, #76	@ 0x4c
 80021a0:	f7fe fe7a 	bl	8000e98 <I2C_EEP_READ_U16>
 80021a4:	4603      	mov	r3, r0
 80021a6:	81fb      	strh	r3, [r7, #14]
 80021a8:	e019      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x05 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_PD_CH5_ADC_UB);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d105      	bne.n	80021bc <GetParam_BoundaryVolt+0x7a>
 80021b0:	204e      	movs	r0, #78	@ 0x4e
 80021b2:	f7fe fe71 	bl	8000e98 <I2C_EEP_READ_U16>
 80021b6:	4603      	mov	r3, r0
 80021b8:	81fb      	strh	r3, [r7, #14]
 80021ba:	e010      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x06 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_SiPM_ADC_LB);
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d105      	bne.n	80021ce <GetParam_BoundaryVolt+0x8c>
 80021c2:	2050      	movs	r0, #80	@ 0x50
 80021c4:	f7fe fe68 	bl	8000e98 <I2C_EEP_READ_U16>
 80021c8:	4603      	mov	r3, r0
 80021ca:	81fb      	strh	r3, [r7, #14]
 80021cc:	e007      	b.n	80021de <GetParam_BoundaryVolt+0x9c>
	else if(0x07 == nCh) Result = I2C_EEP_READ_U16(EEP_IDX_PARAM_SiPM_ADC_UB);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b07      	cmp	r3, #7
 80021d2:	d104      	bne.n	80021de <GetParam_BoundaryVolt+0x9c>
 80021d4:	2052      	movs	r0, #82	@ 0x52
 80021d6:	f7fe fe5f 	bl	8000e98 <I2C_EEP_READ_U16>
 80021da:	4603      	mov	r3, r0
 80021dc:	81fb      	strh	r3, [r7, #14]

	return Result;
 80021de:	89fb      	ldrh	r3, [r7, #14]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <SetParam_AdjCal>:


// PARAM
void SetParam_AdjCal(uint8_t nSel, float fVal)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	ed87 0a00 	vstr	s0, [r7]
 80021f4:	71fb      	strb	r3, [r7, #7]
		 if(0x00 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_DENSITY, fVal);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <SetParam_AdjCal+0x20>
 80021fc:	ed97 0a00 	vldr	s0, [r7]
 8002200:	2084      	movs	r0, #132	@ 0x84
 8002202:	f7fe ff78 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
	else if(0x02 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH2_CAL, fVal);
	else if(0x03 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH3_CAL, fVal);
	else if(0x04 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH4_CAL, fVal);
	else if(0x05 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH5_CAL, fVal);
	else if(0x06 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_CFU_CAL, fVal);
}
 8002206:	e034      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x01 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH1_CAL, fVal);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <SetParam_AdjCal+0x32>
 800220e:	ed97 0a00 	vldr	s0, [r7]
 8002212:	2088      	movs	r0, #136	@ 0x88
 8002214:	f7fe ff6f 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 8002218:	e02b      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x02 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH2_CAL, fVal);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d105      	bne.n	800222c <SetParam_AdjCal+0x44>
 8002220:	ed97 0a00 	vldr	s0, [r7]
 8002224:	208c      	movs	r0, #140	@ 0x8c
 8002226:	f7fe ff66 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 800222a:	e022      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x03 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH3_CAL, fVal);
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d105      	bne.n	800223e <SetParam_AdjCal+0x56>
 8002232:	ed97 0a00 	vldr	s0, [r7]
 8002236:	2090      	movs	r0, #144	@ 0x90
 8002238:	f7fe ff5d 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 800223c:	e019      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x04 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH4_CAL, fVal);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d105      	bne.n	8002250 <SetParam_AdjCal+0x68>
 8002244:	ed97 0a00 	vldr	s0, [r7]
 8002248:	2094      	movs	r0, #148	@ 0x94
 800224a:	f7fe ff54 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 800224e:	e010      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x05 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_PD_CH5_CAL, fVal);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d105      	bne.n	8002262 <SetParam_AdjCal+0x7a>
 8002256:	ed97 0a00 	vldr	s0, [r7]
 800225a:	2098      	movs	r0, #152	@ 0x98
 800225c:	f7fe ff4b 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 8002260:	e007      	b.n	8002272 <SetParam_AdjCal+0x8a>
	else if(0x06 == nSel) I2C_EEP_WRITE_FLOAT(EEP_IDX_PARAM_CFU_CAL, fVal);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d104      	bne.n	8002272 <SetParam_AdjCal+0x8a>
 8002268:	ed97 0a00 	vldr	s0, [r7]
 800226c:	209c      	movs	r0, #156	@ 0x9c
 800226e:	f7fe ff42 	bl	80010f6 <I2C_EEP_WRITE_FLOAT>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <GetParam_AdjCal>:

float GetParam_AdjCal(uint8_t nSel)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
	float Result = 0.0f;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]

		 if(0x00 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_DENSITY);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <GetParam_AdjCal+0x22>
 8002290:	2084      	movs	r0, #132	@ 0x84
 8002292:	f7fe fe4b 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 8002296:	ed87 0a03 	vstr	s0, [r7, #12]
 800229a:	e034      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x01 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH1_CAL);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <GetParam_AdjCal+0x34>
 80022a2:	2088      	movs	r0, #136	@ 0x88
 80022a4:	f7fe fe42 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80022ac:	e02b      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x02 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH2_CAL);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d105      	bne.n	80022c0 <GetParam_AdjCal+0x46>
 80022b4:	208c      	movs	r0, #140	@ 0x8c
 80022b6:	f7fe fe39 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80022be:	e022      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x03 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH3_CAL);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d105      	bne.n	80022d2 <GetParam_AdjCal+0x58>
 80022c6:	2090      	movs	r0, #144	@ 0x90
 80022c8:	f7fe fe30 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022cc:	ed87 0a03 	vstr	s0, [r7, #12]
 80022d0:	e019      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x04 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH4_CAL);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d105      	bne.n	80022e4 <GetParam_AdjCal+0x6a>
 80022d8:	2094      	movs	r0, #148	@ 0x94
 80022da:	f7fe fe27 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022de:	ed87 0a03 	vstr	s0, [r7, #12]
 80022e2:	e010      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x05 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_PD_CH5_CAL);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d105      	bne.n	80022f6 <GetParam_AdjCal+0x7c>
 80022ea:	2098      	movs	r0, #152	@ 0x98
 80022ec:	f7fe fe1e 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 80022f0:	ed87 0a03 	vstr	s0, [r7, #12]
 80022f4:	e007      	b.n	8002306 <GetParam_AdjCal+0x8c>
	else if(0x06 == nSel) Result = I2C_EEP_READ_FLOAT(EEP_IDX_PARAM_CFU_CAL);
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d104      	bne.n	8002306 <GetParam_AdjCal+0x8c>
 80022fc:	209c      	movs	r0, #156	@ 0x9c
 80022fe:	f7fe fe15 	bl	8000f2c <I2C_EEP_READ_FLOAT>
 8002302:	ed87 0a03 	vstr	s0, [r7, #12]

	return Result;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	ee07 3a90 	vmov	s15, r3
}
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <PARAM_Init>:
	return result;
}


void PARAM_Init(I2C_HandleTypeDef* hI2C)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
	I2C_EEP_Init(hI2C, 0xA0);
 8002324:	21a0      	movs	r1, #160	@ 0xa0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fd06 	bl	8000d38 <I2C_EEP_Init>
	for(i = 0; i <PM_CH_MAX; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e00e      	b.n	8002350 <PARAM_Init+0x38>
	{
		memset(&tParam[i], 0, sizeof(struct _tPARAM));
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <PARAM_Init+0x48>)
 800233e:	4413      	add	r3, r2
 8002340:	2228      	movs	r2, #40	@ 0x28
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f00a fcc5 	bl	800ccd4 <memset>
	for(i = 0; i <PM_CH_MAX; i++)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3301      	adds	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d9ed      	bls.n	8002332 <PARAM_Init+0x1a>

	}
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200000cc 	.word	0x200000cc

08002364 <PARAM_Process>:


void PARAM_Process(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	uint8_t  i = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	71fb      	strb	r3, [r7, #7]

	if((DEFAULT_FACTORY_SET_ON	!= I2C_EEP_READ_U08(EEP_IDX_CFG_DEFAULT_FACTORY)))
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe fd82 	bl	8000e78 <I2C_EEP_READ_U08>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <PARAM_Process+0x22>
	{
		Default_FactorySet();
 800237a:	f7ff fc77 	bl	8001c6c <Default_FactorySet>
		I2C_EEP_WRITE_U08(EEP_IDX_CFG_DEFAULT_FACTORY, DEFAULT_FACTORY_SET_ON);
 800237e:	2101      	movs	r1, #1
 8002380:	2001      	movs	r0, #1
 8002382:	f7fe fe07 	bl	8000f94 <I2C_EEP_WRITE_U08>
	}

	tFan.CleWorkTime = GetCfg_CurrentFanUseTime();
 8002386:	f7ff fd63 	bl	8001e50 <GetCfg_CurrentFanUseTime>
 800238a:	4603      	mov	r3, r0
 800238c:	4a71      	ldr	r2, [pc, #452]	@ (8002554 <PARAM_Process+0x1f0>)
 800238e:	6093      	str	r3, [r2, #8]
	tFan.CleInterval = GetCfg_CurrentFanInterValTime();
 8002390:	f7ff fd72 	bl	8001e78 <GetCfg_CurrentFanInterValTime>
 8002394:	4603      	mov	r3, r0
 8002396:	4a6f      	ldr	r2, [pc, #444]	@ (8002554 <PARAM_Process+0x1f0>)
 8002398:	60d3      	str	r3, [r2, #12]

	if (0 == tFan.CleInterval) 	{ tFan.FlagCleanModeOn = OFF; 	}
 800239a:	4b6e      	ldr	r3, [pc, #440]	@ (8002554 <PARAM_Process+0x1f0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <PARAM_Process+0x46>
 80023a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002554 <PARAM_Process+0x1f0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	719a      	strb	r2, [r3, #6]
 80023a8:	e002      	b.n	80023b0 <PARAM_Process+0x4c>
	else 						{ tFan.FlagCleanModeOn = ON;	}
 80023aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002554 <PARAM_Process+0x1f0>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	719a      	strb	r2, [r3, #6]

	for (i = 0; i <= 7; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	e080      	b.n	80024b8 <PARAM_Process+0x154>
	{
			 if (0x00 == i) { tParam[PM_CH1].BasePD = GetParam_BoundaryVolt(i); }
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <PARAM_Process+0x6a>
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff febf 	bl	8002142 <GetParam_BoundaryVolt>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <PARAM_Process+0x1f4>)
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e071      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x01 == i) { tParam[PM_CH1].LB = tParam[PM_CH1].BasePD ; 		tParam[PM_CH1].UB = GetParam_BoundaryVolt(i); }
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10c      	bne.n	80023ee <PARAM_Process+0x8a>
 80023d4:	4b60      	ldr	r3, [pc, #384]	@ (8002558 <PARAM_Process+0x1f4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002558 <PARAM_Process+0x1f4>)
 80023da:	60d3      	str	r3, [r2, #12]
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff feaf 	bl	8002142 <GetParam_BoundaryVolt>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <PARAM_Process+0x1f4>)
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	e061      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x02 == i) { tParam[PM_CH2].LB = tParam[PM_CH1].UB + 1; 		tParam[PM_CH2].UB = GetParam_BoundaryVolt(i); }
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d10d      	bne.n	8002410 <PARAM_Process+0xac>
 80023f4:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <PARAM_Process+0x1f4>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <PARAM_Process+0x1f4>)
 80023fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fe9e 	bl	8002142 <GetParam_BoundaryVolt>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <PARAM_Process+0x1f4>)
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
 800240e:	e050      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x03 == i) { tParam[PM_CH3].LB = tParam[PM_CH2].UB + 1;		tParam[PM_CH3].UB = GetParam_BoundaryVolt(i); }
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d10d      	bne.n	8002432 <PARAM_Process+0xce>
 8002416:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <PARAM_Process+0x1f4>)
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	3301      	adds	r3, #1
 800241c:	4a4e      	ldr	r2, [pc, #312]	@ (8002558 <PARAM_Process+0x1f4>)
 800241e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fe8d 	bl	8002142 <GetParam_BoundaryVolt>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b4a      	ldr	r3, [pc, #296]	@ (8002558 <PARAM_Process+0x1f4>)
 800242e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002430:	e03f      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x04 == i) { tParam[PM_CH4].LB = tParam[PM_CH3].UB + 1;		tParam[PM_CH4].UB = GetParam_BoundaryVolt(i); }
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d10f      	bne.n	8002458 <PARAM_Process+0xf4>
 8002438:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <PARAM_Process+0x1f4>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	3301      	adds	r3, #1
 800243e:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <PARAM_Process+0x1f4>)
 8002440:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fe7b 	bl	8002142 <GetParam_BoundaryVolt>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <PARAM_Process+0x1f4>)
 8002452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002456:	e02c      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x05 == i) { tParam[PM_CH5].LB = tParam[PM_CH4].UB + 1; 		tParam[PM_CH5].UB = GetParam_BoundaryVolt(i); }
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d110      	bne.n	8002480 <PARAM_Process+0x11c>
 800245e:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <PARAM_Process+0x1f4>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	3301      	adds	r3, #1
 8002466:	4a3c      	ldr	r2, [pc, #240]	@ (8002558 <PARAM_Process+0x1f4>)
 8002468:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe67 	bl	8002142 <GetParam_BoundaryVolt>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <PARAM_Process+0x1f4>)
 800247a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800247e:	e018      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x06 == i)   tParam[PM_SiPM].LB = GetParam_BoundaryVolt(i);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2b06      	cmp	r3, #6
 8002484:	d109      	bne.n	800249a <PARAM_Process+0x136>
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe5a 	bl	8002142 <GetParam_BoundaryVolt>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <PARAM_Process+0x1f4>)
 8002494:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002498:	e00b      	b.n	80024b2 <PARAM_Process+0x14e>
		else if (0x07 == i)   tParam[PM_SiPM].UB = GetParam_BoundaryVolt(i);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b07      	cmp	r3, #7
 800249e:	d108      	bne.n	80024b2 <PARAM_Process+0x14e>
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fe4d 	bl	8002142 <GetParam_BoundaryVolt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <PARAM_Process+0x1f4>)
 80024ae:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	for (i = 0; i <= 7; i++)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	3301      	adds	r3, #1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	f67f af7b 	bls.w	80023b6 <PARAM_Process+0x52>
	}

	//Set Boundary

	GetCfg_Device_ProcType(tConfig.prodtype);
 80024c0:	4826      	ldr	r0, [pc, #152]	@ (800255c <PARAM_Process+0x1f8>)
 80024c2:	f7ff fcff 	bl	8001ec4 <GetCfg_Device_ProcType>
	GetCfg_Device_ProcSerial(tConfig.prodSerial);
 80024c6:	4826      	ldr	r0, [pc, #152]	@ (8002560 <PARAM_Process+0x1fc>)
 80024c8:	f7ff fd39 	bl	8001f3e <GetCfg_Device_ProcSerial>
	GetCfg_Device_ProcVer(tConfig.FirmwareVer);
 80024cc:	4825      	ldr	r0, [pc, #148]	@ (8002564 <PARAM_Process+0x200>)
 80024ce:	f7ff fd73 	bl	8001fb8 <GetCfg_Device_ProcVer>

	//SetCfg_DeviceUseCount(1);
	tConfig.DeviceUseCount = GetCfg_DeviceUseCount();
 80024d2:	f7ff fdb3 	bl	800203c <GetCfg_DeviceUseCount>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a20      	ldr	r2, [pc, #128]	@ (800255c <PARAM_Process+0x1f8>)
 80024da:	6253      	str	r3, [r2, #36]	@ 0x24

	tParam[PM_CH1].den = GetParam_AdjCal(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fecc 	bl	800227a <GetParam_AdjCal>
 80024e2:	eef0 7a40 	vmov.f32	s15, s0
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <PARAM_Process+0x1f4>)
 80024e8:	edc3 7a07 	vstr	s15, [r3, #28]

	tParam[PM_CH1].Cal = GetParam_AdjCal(0x01);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff fec4 	bl	800227a <GetParam_AdjCal>
 80024f2:	eef0 7a40 	vmov.f32	s15, s0
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <PARAM_Process+0x1f4>)
 80024f8:	edc3 7a08 	vstr	s15, [r3, #32]
	tParam[PM_CH2].Cal = GetParam_AdjCal(0x02);
 80024fc:	2002      	movs	r0, #2
 80024fe:	f7ff febc 	bl	800227a <GetParam_AdjCal>
 8002502:	eef0 7a40 	vmov.f32	s15, s0
 8002506:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <PARAM_Process+0x1f4>)
 8002508:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	tParam[PM_CH3].Cal = GetParam_AdjCal(0x03);
 800250c:	2003      	movs	r0, #3
 800250e:	f7ff feb4 	bl	800227a <GetParam_AdjCal>
 8002512:	eef0 7a40 	vmov.f32	s15, s0
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <PARAM_Process+0x1f4>)
 8002518:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	tParam[PM_CH4].Cal = GetParam_AdjCal(0x04);
 800251c:	2004      	movs	r0, #4
 800251e:	f7ff feac 	bl	800227a <GetParam_AdjCal>
 8002522:	eef0 7a40 	vmov.f32	s15, s0
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <PARAM_Process+0x1f4>)
 8002528:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
	tParam[PM_CH5].Cal = GetParam_AdjCal(0x05);
 800252c:	2005      	movs	r0, #5
 800252e:	f7ff fea4 	bl	800227a <GetParam_AdjCal>
 8002532:	eef0 7a40 	vmov.f32	s15, s0
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <PARAM_Process+0x1f4>)
 8002538:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	tParam[PM_SiPM].CfuCal = GetParam_AdjCal(0x06);
 800253c:	2006      	movs	r0, #6
 800253e:	f7ff fe9c 	bl	800227a <GetParam_AdjCal>
 8002542:	eef0 7a40 	vmov.f32	s15, s0
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <PARAM_Process+0x1f4>)
 8002548:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec


}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200000b4 	.word	0x200000b4
 8002558:	200000cc 	.word	0x200000cc
 800255c:	20000030 	.word	0x20000030
 8002560:	20000038 	.word	0x20000038
 8002564:	20000048 	.word	0x20000048

08002568 <PROC_Init>:

void RngOfPdAdcSamplingVal(uint16_t nAdcVal);
void RngOfSiPmAdcSamplingVal(uint16_t nAdcVal);

void PROC_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	memset( &tPmResult1, 0, sizeof(struct _tPM_RESULT1) );
 800256c:	2220      	movs	r2, #32
 800256e:	2100      	movs	r1, #0
 8002570:	480a      	ldr	r0, [pc, #40]	@ (800259c <PROC_Init+0x34>)
 8002572:	f00a fbaf 	bl	800ccd4 <memset>
	memset( &tPmResult2, 0, sizeof(struct _tPM_RESULT2) );
 8002576:	2210      	movs	r2, #16
 8002578:	2100      	movs	r1, #0
 800257a:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <PROC_Init+0x38>)
 800257c:	f00a fbaa 	bl	800ccd4 <memset>
	memset( &tSysState,  0, sizeof(struct _tSYS_STAT) );
 8002580:	2220      	movs	r2, #32
 8002582:	2100      	movs	r1, #0
 8002584:	4807      	ldr	r0, [pc, #28]	@ (80025a4 <PROC_Init+0x3c>)
 8002586:	f00a fba5 	bl	800ccd4 <memset>

	m_BITProcSeq = BIT_SEQ_IDLE;
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <PROC_Init+0x40>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
	m_SysProcSeq = SYS_SEQ_IDLE;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <PROC_Init+0x44>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200001bc 	.word	0x200001bc
 80025a0:	2000027c 	.word	0x2000027c
 80025a4:	2000028c 	.word	0x2000028c
 80025a8:	200002d4 	.word	0x200002d4
 80025ac:	200002d5 	.word	0x200002d5

080025b0 <WaitTime_Init>:

void WaitTime_Init(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	tSysTime.Sys10mSecTick = 0;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <WaitTime_Init+0x34>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	739a      	strb	r2, [r3, #14]
	tSysTime.Sys10mSecTick = 0;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <WaitTime_Init+0x34>)
 80025bc:	2200      	movs	r2, #0
 80025be:	739a      	strb	r2, [r3, #14]
	tSysTime.Sys1SecTick = 0;
 80025c0:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <WaitTime_Init+0x34>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	825a      	strh	r2, [r3, #18]

	tSysTime.WaitSecTime = 0;
 80025c6:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <WaitTime_Init+0x34>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
	tSysTime.WaitmSecTime = 0;
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <WaitTime_Init+0x34>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]

	uwTick = 0;
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <WaitTime_Init+0x38>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	200002ac 	.word	0x200002ac
 80025e8:	200008b8 	.word	0x200008b8

080025ec <WaitHoldTime_Sec>:

uint8_t WaitHoldTime_Sec(uint8_t ChkOn, uint32_t ChkTime)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
	uint8_t result = FALSE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

	if (OFF == ChkOn) { WaitTime_Init(); tSysTime.FlagWaitSecTimeOn = OFF; return result; }
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <WaitHoldTime_Sec+0x24>
 8002602:	f7ff ffd5 	bl	80025b0 <WaitTime_Init>
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	751a      	strb	r2, [r3, #20]
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	e010      	b.n	8002632 <WaitHoldTime_Sec+0x46>
	else
	{
		tSysTime.FlagWaitSecTimeOn = ON;
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002612:	2201      	movs	r2, #1
 8002614:	751a      	strb	r2, [r3, #20]
	}

	if (tSysTime.WaitSecTime >= ChkTime) {
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d807      	bhi.n	8002630 <WaitHoldTime_Sec+0x44>
		result = TRUE;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
		tSysTime.WaitSecTime = 0;
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <WaitHoldTime_Sec+0x50>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
		tSysTime.FlagWaitSecTimeOn = OFF;
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <WaitHoldTime_Sec+0x50>)
 800262c:	2200      	movs	r2, #0
 800262e:	751a      	strb	r2, [r3, #20]
	}

	return result;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002ac 	.word	0x200002ac

08002640 <WaitHoldTime_mSec>:

uint8_t WaitHoldTime_mSec(uint8_t ChkOn, uint32_t ChkTime)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
	uint8_t result = FALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

	if (OFF == ChkOn) { WaitTime_Init(); tSysTime.FlagWaitmSecTimeOn = OFF; return result; }
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <WaitHoldTime_mSec+0x24>
 8002656:	f7ff ffab 	bl	80025b0 <WaitTime_Init>
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	e010      	b.n	8002686 <WaitHoldTime_mSec+0x46>
	else
	{
		tSysTime.FlagWaitmSecTimeOn = ON;
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 8002666:	2201      	movs	r2, #1
 8002668:	771a      	strb	r2, [r3, #28]
	}

	if (tSysTime.WaitmSecTime >= ChkTime)
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d807      	bhi.n	8002684 <WaitHoldTime_mSec+0x44>
	{
		result = TRUE;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
		tSysTime.WaitmSecTime = 0;
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
		tSysTime.FlagWaitmSecTimeOn = OFF;
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <WaitHoldTime_mSec+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
	}

	return result;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200002ac 	.word	0x200002ac

08002694 <DeviceSetState>:

uint16_t DeviceSetState(uint16_t Addr, uint8_t Flag)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	460a      	mov	r2, r1
 800269e:	80fb      	strh	r3, [r7, #6]
 80026a0:	4613      	mov	r3, r2
 80026a2:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	81fb      	strh	r3, [r7, #14]

	if(ON == Flag) 	{ result |= (1 << Addr);  }
 80026a8:	797b      	ldrb	r3, [r7, #5]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10a      	bne.n	80026c4 <DeviceSetState+0x30>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2201      	movs	r2, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21b      	sxth	r3, r3
 80026c0:	81fb      	strh	r3, [r7, #14]
 80026c2:	e00b      	b.n	80026dc <DeviceSetState+0x48>
	else 			{ result &= ~(1 << Addr); }
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	81fb      	strh	r3, [r7, #14]

	return result;
 80026dc:	89fb      	ldrh	r3, [r7, #14]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <MCU_AlarmTempMonitor>:


uint8_t MCU_AlarmTempMonitor(uint16_t nTemp)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
	uint8_t result = OFF;
 80026f6:	2300      	movs	r3, #0
 80026f8:	74fb      	strb	r3, [r7, #19]
	float cpu_temp = 0.0f;
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]


	if( 0 != nTemp)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d027      	beq.n	8002756 <MCU_AlarmTempMonitor+0x6a>
    {
		float temperature = ((float)nTemp / 4095) * 3300; // ADC 값을 전압으로 변환
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002710:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002794 <MCU_AlarmTempMonitor+0xa8>
 8002714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002718:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002798 <MCU_AlarmTempMonitor+0xac>
 800271c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002720:	edc7 7a03 	vstr	s15, [r7, #12]
		cpu_temp = ((temperature - 760.0) / 2.5); // 온도로 변환
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7fd feb7 	bl	8000498 <__aeabi_f2d>
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <MCU_AlarmTempMonitor+0xb0>)
 8002730:	f7fd fd52 	bl	80001d8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MCU_AlarmTempMonitor+0xb4>)
 8002742:	f7fe f82b 	bl	800079c <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7fe f90d 	bl	800096c <__aeabi_d2f>
 8002752:	4603      	mov	r3, r0
 8002754:	617b      	str	r3, [r7, #20]
		//cpu_temp = 65;
    }


    if (DEFAULT_TEMP_OVER_VAL < cpu_temp)
 8002756:	edd7 7a05 	vldr	s15, [r7, #20]
 800275a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80027a4 <MCU_AlarmTempMonitor+0xb8>
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	dd08      	ble.n	800277a <MCU_AlarmTempMonitor+0x8e>
    {
    	tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_TEMP_OVR_ON, ON);
 8002768:	2101      	movs	r1, #1
 800276a:	2009      	movs	r0, #9
 800276c:	f7ff ff92 	bl	8002694 <DeviceSetState>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MCU_AlarmTempMonitor+0xbc>)
 8002776:	839a      	strh	r2, [r3, #28]
 8002778:	e007      	b.n	800278a <MCU_AlarmTempMonitor+0x9e>
    }

    else
    {
    	tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_TEMP_OVR_ON, OFF);
 800277a:	2100      	movs	r1, #0
 800277c:	2009      	movs	r0, #9
 800277e:	f7ff ff89 	bl	8002694 <DeviceSetState>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <MCU_AlarmTempMonitor+0xbc>)
 8002788:	839a      	strh	r2, [r3, #28]
    }

    return result;
 800278a:	7cfb      	ldrb	r3, [r7, #19]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	457ff000 	.word	0x457ff000
 8002798:	454e4000 	.word	0x454e4000
 800279c:	4087c000 	.word	0x4087c000
 80027a0:	40040000 	.word	0x40040000
 80027a4:	42700000 	.word	0x42700000
 80027a8:	2000028c 	.word	0x2000028c

080027ac <ReadMeasuredVal>:
    // Use memcpy to copy the float's memory representation to the byte array
    memcpy(byteArray, &value, sizeof(float));
}
*/
void ReadMeasuredVal(void)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73bb      	strb	r3, [r7, #14]

	float fTmpTps = 0.0f;
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
	float fTmpCon = 0.0f;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]

	uint8_t nTmpConv8[4] = {0,};
 80027c6:	2300      	movs	r3, #0
 80027c8:	603b      	str	r3, [r7, #0]


	if (OFF == tSysState.FlagLoopOn) { WaitTime_Init(); tSysState.FlagLoopOn = ON; }
 80027ca:	4b7f      	ldr	r3, [pc, #508]	@ (80029c8 <ReadMeasuredVal+0x21c>)
 80027cc:	7a1b      	ldrb	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <ReadMeasuredVal+0x30>
 80027d2:	f7ff feed 	bl	80025b0 <WaitTime_Init>
 80027d6:	4b7c      	ldr	r3, [pc, #496]	@ (80029c8 <ReadMeasuredVal+0x21c>)
 80027d8:	2201      	movs	r2, #1
 80027da:	721a      	strb	r2, [r3, #8]

	if ( TRUE == WaitHoldTime_mSec(ON, UART_MSG_RESP_TIME) )
 80027dc:	2164      	movs	r1, #100	@ 0x64
 80027de:	2001      	movs	r0, #1
 80027e0:	f7ff ff2e 	bl	8002640 <WaitHoldTime_mSec>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 828e 	bne.w	8002d08 <ReadMeasuredVal+0x55c>
	{

		Calc_GetSelNumConnect();
 80027ec:	f7ff f8a2 	bl	8001934 <Calc_GetSelNumConnect>
		Calc_GetNumberConcent();
 80027f0:	f7ff f8f2 	bl	80019d8 <Calc_GetNumberConcent>
		Calc_GetSelMassConnect();
 80027f4:	f7ff f948 	bl	8001a88 <Calc_GetSelMassConnect>
		Calc_GetMassConcentration();
 80027f8:	f7ff f9a6 	bl	8001b48 <Calc_GetMassConcentration>
		Calc_GetTypicalPaticleSize();
 80027fc:	f7ff f9f8 	bl	8001bf0 <Calc_GetTypicalPaticleSize>

		for (i = PM_CH1; i <= PM_CH5; i++)
 8002800:	2300      	movs	r3, #0
 8002802:	73bb      	strb	r3, [r7, #14]
 8002804:	e01c      	b.n	8002840 <ReadMeasuredVal+0x94>
		{
			fTmpTps += tPmResult1[i].fTps;
 8002806:	7bbb      	ldrb	r3, [r7, #14]
 8002808:	4a70      	ldr	r2, [pc, #448]	@ (80029cc <ReadMeasuredVal+0x220>)
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	4413      	add	r3, r2
 800280e:	3318      	adds	r3, #24
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed97 7a02 	vldr	s14, [r7, #8]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a02 	vstr	s15, [r7, #8]
			fTmpCon += tPmResult1[i].fNum_Concet;
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	4a6a      	ldr	r2, [pc, #424]	@ (80029cc <ReadMeasuredVal+0x220>)
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	4413      	add	r3, r2
 8002828:	3310      	adds	r3, #16
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002836:	edc7 7a01 	vstr	s15, [r7, #4]
		for (i = PM_CH1; i <= PM_CH5; i++)
 800283a:	7bbb      	ldrb	r3, [r7, #14]
 800283c:	3301      	adds	r3, #1
 800283e:	73bb      	strb	r3, [r7, #14]
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d9df      	bls.n	8002806 <ReadMeasuredVal+0x5a>
		}

		tPmResult2.fResultTps = (float)(fTmpTps / fTmpCon);
 8002846:	edd7 6a02 	vldr	s13, [r7, #8]
 800284a:	ed97 7a01 	vldr	s14, [r7, #4]
 800284e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002852:	4b5f      	ldr	r3, [pc, #380]	@ (80029d0 <ReadMeasuredVal+0x224>)
 8002854:	edc3 7a02 	vstr	s15, [r3, #8]

		tPmResult2.fCFU = (float)(tPmResult1[PM_SiPM].nTmpNumConcet * tParam[PM_SiPM].CfuCal);
 8002858:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <ReadMeasuredVal+0x220>)
 800285a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002866:	4b5b      	ldr	r3, [pc, #364]	@ (80029d4 <ReadMeasuredVal+0x228>)
 8002868:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <ReadMeasuredVal+0x224>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
		tPmResult2.fNumConcetBio = (float)(tPmResult1[PM_SiPM].nTmpNumConcet);
 8002876:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <ReadMeasuredVal+0x220>)
 8002878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002884:	4b52      	ldr	r3, [pc, #328]	@ (80029d0 <ReadMeasuredVal+0x224>)
 8002886:	edc3 7a01 	vstr	s15, [r3, #4]
		//---------------------------------------------------------------------------------------------------------------------------------------
		if(ON == tSysState.FlagSendPmResultOn)
 800288a:	4b4f      	ldr	r3, [pc, #316]	@ (80029c8 <ReadMeasuredVal+0x21c>)
 800288c:	7a9b      	ldrb	r3, [r3, #10]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 822f 	bne.w	8002cf2 <ReadMeasuredVal+0x546>
		{
			// HEADER
			tMsgPkt.TxMsgCnt = 0;
 8002894:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 800289c:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800289e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	b2d1      	uxtb	r1, r2
 80028a6:	4a4c      	ldr	r2, [pc, #304]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028a8:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b4a      	ldr	r3, [pc, #296]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028b0:	4413      	add	r3, r2
 80028b2:	22c0      	movs	r2, #192	@ 0xc0
 80028b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 80028b8:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028ba:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	b2d1      	uxtb	r1, r2
 80028c2:	4a45      	ldr	r2, [pc, #276]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028c4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028cc:	4413      	add	r3, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = CMD_MEASUER_READ_VAL;
 80028d4:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028d6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	b2d1      	uxtb	r1, r2
 80028de:	4a3e      	ldr	r2, [pc, #248]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028e0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028e8:	4413      	add	r3, r2
 80028ea:	2203      	movs	r2, #3
 80028ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // MSG STATE
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028f2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	b2d1      	uxtb	r1, r2
 80028fa:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80028fc:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002900:	461a      	mov	r2, r3
 8002902:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002904:	4413      	add	r3, r2
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x34; // 52
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800290e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	b2d1      	uxtb	r1, r2
 8002916:	4a30      	ldr	r2, [pc, #192]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002918:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800291c:	461a      	mov	r2, r3
 800291e:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002920:	4413      	add	r3, r2
 8002922:	2234      	movs	r2, #52	@ 0x34
 8002924:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			for (ch = 0; ch < 4; ch++) // MASS Concentration
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e046      	b.n	80029bc <ReadMeasuredVal+0x210>
			{
				memcpy( nTmpConv8, &tPmResult1[ch].fMass_Concet, sizeof(float));
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	015b      	lsls	r3, r3, #5
 8002932:	4a26      	ldr	r2, [pc, #152]	@ (80029cc <ReadMeasuredVal+0x220>)
 8002934:	4413      	add	r3, r2
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	603b      	str	r3, [r7, #0]

				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800293c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	b2d1      	uxtb	r1, r2
 8002944:	4a24      	ldr	r2, [pc, #144]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002946:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800294a:	4619      	mov	r1, r3
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002950:	440b      	add	r3, r1
 8002952:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002958:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	b2d1      	uxtb	r1, r2
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002962:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002966:	4619      	mov	r1, r3
 8002968:	78ba      	ldrb	r2, [r7, #2]
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800296c:	440b      	add	r3, r1
 800296e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002974:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	b2d1      	uxtb	r1, r2
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800297e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002982:	4619      	mov	r1, r3
 8002984:	787a      	ldrb	r2, [r7, #1]
 8002986:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002988:	440b      	add	r3, r1
 800298a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 8002990:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	b2d1      	uxtb	r1, r2
 8002998:	4a0f      	ldr	r2, [pc, #60]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 800299a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800299e:	4619      	mov	r1, r3
 80029a0:	783a      	ldrb	r2, [r7, #0]
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <ReadMeasuredVal+0x22c>)
 80029a4:	440b      	add	r3, r1
 80029a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

				memset(nTmpConv8, 0, sizeof(nTmpConv8));
 80029aa:	463b      	mov	r3, r7
 80029ac:	2204      	movs	r2, #4
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f00a f98f 	bl	800ccd4 <memset>
			for (ch = 0; ch < 4; ch++) // MASS Concentration
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	3301      	adds	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d9b5      	bls.n	800292e <ReadMeasuredVal+0x182>
			}

			for (ch = 0; ch < 5; ch++) // Number Concentration
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e051      	b.n	8002a6c <ReadMeasuredVal+0x2c0>
 80029c8:	2000028c 	.word	0x2000028c
 80029cc:	200001bc 	.word	0x200001bc
 80029d0:	2000027c 	.word	0x2000027c
 80029d4:	200000cc 	.word	0x200000cc
 80029d8:	20000570 	.word	0x20000570
			{
				memcpy( nTmpConv8, &tPmResult1[ch].fNum_Concet, sizeof(float));
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	3310      	adds	r3, #16
 80029e2:	4abd      	ldr	r2, [pc, #756]	@ (8002cd8 <ReadMeasuredVal+0x52c>)
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	603b      	str	r3, [r7, #0]

				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 80029ea:	4bbc      	ldr	r3, [pc, #752]	@ (8002cdc <ReadMeasuredVal+0x530>)
 80029ec:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	b2d1      	uxtb	r1, r2
 80029f4:	4ab9      	ldr	r2, [pc, #740]	@ (8002cdc <ReadMeasuredVal+0x530>)
 80029f6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80029fa:	4619      	mov	r1, r3
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	4bb7      	ldr	r3, [pc, #732]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a00:	440b      	add	r3, r1
 8002a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002a06:	4bb5      	ldr	r3, [pc, #724]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a08:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	b2d1      	uxtb	r1, r2
 8002a10:	4ab2      	ldr	r2, [pc, #712]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a12:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a16:	4619      	mov	r1, r3
 8002a18:	78ba      	ldrb	r2, [r7, #2]
 8002a1a:	4bb0      	ldr	r3, [pc, #704]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002a22:	4bae      	ldr	r3, [pc, #696]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a24:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	b2d1      	uxtb	r1, r2
 8002a2c:	4aab      	ldr	r2, [pc, #684]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a2e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a32:	4619      	mov	r1, r3
 8002a34:	787a      	ldrb	r2, [r7, #1]
 8002a36:	4ba9      	ldr	r3, [pc, #676]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a38:	440b      	add	r3, r1
 8002a3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002a3e:	4ba7      	ldr	r3, [pc, #668]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a40:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	b2d1      	uxtb	r1, r2
 8002a48:	4aa4      	ldr	r2, [pc, #656]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a4a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a4e:	4619      	mov	r1, r3
 8002a50:	783a      	ldrb	r2, [r7, #0]
 8002a52:	4ba2      	ldr	r3, [pc, #648]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a54:	440b      	add	r3, r1
 8002a56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

				memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f00a f937 	bl	800ccd4 <memset>
			for (ch = 0; ch < 5; ch++) // Number Concentration
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d9b4      	bls.n	80029dc <ReadMeasuredVal+0x230>
			}


			memcpy( nTmpConv8, &tPmResult2.fResultTps, sizeof(float));
 8002a72:	4b9b      	ldr	r3, [pc, #620]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002a78:	4b98      	ldr	r3, [pc, #608]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a7a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	b2d1      	uxtb	r1, r2
 8002a82:	4a96      	ldr	r2, [pc, #600]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a84:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002a88:	4619      	mov	r1, r3
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4b93      	ldr	r3, [pc, #588]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002a94:	4b91      	ldr	r3, [pc, #580]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002a96:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	b2d1      	uxtb	r1, r2
 8002a9e:	4a8f      	ldr	r2, [pc, #572]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002aa0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	78ba      	ldrb	r2, [r7, #2]
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ab2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	b2d1      	uxtb	r1, r2
 8002aba:	4a88      	ldr	r2, [pc, #544]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002abc:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	787a      	ldrb	r2, [r7, #1]
 8002ac4:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002acc:	4b83      	ldr	r3, [pc, #524]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ace:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	b2d1      	uxtb	r1, r2
 8002ad6:	4a81      	ldr	r2, [pc, #516]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ad8:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002adc:	4619      	mov	r1, r3
 8002ade:	783a      	ldrb	r2, [r7, #0]
 8002ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2204      	movs	r2, #4
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a f8f0 	bl	800ccd4 <memset>

			memcpy( nTmpConv8, &tPmResult2.fCFU, sizeof(float));
 8002af4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002afa:	4b78      	ldr	r3, [pc, #480]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002afc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	b2d1      	uxtb	r1, r2
 8002b04:	4a75      	ldr	r2, [pc, #468]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b06:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4b73      	ldr	r3, [pc, #460]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b10:	440b      	add	r3, r1
 8002b12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002b16:	4b71      	ldr	r3, [pc, #452]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b18:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	b2d1      	uxtb	r1, r2
 8002b20:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b22:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b26:	4619      	mov	r1, r3
 8002b28:	78ba      	ldrb	r2, [r7, #2]
 8002b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b34:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	b2d1      	uxtb	r1, r2
 8002b3c:	4a67      	ldr	r2, [pc, #412]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b3e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b42:	4619      	mov	r1, r3
 8002b44:	787a      	ldrb	r2, [r7, #1]
 8002b46:	4b65      	ldr	r3, [pc, #404]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b48:	440b      	add	r3, r1
 8002b4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002b4e:	4b63      	ldr	r3, [pc, #396]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b50:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	b2d1      	uxtb	r1, r2
 8002b58:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b5a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b5e:	4619      	mov	r1, r3
 8002b60:	783a      	ldrb	r2, [r7, #0]
 8002b62:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b64:	440b      	add	r3, r1
 8002b66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f00a f8af 	bl	800ccd4 <memset>

			memcpy( nTmpConv8, &tPmResult2.fNumConcetBio, sizeof(float));
 8002b76:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002b7c:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b7e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	b2d1      	uxtb	r1, r2
 8002b86:	4a55      	ldr	r2, [pc, #340]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b88:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4b52      	ldr	r3, [pc, #328]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002b9a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	b2d1      	uxtb	r1, r2
 8002ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ba4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002ba8:	4619      	mov	r1, r3
 8002baa:	78ba      	ldrb	r2, [r7, #2]
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002bb4:	4b49      	ldr	r3, [pc, #292]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bb6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	b2d1      	uxtb	r1, r2
 8002bbe:	4a47      	ldr	r2, [pc, #284]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bc0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	787a      	ldrb	r2, [r7, #1]
 8002bc8:	4b44      	ldr	r3, [pc, #272]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002bd0:	4b42      	ldr	r3, [pc, #264]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bd2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	b2d1      	uxtb	r1, r2
 8002bda:	4a40      	ldr	r2, [pc, #256]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002bdc:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002be0:	4619      	mov	r1, r3
 8002be2:	783a      	ldrb	r2, [r7, #0]
 8002be4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002bec:	463b      	mov	r3, r7
 8002bee:	2204      	movs	r2, #4
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f00a f86e 	bl	800ccd4 <memset>

			memcpy( nTmpConv8, &tPmResult2.fReverved, sizeof(float));
 8002bf8:	4b39      	ldr	r3, [pc, #228]	@ (8002ce0 <ReadMeasuredVal+0x534>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	603b      	str	r3, [r7, #0]
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[3];
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c00:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	b2d1      	uxtb	r1, r2
 8002c08:	4a34      	ldr	r2, [pc, #208]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c0a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c0e:	4619      	mov	r1, r3
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c14:	440b      	add	r3, r1
 8002c16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[2];
 8002c1a:	4b30      	ldr	r3, [pc, #192]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c1c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	b2d1      	uxtb	r1, r2
 8002c24:	4a2d      	ldr	r2, [pc, #180]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c26:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	78ba      	ldrb	r2, [r7, #2]
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c30:	440b      	add	r3, r1
 8002c32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[1];
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c38:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	b2d1      	uxtb	r1, r2
 8002c40:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c42:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c46:	4619      	mov	r1, r3
 8002c48:	787a      	ldrb	r2, [r7, #1]
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t) nTmpConv8[0];
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c54:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	b2d1      	uxtb	r1, r2
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c5e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002c62:	4619      	mov	r1, r3
 8002c64:	783a      	ldrb	r2, [r7, #0]
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c68:	440b      	add	r3, r1
 8002c6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			memset(nTmpConv8, 0, sizeof(nTmpConv8));
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2204      	movs	r2, #4
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00a f82d 	bl	800ccd4 <memset>

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum(tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 8002c7a:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c7c:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c82:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002c86:	1c59      	adds	r1, r3, #1
 8002c88:	b2c8      	uxtb	r0, r1
 8002c8a:	4914      	ldr	r1, [pc, #80]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002c8c:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8002c90:	461c      	mov	r4, r3
 8002c92:	4611      	mov	r1, r2
 8002c94:	4813      	ldr	r0, [pc, #76]	@ (8002ce4 <ReadMeasuredVal+0x538>)
 8002c96:	f002 ffe3 	bl	8005c60 <UART_Chksum>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002ca0:	4423      	add	r3, r4
 8002ca2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			UART_StuffAssambly();
 8002ca6:	f002 ff1d 	bl	8005ae4 <UART_StuffAssambly>
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cac:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	b2d1      	uxtb	r1, r2
 8002cb4:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cb6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	22c2      	movs	r2, #194	@ 0xc2
 8002cc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


			tPdCtrl.ChkCount = 0;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <ReadMeasuredVal+0x53c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
			tMsgPkt.FlagTxPktOn = ON;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <ReadMeasuredVal+0x530>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8002cd4:	e00a      	b.n	8002cec <ReadMeasuredVal+0x540>
 8002cd6:	bf00      	nop
 8002cd8:	200001bc 	.word	0x200001bc
 8002cdc:	20000570 	.word	0x20000570
 8002ce0:	2000027c 	.word	0x2000027c
 8002ce4:	200005f0 	.word	0x200005f0
 8002ce8:	20000074 	.word	0x20000074
			tSysState.FlagSendPmResultOn = OFF;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <ReadMeasuredVal+0x578>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	729a      	strb	r2, [r3, #10]
		}

		Calc_Init();
 8002cf2:	f7fe fdc1 	bl	8001878 <Calc_Init>
		WaitTime_Init();
 8002cf6:	f7ff fc5b 	bl	80025b0 <WaitTime_Init>
		tSysState.FlagLoopOn = OFF;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <ReadMeasuredVal+0x578>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	721a      	strb	r2, [r3, #8]
		tPdCtrl.ChkCount = 0;
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <ReadMeasuredVal+0x57c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
	{
		RngOfPdAdcSamplingVal(tPdCtrl.CurrAdcVal);
		RngOfSiPmAdcSamplingVal(tSiPmCtrl.CurrAdcVal);

	}
}
 8002d06:	e009      	b.n	8002d1c <ReadMeasuredVal+0x570>
		RngOfPdAdcSamplingVal(tPdCtrl.CurrAdcVal);
 8002d08:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <ReadMeasuredVal+0x57c>)
 8002d0a:	88db      	ldrh	r3, [r3, #6]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fc4f 	bl	80045b0 <RngOfPdAdcSamplingVal>
		RngOfSiPmAdcSamplingVal(tSiPmCtrl.CurrAdcVal);
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <ReadMeasuredVal+0x580>)
 8002d14:	88db      	ldrh	r3, [r3, #6]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fd1a 	bl	8004750 <RngOfSiPmAdcSamplingVal>
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	2000028c 	.word	0x2000028c
 8002d28:	20000074 	.word	0x20000074
 8002d2c:	200000a4 	.word	0x200000a4

08002d30 <FanCleanCtrl>:

uint8_t FanCleanCtrl(void)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0

	uint8_t Result = FALSE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	71fb      	strb	r3, [r7, #7]

	if (OFF == tSysState.FlagLoopOn) { WaitTime_Init(); tSysState.FlagLoopOn = ON; EXT_LD_Ctrl(OFF); EXT_HV_Ctrl(OFF); EXT_PD_Ctrl(OFF); FAN_Ctrl(HI, ON); }
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002d3c:	7a1b      	ldrb	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d111      	bne.n	8002d66 <FanCleanCtrl+0x36>
 8002d42:	f7ff fc35 	bl	80025b0 <WaitTime_Init>
 8002d46:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	721a      	strb	r2, [r3, #8]
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe fa69 	bl	8001224 <EXT_LD_Ctrl>
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fa8a 	bl	800126c <EXT_HV_Ctrl>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe faab 	bl	80012b4 <EXT_PD_Ctrl>
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7fe fcf3 	bl	800174c <FAN_Ctrl>

	if ( TRUE == WaitHoldTime_Sec(ON, UART_MSG_MANUAL_FAN_CLE_TIME) )
 8002d66:	210a      	movs	r1, #10
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7ff fc3f 	bl	80025ec <WaitHoldTime_Sec>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f040 8098 	bne.w	8002ea6 <FanCleanCtrl+0x176>
	{
		//Check Get ADC

		// HEADER
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 8002d76:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d78:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	b2d1      	uxtb	r1, r2
 8002d80:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d82:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	22c0      	movs	r2, #192	@ 0xc0
 8002d8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 8002d92:	4b48      	ldr	r3, [pc, #288]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d94:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	b2d1      	uxtb	r1, r2
 8002d9c:	4a45      	ldr	r2, [pc, #276]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002d9e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002da6:	4413      	add	r3, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = CMD_START_FAN_CLEAN;
 8002dae:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002db0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	b2d1      	uxtb	r1, r2
 8002db8:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dba:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState; // MSG STATE
 8002dca:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dcc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	b2d1      	uxtb	r1, r2
 8002dd4:	4a37      	ldr	r2, [pc, #220]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dd6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dde:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002de4:	440b      	add	r3, r1
 8002de6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // Message Length
 8002dea:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dec:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	b2d1      	uxtb	r1, r2
 8002df4:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002df6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002dfe:	4413      	add	r3, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum(tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 8002e06:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e08:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e0e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002e12:	1c59      	adds	r1, r3, #1
 8002e14:	b2c8      	uxtb	r0, r1
 8002e16:	4927      	ldr	r1, [pc, #156]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e18:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4825      	ldr	r0, [pc, #148]	@ (8002eb8 <FanCleanCtrl+0x188>)
 8002e22:	f002 ff1d 	bl	8005c60 <UART_Chksum>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e2c:	4423      	add	r3, r4
 8002e2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		UART_StuffAssambly();
 8002e32:	f002 fe57 	bl	8005ae4 <UART_StuffAssambly>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 8002e36:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e38:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	b2d1      	uxtb	r1, r2
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e42:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	22c2      	movs	r2, #194	@ 0xc2
 8002e4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		if(ON == tSysState.FlagOperModeOn) 	{ FAN_Ctrl(LO, ON);  EXT_LD_Ctrl(ON); EXT_HV_Ctrl(ON); EXT_PD_Ctrl(ON); }
 8002e52:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002e54:	7adb      	ldrb	r3, [r3, #11]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <FanCleanCtrl+0x146>
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fe fc75 	bl	800174c <FAN_Ctrl>
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fe f9de 	bl	8001224 <EXT_LD_Ctrl>
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7fe f9ff 	bl	800126c <EXT_HV_Ctrl>
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fe fa20 	bl	80012b4 <EXT_PD_Ctrl>
 8002e74:	e003      	b.n	8002e7e <FanCleanCtrl+0x14e>
		else 								{ FAN_Ctrl(LO, OFF); }
 8002e76:	2100      	movs	r1, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fc67 	bl	800174c <FAN_Ctrl>

		tFan.CleWorkTime = 0;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <FanCleanCtrl+0x18c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
		SetCfg_CurrentFanUseTime(0);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe ffd7 	bl	8001e38 <SetCfg_CurrentFanUseTime>

		tMsgPkt.FlagTxPktOn = ON;
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <FanCleanCtrl+0x184>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
		tSysState.FlagStatClenaOn = OFF;
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	735a      	strb	r2, [r3, #13]

		WaitTime_Init();
 8002e98:	f7ff fb8a 	bl	80025b0 <WaitTime_Init>
		tSysState.FlagLoopOn = OFF;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <FanCleanCtrl+0x180>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	721a      	strb	r2, [r3, #8]

		Result = TRUE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	71fb      	strb	r3, [r7, #7]
	}

	return Result;
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	2000028c 	.word	0x2000028c
 8002eb4:	20000570 	.word	0x20000570
 8002eb8:	200005f0 	.word	0x200005f0
 8002ebc:	200000b4 	.word	0x200000b4

08002ec0 <Measure_Start>:


void Measure_Start(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	if(OFF == tLdCtrl.FlagCtrlOn) 	{ EXT_LD_Ctrl(ON);  tLdCtrl.CurrAdcVal = 0; tLdCtrl.ChkCount = 0;}
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <Measure_Start+0x60>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <Measure_Start+0x1e>
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7fe f9a9 	bl	8001224 <EXT_LD_Ctrl>
 8002ed2:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <Measure_Start+0x60>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	80da      	strh	r2, [r3, #6]
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <Measure_Start+0x60>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
	if(OFF == tFan.FlagCtrlOn) 		{ FAN_Ctrl(LO, ON); tPdCtrl.CurrAdcVal = 0; tPdCtrl.ChkCount = 0;}
 8002ede:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <Measure_Start+0x64>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <Measure_Start+0x3a>
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fe fc2f 	bl	800174c <FAN_Ctrl>
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <Measure_Start+0x68>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	80da      	strh	r2, [r3, #6]
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <Measure_Start+0x68>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
	if(OFF == tHvCtrl.FlagCtrlOn ) 	{ EXT_HV_Ctrl(ON);  tHvCtrl.CurrAdcVal = 0; tHvCtrl.ChkCount = 0;}
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <Measure_Start+0x6c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <Measure_Start+0x54>
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fe f9b2 	bl	800126c <EXT_HV_Ctrl>
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <Measure_Start+0x6c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	80da      	strh	r2, [r3, #6]
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <Measure_Start+0x6c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
	tSysState.FlagGetAdcOn = ON;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <Measure_Start+0x70>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	71da      	strb	r2, [r3, #7]
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000084 	.word	0x20000084
 8002f24:	200000b4 	.word	0x200000b4
 8002f28:	20000074 	.word	0x20000074
 8002f2c:	20000094 	.word	0x20000094
 8002f30:	2000028c 	.word	0x2000028c

08002f34 <Measure_Stop>:

void Measure_Stop(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	if(ON == tLdCtrl.FlagCtrlOn) 	{ EXT_LD_Ctrl(OFF);  tLdCtrl.CurrAdcVal = 0; tLdCtrl.ChkCount = 0;}
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <Measure_Stop+0x60>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <Measure_Stop+0x1e>
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fe f96f 	bl	8001224 <EXT_LD_Ctrl>
 8002f46:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <Measure_Stop+0x60>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	80da      	strh	r2, [r3, #6]
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <Measure_Stop+0x60>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
	if(ON == tFan.FlagCtrlOn) 		{ FAN_Ctrl(LO, OFF); tPdCtrl.CurrAdcVal = 0; tPdCtrl.ChkCount = 0;}
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <Measure_Stop+0x64>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d109      	bne.n	8002f6e <Measure_Stop+0x3a>
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fe fbf5 	bl	800174c <FAN_Ctrl>
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <Measure_Stop+0x68>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	80da      	strh	r2, [r3, #6]
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <Measure_Stop+0x68>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
	if(ON == tHvCtrl.FlagCtrlOn ) 	{ EXT_HV_Ctrl(OFF);  tHvCtrl.CurrAdcVal = 0; tHvCtrl.ChkCount = 0;}
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <Measure_Stop+0x6c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d108      	bne.n	8002f88 <Measure_Stop+0x54>
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fe f978 	bl	800126c <EXT_HV_Ctrl>
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <Measure_Stop+0x6c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	80da      	strh	r2, [r3, #6]
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <Measure_Stop+0x6c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
	tSysState.FlagGetAdcOn = OFF;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <Measure_Stop+0x70>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	71da      	strb	r2, [r3, #7]
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000084 	.word	0x20000084
 8002f98:	200000b4 	.word	0x200000b4
 8002f9c:	20000074 	.word	0x20000074
 8002fa0:	20000094 	.word	0x20000094
 8002fa4:	2000028c 	.word	0x2000028c

08002fa8 <AssmTxMsg_GetBoundaryVolt>:

void AssmTxMsg_GetBoundaryVolt(uint8_t nCh)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
	 if(0x00 == nCh)
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d14b      	bne.n	8003050 <AssmTxMsg_GetBoundaryVolt+0xa8>
	 {
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8002fb8:	4b95      	ldr	r3, [pc, #596]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fba:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	b2d1      	uxtb	r1, r2
 8002fc2:	4a93      	ldr	r2, [pc, #588]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fc4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b91      	ldr	r3, [pc, #580]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 8002fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fd6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	b2d1      	uxtb	r1, r2
 8002fde:	4a8c      	ldr	r2, [pc, #560]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fe0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8002fe8:	4413      	add	r3, r2
 8002fea:	79fa      	ldrb	r2, [r7, #7]
 8002fec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh].BasePD >> 8) & 0xFF);
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	4988      	ldr	r1, [pc, #544]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3308      	adds	r3, #8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0a18      	lsrs	r0, r3, #8
 8003004:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003006:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	b2d1      	uxtb	r1, r2
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003010:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003014:	4619      	mov	r1, r3
 8003016:	b2c2      	uxtb	r2, r0
 8003018:	4b7d      	ldr	r3, [pc, #500]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800301a:	440b      	add	r3, r1
 800301c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh].BasePD  ) & 0xFF);
 8003020:	79fa      	ldrb	r2, [r7, #7]
 8003022:	497c      	ldr	r1, [pc, #496]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	3308      	adds	r3, #8
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	4b77      	ldr	r3, [pc, #476]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003034:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	b2d1      	uxtb	r1, r2
 800303c:	4a74      	ldr	r2, [pc, #464]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800303e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003042:	4619      	mov	r1, r3
 8003044:	b2c2      	uxtb	r2, r0
 8003046:	4b72      	ldr	r3, [pc, #456]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003048:	440b      	add	r3, r1
 800304a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB >> 8) & 0xFF);
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB  ) & 0xFF);
	 }
}
 800304e:	e0d8      	b.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
	 else if((0x01 <= nCh)&&(0x05 >= nCh))
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d050      	beq.n	80030f8 <AssmTxMsg_GetBoundaryVolt+0x150>
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d84d      	bhi.n	80030f8 <AssmTxMsg_GetBoundaryVolt+0x150>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800305c:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800305e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	b2d1      	uxtb	r1, r2
 8003066:	4a6a      	ldr	r2, [pc, #424]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003068:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800306c:	461a      	mov	r2, r3
 800306e:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003070:	4413      	add	r3, r2
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 8003078:	4b65      	ldr	r3, [pc, #404]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800307a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	b2d1      	uxtb	r1, r2
 8003082:	4a63      	ldr	r2, [pc, #396]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003084:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003088:	461a      	mov	r2, r3
 800308a:	4b61      	ldr	r3, [pc, #388]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800308c:	4413      	add	r3, r2
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh-1].UB >> 8) & 0xFF);
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	495e      	ldr	r1, [pc, #376]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3310      	adds	r3, #16
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0a18      	lsrs	r0, r3, #8
 80030aa:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030ac:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	b2d1      	uxtb	r1, r2
 80030b4:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030b6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80030ba:	4619      	mov	r1, r3
 80030bc:	b2c2      	uxtb	r2, r0
 80030be:	4b54      	ldr	r3, [pc, #336]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030c0:	440b      	add	r3, r1
 80030c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[nCh-1].UB  ) & 0xFF);
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	4952      	ldr	r1, [pc, #328]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3310      	adds	r3, #16
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	4b4d      	ldr	r3, [pc, #308]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030dc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	b2d1      	uxtb	r1, r2
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030e6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80030ea:	4619      	mov	r1, r3
 80030ec:	b2c2      	uxtb	r2, r0
 80030ee:	4b48      	ldr	r3, [pc, #288]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80030f0:	440b      	add	r3, r1
 80030f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80030f6:	e084      	b.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
	 else if(0x06 == nCh)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d13f      	bne.n	800317e <AssmTxMsg_GetBoundaryVolt+0x1d6>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 80030fe:	4b44      	ldr	r3, [pc, #272]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003100:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	b2d1      	uxtb	r1, r2
 8003108:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800310a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800310e:	461a      	mov	r2, r3
 8003110:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003112:	4413      	add	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 800311a:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800311c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	b2d1      	uxtb	r1, r2
 8003124:	4a3a      	ldr	r2, [pc, #232]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003126:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800312a:	461a      	mov	r2, r3
 800312c:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800312e:	4413      	add	r3, r2
 8003130:	79fa      	ldrb	r2, [r7, #7]
 8003132:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].LB >> 8) & 0xFF);
 8003136:	4b37      	ldr	r3, [pc, #220]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 8003138:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800313c:	0a18      	lsrs	r0, r3, #8
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003140:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	b2d1      	uxtb	r1, r2
 8003148:	4a31      	ldr	r2, [pc, #196]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800314a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800314e:	4619      	mov	r1, r3
 8003150:	b2c2      	uxtb	r2, r0
 8003152:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003154:	440b      	add	r3, r1
 8003156:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].LB  ) & 0xFF);
 800315a:	4b2e      	ldr	r3, [pc, #184]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 800315c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003162:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	b2d1      	uxtb	r1, r2
 800316a:	4a29      	ldr	r2, [pc, #164]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 800316c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003170:	4619      	mov	r1, r3
 8003172:	b2c2      	uxtb	r2, r0
 8003174:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003176:	440b      	add	r3, r1
 8003178:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 800317c:	e041      	b.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
	 else if(0x07 == nCh)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d13e      	bne.n	8003202 <AssmTxMsg_GetBoundaryVolt+0x25a>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003184:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003186:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	b2d1      	uxtb	r1, r2
 800318e:	4a20      	ldr	r2, [pc, #128]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003190:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003194:	461a      	mov	r2, r3
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 8003198:	4413      	add	r3, r2
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031a2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	b2d1      	uxtb	r1, r2
 80031aa:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031ac:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031b4:	4413      	add	r3, r2
 80031b6:	79fa      	ldrb	r2, [r7, #7]
 80031b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB >> 8) & 0xFF);
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 80031be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031c2:	0a18      	lsrs	r0, r3, #8
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031c6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	b2d1      	uxtb	r1, r2
 80031ce:	4a10      	ldr	r2, [pc, #64]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031d0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80031d4:	4619      	mov	r1, r3
 80031d6:	b2c2      	uxtb	r2, r0
 80031d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tParam[PM_SiPM].UB  ) & 0xFF);
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <AssmTxMsg_GetBoundaryVolt+0x26c>)
 80031e2:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031e8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	b2d1      	uxtb	r1, r2
 80031f0:	4a07      	ldr	r2, [pc, #28]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031f2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80031f6:	4619      	mov	r1, r3
 80031f8:	b2c2      	uxtb	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <AssmTxMsg_GetBoundaryVolt+0x268>)
 80031fc:	440b      	add	r3, r1
 80031fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000570 	.word	0x20000570
 8003214:	200000cc 	.word	0x200000cc

08003218 <SetBoundaryVolt>:

void SetBoundaryVolt(uint8_t nCh)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
	 if(0x00 == nCh)
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13f      	bne.n	80032a8 <SetBoundaryVolt+0x90>
	 {

		tParam[nCh].BasePD  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 8003228:	4b5e      	ldr	r3, [pc, #376]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 800322a:	799b      	ldrb	r3, [r3, #6]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	b29b      	uxth	r3, r3
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	4618      	mov	r0, r3
 8003234:	495c      	ldr	r1, [pc, #368]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	3308      	adds	r3, #8
 8003242:	6018      	str	r0, [r3, #0]
		tParam[nCh].BasePD |= (uint16_t)(tMsgPkt.RxBuff[7]);
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	4958      	ldr	r1, [pc, #352]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3308      	adds	r3, #8
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a53      	ldr	r2, [pc, #332]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 8003258:	79d2      	ldrb	r2, [r2, #7]
 800325a:	4611      	mov	r1, r2
 800325c:	79fa      	ldrb	r2, [r7, #7]
 800325e:	4319      	orrs	r1, r3
 8003260:	4851      	ldr	r0, [pc, #324]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4403      	add	r3, r0
 800326c:	3308      	adds	r3, #8
 800326e:	6019      	str	r1, [r3, #0]

		SetParam_BoundaryVolt(nCh, tParam[nCh].BasePD);
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3308      	adds	r3, #8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29a      	uxth	r2, r3
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe ff07 	bl	800209c <SetParam_BoundaryVolt>

		tParam[nCh].LB = tParam[PM_CH1].BasePD + 1;
 800328e:	4b46      	ldr	r3, [pc, #280]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	79fa      	ldrb	r2, [r7, #7]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	4844      	ldr	r0, [pc, #272]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4403      	add	r3, r0
 80032a2:	330c      	adds	r3, #12
 80032a4:	6019      	str	r1, [r3, #0]
		tParam[PM_SiPM].UB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
		tParam[PM_SiPM].UB |= (uint16_t)(tMsgPkt.RxBuff[7]);

		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].UB);
	 }
}
 80032a6:	e078      	b.n	800339a <SetBoundaryVolt+0x182>
	 else if((0x01 <= nCh)&&(0x05 >= nCh))
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03a      	beq.n	8003324 <SetBoundaryVolt+0x10c>
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d837      	bhi.n	8003324 <SetBoundaryVolt+0x10c>
		tParam[nCh-1].UB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 80032b4:	4b3b      	ldr	r3, [pc, #236]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 80032b6:	799b      	ldrb	r3, [r3, #6]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b299      	uxth	r1, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	1e5a      	subs	r2, r3, #1
 80032c0:	4608      	mov	r0, r1
 80032c2:	4939      	ldr	r1, [pc, #228]	@ (80033a8 <SetBoundaryVolt+0x190>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	3310      	adds	r3, #16
 80032d0:	6018      	str	r0, [r3, #0]
		tParam[nCh-1].UB |= (uint16_t)(tMsgPkt.RxBuff[7]);
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <SetBoundaryVolt+0x190>)
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	3310      	adds	r3, #16
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2f      	ldr	r2, [pc, #188]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 80032e8:	79d2      	ldrb	r2, [r2, #7]
 80032ea:	4611      	mov	r1, r2
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	3a01      	subs	r2, #1
 80032f0:	4319      	orrs	r1, r3
 80032f2:	482d      	ldr	r0, [pc, #180]	@ (80033a8 <SetBoundaryVolt+0x190>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4403      	add	r3, r0
 80032fe:	3310      	adds	r3, #16
 8003300:	6019      	str	r1, [r3, #0]
		SetParam_BoundaryVolt(nCh, tParam[nCh-1].UB);
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	4928      	ldr	r1, [pc, #160]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	3310      	adds	r3, #16
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29a      	uxth	r2, r3
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe febd 	bl	800209c <SetParam_BoundaryVolt>
}
 8003322:	e03a      	b.n	800339a <SetBoundaryVolt+0x182>
	 else if(0x06 == nCh)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	2b06      	cmp	r3, #6
 8003328:	d11a      	bne.n	8003360 <SetBoundaryVolt+0x148>
		tParam[PM_SiPM].LB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 800332c:	799b      	ldrb	r3, [r3, #6]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b29b      	uxth	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003336:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		tParam[PM_SiPM].LB |= (uint16_t)(tMsgPkt.RxBuff[7]);
 800333a:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <SetBoundaryVolt+0x190>)
 800333c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003340:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 8003342:	79d2      	ldrb	r2, [r2, #7]
 8003344:	4313      	orrs	r3, r2
 8003346:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003348:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].LB);
 800334c:	4b16      	ldr	r3, [pc, #88]	@ (80033a8 <SetBoundaryVolt+0x190>)
 800334e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003352:	b29a      	uxth	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fe9f 	bl	800209c <SetParam_BoundaryVolt>
}
 800335e:	e01c      	b.n	800339a <SetBoundaryVolt+0x182>
	 else if(0x07 == nCh)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	2b07      	cmp	r3, #7
 8003364:	d119      	bne.n	800339a <SetBoundaryVolt+0x182>
		tParam[PM_SiPM].UB  = (uint16_t)(tMsgPkt.RxBuff[6] << 8);
 8003366:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 8003368:	799b      	ldrb	r3, [r3, #6]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003372:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		tParam[PM_SiPM].UB |= (uint16_t)(tMsgPkt.RxBuff[7]);
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800337c:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <SetBoundaryVolt+0x18c>)
 800337e:	79d2      	ldrb	r2, [r2, #7]
 8003380:	4313      	orrs	r3, r2
 8003382:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <SetBoundaryVolt+0x190>)
 8003384:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].UB);
 8003388:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <SetBoundaryVolt+0x190>)
 800338a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800338e:	b29a      	uxth	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fe81 	bl	800209c <SetParam_BoundaryVolt>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000570 	.word	0x20000570
 80033a8:	200000cc 	.word	0x200000cc

080033ac <AssmTxMsg_GetAdjustCal>:

//EEROR
void AssmTxMsg_GetAdjustCal(uint8_t nCh)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
	uint32_t nRelt = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]

//		 if(0x00 == nCh)					{ nRelt = *((uint32_t*)&tParam[PM_CH1].den); 		}
//	else if((0x01 <= nCh)&&(0x05 >= nCh))	{ nRelt = *((uint32_t*)&tParam[PM_CH1-1].Cal); 	}
//	else if(0x06 == nCh)					{ nRelt = *((uint32_t*)&tParam[PM_SiPM].CfuCal); 	}

		 if(0x00 == nCh)					{ memcpy(&nRelt, &tParam[PM_CH1].den, sizeof nRelt); }
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <AssmTxMsg_GetAdjustCal+0x1c>
 80033c0:	4b37      	ldr	r3, [pc, #220]	@ (80034a0 <AssmTxMsg_GetAdjustCal+0xf4>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e018      	b.n	80033fa <AssmTxMsg_GetAdjustCal+0x4e>
	else if((0x01 <= nCh)&&(0x05 >= nCh))	{ memcpy(&nRelt, &tParam[nCh-1].Cal, sizeof nRelt); 	}
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <AssmTxMsg_GetAdjustCal+0x40>
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d80b      	bhi.n	80033ec <AssmTxMsg_GetAdjustCal+0x40>
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	3320      	adds	r3, #32
 80033e2:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <AssmTxMsg_GetAdjustCal+0xf4>)
 80033e4:	4413      	add	r3, r2
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e006      	b.n	80033fa <AssmTxMsg_GetAdjustCal+0x4e>
	else if(0x06 == nCh)					{ memcpy(&nRelt, &tParam[PM_SiPM].CfuCal, sizeof nRelt); 	}
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d103      	bne.n	80033fa <AssmTxMsg_GetAdjustCal+0x4e>
 80033f2:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <AssmTxMsg_GetAdjustCal+0xf4>)
 80033f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80033f8:	60fb      	str	r3, [r7, #12]

	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCh;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 80033fc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	b2d1      	uxtb	r1, r2
 8003404:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003406:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800340a:	461a      	mov	r2, r3
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800340e:	4413      	add	r3, r2
 8003410:	79fa      	ldrb	r2, [r7, #7]
 8003412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt >> 24)  & 0xFF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0e18      	lsrs	r0, r3, #24
 800341a:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800341c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	b2d1      	uxtb	r1, r2
 8003424:	4a1f      	ldr	r2, [pc, #124]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003426:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800342a:	4619      	mov	r1, r3
 800342c:	b2c2      	uxtb	r2, r0
 800342e:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003430:	440b      	add	r3, r1
 8003432:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt >> 16)  & 0xFF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	0c18      	lsrs	r0, r3, #16
 800343a:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800343c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	b2d1      	uxtb	r1, r2
 8003444:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003446:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800344a:	4619      	mov	r1, r3
 800344c:	b2c2      	uxtb	r2, r0
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003450:	440b      	add	r3, r1
 8003452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt >>  8)  & 0xFF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	0a18      	lsrs	r0, r3, #8
 800345a:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800345c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	b2d1      	uxtb	r1, r2
 8003464:	4a0f      	ldr	r2, [pc, #60]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003466:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800346a:	4619      	mov	r1, r3
 800346c:	b2c2      	uxtb	r2, r0
 800346e:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003470:	440b      	add	r3, r1
 8003472:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((nRelt 	   )  & 0xFF);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800347a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	b2d1      	uxtb	r1, r2
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 8003484:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003488:	4619      	mov	r1, r3
 800348a:	b2c2      	uxtb	r2, r0
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <AssmTxMsg_GetAdjustCal+0xf8>)
 800348e:	440b      	add	r3, r1
 8003490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	200000cc 	.word	0x200000cc
 80034a4:	20000570 	.word	0x20000570

080034a8 <SetAdjustCal>:

void SetAdjustCal(uint8_t nCh)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
	uint32_t result  = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]

	result  = (uint32_t)(tMsgPkt.RxBuff[6] << 24);
 80034b6:	4b38      	ldr	r3, [pc, #224]	@ (8003598 <SetAdjustCal+0xf0>)
 80034b8:	799b      	ldrb	r3, [r3, #6]
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(tMsgPkt.RxBuff[7] << 16);
 80034be:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <SetAdjustCal+0xf0>)
 80034c0:	79db      	ldrb	r3, [r3, #7]
 80034c2:	041a      	lsls	r2, r3, #16
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(tMsgPkt.RxBuff[8] << 8);
 80034ca:	4b33      	ldr	r3, [pc, #204]	@ (8003598 <SetAdjustCal+0xf0>)
 80034cc:	7a1b      	ldrb	r3, [r3, #8]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
	result |= (uint32_t)(tMsgPkt.RxBuff[9]);
 80034d6:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <SetAdjustCal+0xf0>)
 80034d8:	7a5b      	ldrb	r3, [r3, #9]
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

	 if(0x00 == nCh)
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11c      	bne.n	8003522 <SetAdjustCal+0x7a>
	 {
		tParam[nCh].den = *((float*)&result);
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	482a      	ldr	r0, [pc, #168]	@ (800359c <SetAdjustCal+0xf4>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4403      	add	r3, r0
 80034fc:	331c      	adds	r3, #28
 80034fe:	6019      	str	r1, [r3, #0]
		SetParam_AdjCal(nCh, tParam[nCh].den);
 8003500:	79fa      	ldrb	r2, [r7, #7]
 8003502:	4926      	ldr	r1, [pc, #152]	@ (800359c <SetAdjustCal+0xf4>)
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	331c      	adds	r3, #28
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	eeb0 0a67 	vmov.f32	s0, s15
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fe64 	bl	80021e8 <SetParam_AdjCal>
	 else if(0x06 == nCh)
	 {
		tParam[PM_SiPM].CfuCal = *((float*)&result);
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].LB);
	 }
}
 8003520:	e036      	b.n	8003590 <SetAdjustCal+0xe8>
	 else if((0x01 <= nCh)&&(0x05 >= nCh))
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d021      	beq.n	800356c <SetAdjustCal+0xc4>
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d81e      	bhi.n	800356c <SetAdjustCal+0xc4>
		tParam[nCh-1].Cal  = *((float*)&result);
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	3a01      	subs	r2, #1
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	4818      	ldr	r0, [pc, #96]	@ (800359c <SetAdjustCal+0xf4>)
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4403      	add	r3, r0
 8003544:	3320      	adds	r3, #32
 8003546:	6019      	str	r1, [r3, #0]
		SetParam_AdjCal(nCh, tParam[nCh-1].Cal);
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	4913      	ldr	r1, [pc, #76]	@ (800359c <SetAdjustCal+0xf4>)
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	3320      	adds	r3, #32
 800355a:	edd3 7a00 	vldr	s15, [r3]
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	eeb0 0a67 	vmov.f32	s0, s15
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fe3f 	bl	80021e8 <SetParam_AdjCal>
}
 800356a:	e011      	b.n	8003590 <SetAdjustCal+0xe8>
	 else if(0x06 == nCh)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d10e      	bne.n	8003590 <SetAdjustCal+0xe8>
		tParam[PM_SiPM].CfuCal = *((float*)&result);
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a08      	ldr	r2, [pc, #32]	@ (800359c <SetAdjustCal+0xf4>)
 800357a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
		SetParam_BoundaryVolt(nCh, tParam[PM_SiPM].LB);
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <SetAdjustCal+0xf4>)
 8003580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003584:	b29a      	uxth	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fd86 	bl	800209c <SetParam_BoundaryVolt>
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000570 	.word	0x20000570
 800359c:	200000cc 	.word	0x200000cc

080035a0 <AssmTxMsg_DeviceInfo>:

void AssmTxMsg_DeviceInfo(uint8_t nMode)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]

	if(DEVICE_INFO_PRODUCT_TYPE == nMode){
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d127      	bne.n	8003604 <AssmTxMsg_DeviceInfo+0x64>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x08;
 80035b4:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035b6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	b2d1      	uxtb	r1, r2
 80035be:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035c0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b48      	ldr	r3, [pc, #288]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035c8:	4413      	add	r3, r2
 80035ca:	2208      	movs	r2, #8
 80035cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 8; i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e012      	b.n	80035fc <AssmTxMsg_DeviceInfo+0x5c>
		{ tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tConfig.prodtype[i]; }
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035da:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	b2c8      	uxtb	r0, r1
 80035e2:	4941      	ldr	r1, [pc, #260]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035e4:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 80035e8:	4619      	mov	r1, r3
 80035ea:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <AssmTxMsg_DeviceInfo+0x14c>)
 80035ec:	5c9a      	ldrb	r2, [r3, r2]
 80035ee:	4b3e      	ldr	r3, [pc, #248]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80035f0:	440b      	add	r3, r1
 80035f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 8; i++)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	3301      	adds	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b07      	cmp	r3, #7
 8003600:	d9e9      	bls.n	80035d6 <AssmTxMsg_DeviceInfo+0x36>
	{
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x10;
		for( i = 0; i < 16; i++)
		{ tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tConfig.prodSerial[i]; }
	}
}
 8003602:	e06a      	b.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
	else if(DEVICE_INFO_RESERVE1 == nMode)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d11c      	bne.n	8003644 <AssmTxMsg_DeviceInfo+0xa4>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x01;
 800360a:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800360c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	b2d1      	uxtb	r1, r2
 8003614:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003616:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800361a:	461a      	mov	r2, r3
 800361c:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800361e:	4413      	add	r3, r2
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003628:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	b2d1      	uxtb	r1, r2
 8003630:	4a2d      	ldr	r2, [pc, #180]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003632:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003636:	461a      	mov	r2, r3
 8003638:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800363a:	4413      	add	r3, r2
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003642:	e04a      	b.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
	else if(DEVICE_INFO_RESERVE2 == nMode)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d11c      	bne.n	8003684 <AssmTxMsg_DeviceInfo+0xe4>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x01;
 800364a:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800364c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	b2d1      	uxtb	r1, r2
 8003654:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003656:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800365a:	461a      	mov	r2, r3
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800365e:	4413      	add	r3, r2
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003668:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	b2d1      	uxtb	r1, r2
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003672:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003676:	461a      	mov	r2, r3
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800367a:	4413      	add	r3, r2
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003682:	e02a      	b.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
	else if(DEVICE_INFO_SERIAL_NUM == nMode)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d127      	bne.n	80036da <AssmTxMsg_DeviceInfo+0x13a>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x10;
 800368a:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800368c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	b2d1      	uxtb	r1, r2
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 8003696:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800369a:	461a      	mov	r2, r3
 800369c:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 800369e:	4413      	add	r3, r2
 80036a0:	2210      	movs	r2, #16
 80036a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 16; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e013      	b.n	80036d4 <AssmTxMsg_DeviceInfo+0x134>
		{ tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tConfig.prodSerial[i]; }
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80036b0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	b2c8      	uxtb	r0, r1
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80036ba:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 80036be:	4619      	mov	r1, r3
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <AssmTxMsg_DeviceInfo+0x14c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	7a1a      	ldrb	r2, [r3, #8]
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <AssmTxMsg_DeviceInfo+0x148>)
 80036c8:	440b      	add	r3, r1
 80036ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for( i = 0; i < 16; i++)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	d9e8      	bls.n	80036ac <AssmTxMsg_DeviceInfo+0x10c>
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000570 	.word	0x20000570
 80036ec:	20000030 	.word	0x20000030

080036f0 <DeviceInfo>:

void DeviceInfo(uint8_t nMode)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]

	if(DEVICE_INFO_PRODUCT_TYPE == nMode){
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d113      	bne.n	800372c <DeviceInfo+0x3c>
		for( i = 0; i < 8; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e009      	b.n	800371e <DeviceInfo+0x2e>
		{ tConfig.prodtype[i] = tMsgPkt.RxBuff[4+i]; }
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	4914      	ldr	r1, [pc, #80]	@ (8003764 <DeviceInfo+0x74>)
 8003712:	5c89      	ldrb	r1, [r1, r2]
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <DeviceInfo+0x78>)
 8003716:	54d1      	strb	r1, [r2, r3]
		for( i = 0; i < 8; i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d9f2      	bls.n	800370a <DeviceInfo+0x1a>

		SetCfg_Device_ProcType(tConfig.prodtype);
 8003724:	4810      	ldr	r0, [pc, #64]	@ (8003768 <DeviceInfo+0x78>)
 8003726:	f7fe fbaf 	bl	8001e88 <SetCfg_Device_ProcType>
		for( i = 0; i < 16; i++)
		{ tConfig.prodSerial[i] = tMsgPkt.RxBuff[4+i]; }
		SetCfg_Device_ProcSerial(tConfig.prodSerial);
	}

}
 800372a:	e017      	b.n	800375c <DeviceInfo+0x6c>
	else if(DEVICE_INFO_SERIAL_NUM == nMode)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d114      	bne.n	800375c <DeviceInfo+0x6c>
		for( i = 0; i < 16; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e00b      	b.n	8003750 <DeviceInfo+0x60>
		{ tConfig.prodSerial[i] = tMsgPkt.RxBuff[4+i]; }
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	4909      	ldr	r1, [pc, #36]	@ (8003764 <DeviceInfo+0x74>)
 8003740:	5c89      	ldrb	r1, [r1, r2]
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <DeviceInfo+0x78>)
 8003744:	4413      	add	r3, r2
 8003746:	460a      	mov	r2, r1
 8003748:	721a      	strb	r2, [r3, #8]
		for( i = 0; i < 16; i++)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	3301      	adds	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d9f0      	bls.n	8003738 <DeviceInfo+0x48>
		SetCfg_Device_ProcSerial(tConfig.prodSerial);
 8003756:	4805      	ldr	r0, [pc, #20]	@ (800376c <DeviceInfo+0x7c>)
 8003758:	f7fe fbd3 	bl	8001f02 <SetCfg_Device_ProcSerial>
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000570 	.word	0x20000570
 8003768:	20000030 	.word	0x20000030
 800376c:	20000038 	.word	0x20000038

08003770 <DeviceFirmwareVer>:

void DeviceFirmwareVer(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
	for( i = 0; i < 5; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	71fb      	strb	r3, [r7, #7]
 800377e:	e019      	b.n	80037b4 <DeviceFirmwareVer+0x44>
	{
			 if(0 == i) { tConfig.FirmwareVer[0] = DEFAULT_FIRMWARE_MAJ_VERSION; }
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <DeviceFirmwareVer+0x1e>
 8003786:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <DeviceFirmwareVer+0x58>)
 8003788:	2200      	movs	r2, #0
 800378a:	761a      	strb	r2, [r3, #24]
 800378c:	e00f      	b.n	80037ae <DeviceFirmwareVer+0x3e>
		else if(1 == i) { tConfig.FirmwareVer[1] = DEFAULT_FIRMWARE_MIN_VERSION; }
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d103      	bne.n	800379c <DeviceFirmwareVer+0x2c>
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <DeviceFirmwareVer+0x58>)
 8003796:	2209      	movs	r2, #9
 8003798:	765a      	strb	r2, [r3, #25]
 800379a:	e008      	b.n	80037ae <DeviceFirmwareVer+0x3e>
		else 			{ tConfig.FirmwareVer[i] = tMsgPkt.RxBuff[4+i]; }
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	490a      	ldr	r1, [pc, #40]	@ (80037cc <DeviceFirmwareVer+0x5c>)
 80037a4:	5c89      	ldrb	r1, [r1, r2]
 80037a6:	4a08      	ldr	r2, [pc, #32]	@ (80037c8 <DeviceFirmwareVer+0x58>)
 80037a8:	4413      	add	r3, r2
 80037aa:	460a      	mov	r2, r1
 80037ac:	761a      	strb	r2, [r3, #24]
	for( i = 0; i < 5; i++)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	3301      	adds	r3, #1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d9e2      	bls.n	8003780 <DeviceFirmwareVer+0x10>
	}
	SetCfg_Device_ProcVer(tConfig.FirmwareVer);
 80037ba:	4805      	ldr	r0, [pc, #20]	@ (80037d0 <DeviceFirmwareVer+0x60>)
 80037bc:	f7fe fbde 	bl	8001f7c <SetCfg_Device_ProcVer>
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000030 	.word	0x20000030
 80037cc:	20000570 	.word	0x20000570
 80037d0:	20000048 	.word	0x20000048

080037d4 <RspAssamblyTxMsg>:

void RspAssamblyTxMsg(uint8_t nCMD)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
	UART_TxInit();
 80037de:	f001 fe2d 	bl	800543c <UART_TxInit>
	// HEADER
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;	// STX
 80037e2:	4b9a      	ldr	r3, [pc, #616]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80037e4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	b2d1      	uxtb	r1, r2
 80037ec:	4a97      	ldr	r2, [pc, #604]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80037ee:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b95      	ldr	r3, [pc, #596]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80037f6:	4413      	add	r3, r2
 80037f8:	22c0      	movs	r2, #192	@ 0xc0
 80037fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; 	// ADDR
 80037fe:	4b93      	ldr	r3, [pc, #588]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003800:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	b2d1      	uxtb	r1, r2
 8003808:	4a90      	ldr	r2, [pc, #576]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800380a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800380e:	461a      	mov	r2, r3
 8003810:	4b8e      	ldr	r3, [pc, #568]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003812:	4413      	add	r3, r2
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCMD;
 800381a:	4b8c      	ldr	r3, [pc, #560]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800381c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b2d1      	uxtb	r1, r2
 8003824:	4a89      	ldr	r2, [pc, #548]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003826:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800382a:	461a      	mov	r2, r3
 800382c:	4b87      	ldr	r3, [pc, #540]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800382e:	4413      	add	r3, r2
 8003830:	79fa      	ldrb	r2, [r7, #7]
 8003832:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState; 	// MSG STATE
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003838:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	b2d1      	uxtb	r1, r2
 8003840:	4a82      	ldr	r2, [pc, #520]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003842:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003846:	4619      	mov	r1, r3
 8003848:	4b80      	ldr	r3, [pc, #512]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800384a:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 800384e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003850:	440b      	add	r3, r1
 8003852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	switch (nCMD)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b10      	cmp	r3, #16
 800385a:	dc2b      	bgt.n	80038b4 <RspAssamblyTxMsg+0xe0>
 800385c:	2b00      	cmp	r3, #0
 800385e:	f2c0 82f6 	blt.w	8003e4e <RspAssamblyTxMsg+0x67a>
 8003862:	2b10      	cmp	r3, #16
 8003864:	f200 82f3 	bhi.w	8003e4e <RspAssamblyTxMsg+0x67a>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <RspAssamblyTxMsg+0x9c>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	080038bd 	.word	0x080038bd
 8003874:	0800391f 	.word	0x0800391f
 8003878:	0800393d 	.word	0x0800393d
 800387c:	08003e4f 	.word	0x08003e4f
 8003880:	0800395b 	.word	0x0800395b
 8003884:	08003979 	.word	0x08003979
 8003888:	08003a59 	.word	0x08003a59
 800388c:	08003b2d 	.word	0x08003b2d
 8003890:	08003b85 	.word	0x08003b85
 8003894:	08003bad 	.word	0x08003bad
 8003898:	08003bd5 	.word	0x08003bd5
 800389c:	08003bf3 	.word	0x08003bf3
 80038a0:	08003c11 	.word	0x08003c11
 80038a4:	08003c4d 	.word	0x08003c4d
 80038a8:	08003d3d 	.word	0x08003d3d
 80038ac:	08003df5 	.word	0x08003df5
 80038b0:	08003d9f 	.word	0x08003d9f
 80038b4:	2bf0      	cmp	r3, #240	@ 0xf0
 80038b6:	f000 82ac 	beq.w	8003e12 <RspAssamblyTxMsg+0x63e>
 80038ba:	e2c8      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
	{
		case CMD_BIT_MANUAL_START : { // LENGTH 2 Byte , Device State
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x02;
 80038bc:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038be:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	b2d1      	uxtb	r1, r2
 80038c6:	4a61      	ldr	r2, [pc, #388]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038c8:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b5f      	ldr	r3, [pc, #380]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038d0:	4413      	add	r3, r2
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tSysState.DeviceState >> 8) & 0xFF);
 80038d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 80038da:	8b9b      	ldrh	r3, [r3, #28]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b298      	uxth	r0, r3
 80038e0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038e2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	b2d1      	uxtb	r1, r2
 80038ea:	4a58      	ldr	r2, [pc, #352]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038ec:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80038f0:	4619      	mov	r1, r3
 80038f2:	b2c2      	uxtb	r2, r0
 80038f4:	4b55      	ldr	r3, [pc, #340]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tSysState.DeviceState & 0xFF);
 80038fc:	4b54      	ldr	r3, [pc, #336]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 80038fe:	8b98      	ldrh	r0, [r3, #28]
 8003900:	4b52      	ldr	r3, [pc, #328]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003902:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	b2d1      	uxtb	r1, r2
 800390a:	4a50      	ldr	r2, [pc, #320]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800390c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003910:	4619      	mov	r1, r3
 8003912:	b2c2      	uxtb	r2, r0
 8003914:	4b4d      	ldr	r3, [pc, #308]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003916:	440b      	add	r3, r1
 8003918:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		} break;
 800391c:	e297      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_MEASUER_START	  : { // LENGTH 0, Measurement Start
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800391e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003920:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	b2d1      	uxtb	r1, r2
 8003928:	4a48      	ldr	r2, [pc, #288]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800392a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800392e:	461a      	mov	r2, r3
 8003930:	4b46      	ldr	r3, [pc, #280]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003932:	4413      	add	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		} break;
 800393a:	e288      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_MEASUER_STOP	  : { // LENGTH 0, Measurement Stop
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800393c:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800393e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	b2d1      	uxtb	r1, r2
 8003946:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003948:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800394c:	461a      	mov	r2, r3
 800394e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003950:	4413      	add	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		} break;
 8003958:	e279      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
//			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x34; //52
//			AssmTxMsg_PmMesaureResult();
//		} break;

		case CMD_START_FAN_CLEAN : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 800395a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800395c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	b2d1      	uxtb	r1, r2
 8003964:	4a39      	ldr	r2, [pc, #228]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003966:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800396a:	461a      	mov	r2, r3
 800396c:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800396e:	4413      	add	r3, r2
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003976:	e26a      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_GET_AT_CLEAN_SEC : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning time U32bit
 8003978:	4b35      	ldr	r3, [pc, #212]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 800397a:	7c1b      	ldrb	r3, [r3, #16]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d151      	bne.n	8003a24 <RspAssamblyTxMsg+0x250>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x04;
 8003980:	4b32      	ldr	r3, [pc, #200]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003982:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	b2d1      	uxtb	r1, r2
 800398a:	4a30      	ldr	r2, [pc, #192]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 800398c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003990:	461a      	mov	r2, r3
 8003992:	4b2e      	ldr	r3, [pc, #184]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003994:	4413      	add	r3, r2
 8003996:	2204      	movs	r2, #4
 8003998:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime >> 24) & 0xFF);
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	0e18      	lsrs	r0, r3, #24
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039a4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	b2d1      	uxtb	r1, r2
 80039ac:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039ae:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80039b2:	4619      	mov	r1, r3
 80039b4:	b2c2      	uxtb	r2, r0
 80039b6:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039b8:	440b      	add	r3, r1
 80039ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime >> 16) & 0xFF);
 80039be:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0c18      	lsrs	r0, r3, #16
 80039c4:	4b21      	ldr	r3, [pc, #132]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039c6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	b2d1      	uxtb	r1, r2
 80039ce:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039d0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80039d4:	4619      	mov	r1, r3
 80039d6:	b2c2      	uxtb	r2, r0
 80039d8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039da:	440b      	add	r3, r1
 80039dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime >>  8) & 0xFF);
 80039e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	0a18      	lsrs	r0, r3, #8
 80039e6:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039e8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	b2d1      	uxtb	r1, r2
 80039f0:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039f2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80039f6:	4619      	mov	r1, r3
 80039f8:	b2c2      	uxtb	r2, r0
 80039fa:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 80039fc:	440b      	add	r3, r1
 80039fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleWorkTime      ) & 0xFF);
 8003a02:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <RspAssamblyTxMsg+0x280>)
 8003a04:	6898      	ldr	r0, [r3, #8]
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a08:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	b2d1      	uxtb	r1, r2
 8003a10:	4a0e      	ldr	r2, [pc, #56]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a12:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a16:	4619      	mov	r1, r3
 8003a18:	b2c2      	uxtb	r2, r0
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003a22:	e205      	b.n	8003e30 <RspAssamblyTxMsg+0x65c>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <RspAssamblyTxMsg+0x27c>)
 8003a26:	7c1b      	ldrb	r3, [r3, #16]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	f040 8201 	bne.w	8003e30 <RspAssamblyTxMsg+0x65c>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003a2e:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a30:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	b2d1      	uxtb	r1, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a3a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b02      	ldr	r3, [pc, #8]	@ (8003a4c <RspAssamblyTxMsg+0x278>)
 8003a42:	4413      	add	r3, r2
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003a4a:	e1f1      	b.n	8003e30 <RspAssamblyTxMsg+0x65c>
 8003a4c:	20000570 	.word	0x20000570
 8003a50:	2000028c 	.word	0x2000028c
 8003a54:	200000b4 	.word	0x200000b4

		case CMD_AT_CLEAN_INTVAL : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning Interval U32bit
 8003a58:	4baa      	ldr	r3, [pc, #680]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003a5a:	7c1b      	ldrb	r3, [r3, #16]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d151      	bne.n	8003b04 <RspAssamblyTxMsg+0x330>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x04;
 8003a60:	4ba9      	ldr	r3, [pc, #676]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a62:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	b2d1      	uxtb	r1, r2
 8003a6a:	4aa7      	ldr	r2, [pc, #668]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a6c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a70:	461a      	mov	r2, r3
 8003a72:	4ba5      	ldr	r3, [pc, #660]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a74:	4413      	add	r3, r2
 8003a76:	2204      	movs	r2, #4
 8003a78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval >> 24) & 0xFF);
 8003a7c:	4ba3      	ldr	r3, [pc, #652]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0e18      	lsrs	r0, r3, #24
 8003a82:	4ba1      	ldr	r3, [pc, #644]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a84:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	b2d1      	uxtb	r1, r2
 8003a8c:	4a9e      	ldr	r2, [pc, #632]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a8e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003a92:	4619      	mov	r1, r3
 8003a94:	b2c2      	uxtb	r2, r0
 8003a96:	4b9c      	ldr	r3, [pc, #624]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003a98:	440b      	add	r3, r1
 8003a9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval >> 16) & 0xFF);
 8003a9e:	4b9b      	ldr	r3, [pc, #620]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	0c18      	lsrs	r0, r3, #16
 8003aa4:	4b98      	ldr	r3, [pc, #608]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003aa6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	b2d1      	uxtb	r1, r2
 8003aae:	4a96      	ldr	r2, [pc, #600]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ab0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	b2c2      	uxtb	r2, r0
 8003ab8:	4b93      	ldr	r3, [pc, #588]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003aba:	440b      	add	r3, r1
 8003abc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval >>  8) & 0xFF);
 8003ac0:	4b92      	ldr	r3, [pc, #584]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a18      	lsrs	r0, r3, #8
 8003ac6:	4b90      	ldr	r3, [pc, #576]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ac8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	b2d1      	uxtb	r1, r2
 8003ad0:	4a8d      	ldr	r2, [pc, #564]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ad2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	b2c2      	uxtb	r2, r0
 8003ada:	4b8b      	ldr	r3, [pc, #556]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003adc:	440b      	add	r3, r1
 8003ade:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tFan.CleInterval      ) & 0xFF);
 8003ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8003d0c <RspAssamblyTxMsg+0x538>)
 8003ae4:	68d8      	ldr	r0, [r3, #12]
 8003ae6:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ae8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	b2d1      	uxtb	r1, r2
 8003af0:	4a85      	ldr	r2, [pc, #532]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003af2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003af6:	4619      	mov	r1, r3
 8003af8:	b2c2      	uxtb	r2, r0
 8003afa:	4b83      	ldr	r3, [pc, #524]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003afc:	440b      	add	r3, r1
 8003afe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003b02:	e197      	b.n	8003e34 <RspAssamblyTxMsg+0x660>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003b04:	4b7f      	ldr	r3, [pc, #508]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b06:	7c1b      	ldrb	r3, [r3, #16]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	f040 8193 	bne.w	8003e34 <RspAssamblyTxMsg+0x660>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003b0e:	4b7e      	ldr	r3, [pc, #504]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b10:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	b2d1      	uxtb	r1, r2
 8003b18:	4a7b      	ldr	r2, [pc, #492]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b1a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b79      	ldr	r3, [pc, #484]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b22:	4413      	add	r3, r2
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003b2a:	e183      	b.n	8003e34 <RspAssamblyTxMsg+0x660>

		case CMD_BOUNDARY_VOLT : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Boundary Voltage U16bit
 8003b2c:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b2e:	7c1b      	ldrb	r3, [r3, #16]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d113      	bne.n	8003b5c <RspAssamblyTxMsg+0x388>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x04;
 8003b34:	4b74      	ldr	r3, [pc, #464]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b36:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	b2d1      	uxtb	r1, r2
 8003b3e:	4a72      	ldr	r2, [pc, #456]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b40:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b70      	ldr	r3, [pc, #448]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				AssmTxMsg_GetBoundaryVolt(tSysState.ClientReqSelCh);
 8003b50:	4b6c      	ldr	r3, [pc, #432]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b52:	7bdb      	ldrb	r3, [r3, #15]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fa27 	bl	8002fa8 <AssmTxMsg_GetBoundaryVolt>
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003b5a:	e16d      	b.n	8003e38 <RspAssamblyTxMsg+0x664>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
 8003b5c:	4b69      	ldr	r3, [pc, #420]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b5e:	7c1b      	ldrb	r3, [r3, #16]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f040 8169 	bne.w	8003e38 <RspAssamblyTxMsg+0x664>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003b66:	4b68      	ldr	r3, [pc, #416]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b68:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	b2d1      	uxtb	r1, r2
 8003b70:	4a65      	ldr	r2, [pc, #404]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b72:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003b82:	e159      	b.n	8003e38 <RspAssamblyTxMsg+0x664>

		case CMD_PD_TEST_MODE : {
			if (OFF == tSysState.FlagGetAdcOn) { // LENGTH 0, PD Test Mode OFF
 8003b84:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003b86:	79db      	ldrb	r3, [r3, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8157 	bne.w	8003e3c <RspAssamblyTxMsg+0x668>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b90:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	b2d1      	uxtb	r1, r2
 8003b98:	4a5b      	ldr	r2, [pc, #364]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003b9a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
		}break;
 8003baa:	e147      	b.n	8003e3c <RspAssamblyTxMsg+0x668>

		case CMD_SIPM_TEST_MODE : {
			if (OFF == tSysState.FlagGetAdcOn) { // LENGTH 0, SiPM Test Mode OFF
 8003bac:	4b55      	ldr	r3, [pc, #340]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003bae:	79db      	ldrb	r3, [r3, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 8145 	bne.w	8003e40 <RspAssamblyTxMsg+0x66c>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003bb6:	4b54      	ldr	r3, [pc, #336]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bb8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	b2d1      	uxtb	r1, r2
 8003bc0:	4a51      	ldr	r2, [pc, #324]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bc2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
		}break;
 8003bd2:	e135      	b.n	8003e40 <RspAssamblyTxMsg+0x66c>

		case CMD_SLEEP_MODE : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // LENGTH 0, Sleep
 8003bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bd6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	b2d1      	uxtb	r1, r2
 8003bde:	4a4a      	ldr	r2, [pc, #296]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003be0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b48      	ldr	r3, [pc, #288]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003be8:	4413      	add	r3, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003bf0:	e12d      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_WAKE_UP : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // LENGTH 0, Wake up
 8003bf2:	4b45      	ldr	r3, [pc, #276]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bf4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	b2d1      	uxtb	r1, r2
 8003bfc:	4a42      	ldr	r2, [pc, #264]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003bfe:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b40      	ldr	r3, [pc, #256]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c06:	4413      	add	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003c0e:	e11e      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_DEVICE_INFO : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning Interval U32bit
 8003c10:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c12:	7c1b      	ldrb	r3, [r3, #16]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <RspAssamblyTxMsg+0x450>
				AssmTxMsg_DeviceInfo(tSysState.ClientReqDevInfo);
 8003c18:	4b3a      	ldr	r3, [pc, #232]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c1a:	7b9b      	ldrb	r3, [r3, #14]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fcbf 	bl	80035a0 <AssmTxMsg_DeviceInfo>
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003c22:	e10f      	b.n	8003e44 <RspAssamblyTxMsg+0x670>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003c24:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c26:	7c1b      	ldrb	r3, [r3, #16]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	f040 810b 	bne.w	8003e44 <RspAssamblyTxMsg+0x670>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003c2e:	4b36      	ldr	r3, [pc, #216]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c30:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	b2d1      	uxtb	r1, r2
 8003c38:	4a33      	ldr	r2, [pc, #204]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c3a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c42:	4413      	add	r3, r2
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003c4a:	e0fb      	b.n	8003e44 <RspAssamblyTxMsg+0x670>

		case CMD_DEVICE_VER : {
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Auto Cleaning Interval U32bit
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <RspAssamblyTxMsg+0x530>)
 8003c4e:	7c1b      	ldrb	r3, [r3, #16]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d15f      	bne.n	8003d14 <RspAssamblyTxMsg+0x540>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x05;
 8003c54:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c56:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	b2d1      	uxtb	r1, r2
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c60:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b28      	ldr	r3, [pc, #160]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c68:	4413      	add	r3, r2
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = DEFAULT_FIRMWARE_MAJ_VERSION; //(uint8_t)(tConfig.FirmwareVer[0]);
 8003c70:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c72:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	b2d1      	uxtb	r1, r2
 8003c7a:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c7c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c80:	461a      	mov	r2, r3
 8003c82:	4b21      	ldr	r3, [pc, #132]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c84:	4413      	add	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = DEFAULT_FIRMWARE_MIN_VERSION; //(uint8_t)(tConfig.FirmwareVer[1]);
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c8e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	b2d1      	uxtb	r1, r2
 8003c96:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003c98:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	2209      	movs	r2, #9
 8003ca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tConfig.FirmwareVer[2]);
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003caa:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	b2d1      	uxtb	r1, r2
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cb4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <RspAssamblyTxMsg+0x53c>)
 8003cbc:	7e9a      	ldrb	r2, [r3, #26]
 8003cbe:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tConfig.FirmwareVer[3]);
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cc8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	b2d1      	uxtb	r1, r2
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cd2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <RspAssamblyTxMsg+0x53c>)
 8003cda:	7eda      	ldrb	r2, [r3, #27]
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)(tConfig.FirmwareVer[4]);
 8003ce4:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003ce6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	b2d1      	uxtb	r1, r2
 8003cee:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cf0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <RspAssamblyTxMsg+0x53c>)
 8003cf8:	7f1a      	ldrb	r2, [r3, #28]
 8003cfa:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <RspAssamblyTxMsg+0x534>)
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003d02:	e0a1      	b.n	8003e48 <RspAssamblyTxMsg+0x674>
 8003d04:	2000028c 	.word	0x2000028c
 8003d08:	20000570 	.word	0x20000570
 8003d0c:	200000b4 	.word	0x200000b4
 8003d10:	20000030 	.word	0x20000030
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Read Measurement Value
 8003d14:	4b65      	ldr	r3, [pc, #404]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003d16:	7c1b      	ldrb	r3, [r3, #16]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f040 8095 	bne.w	8003e48 <RspAssamblyTxMsg+0x674>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003d1e:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d20:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	b2d1      	uxtb	r1, r2
 8003d28:	4a61      	ldr	r2, [pc, #388]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d2a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d32:	4413      	add	r3, r2
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003d3a:	e085      	b.n	8003e48 <RspAssamblyTxMsg+0x674>

		case CMD_DEVICE_STATE : {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x02;
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d3e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	b2d1      	uxtb	r1, r2
 8003d46:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d48:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b58      	ldr	r3, [pc, #352]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d50:	4413      	add	r3, r2
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tSysState.DeviceState >>  8) & 0xFF);
 8003d58:	4b54      	ldr	r3, [pc, #336]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003d5a:	8b9b      	ldrh	r3, [r3, #28]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b298      	uxth	r0, r3
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d62:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	b2d1      	uxtb	r1, r2
 8003d6a:	4a51      	ldr	r2, [pc, #324]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d6c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d70:	4619      	mov	r1, r3
 8003d72:	b2c2      	uxtb	r2, r0
 8003d74:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)((tSysState.DeviceState      ) & 0xFF);
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003d7e:	8b98      	ldrh	r0, [r3, #28]
 8003d80:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d82:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	b2d1      	uxtb	r1, r2
 8003d8a:	4a49      	ldr	r2, [pc, #292]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d8c:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003d90:	4619      	mov	r1, r3
 8003d92:	b2c2      	uxtb	r2, r0
 8003d94:	4b46      	ldr	r3, [pc, #280]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003d9c:	e057      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_SET_CORRECTION_VAL :
		{
			if (CLIENT_REQ_GET == tSysState.ClientReqType) { // LENGTH 4, Get Boundary Voltage U16bit
 8003d9e:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003da0:	7c1b      	ldrb	r3, [r3, #16]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d113      	bne.n	8003dce <RspAssamblyTxMsg+0x5fa>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x05;
 8003da6:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003da8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	b2d1      	uxtb	r1, r2
 8003db0:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003db2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

				AssmTxMsg_GetAdjustCal(tSysState.ClientReqSelCh);
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003dc4:	7bdb      	ldrb	r3, [r3, #15]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff faf0 	bl	80033ac <AssmTxMsg_GetAdjustCal>
			}
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
			}
		}break;
 8003dcc:	e03e      	b.n	8003e4c <RspAssamblyTxMsg+0x678>
			else if (CLIENT_REQ_SET == tSysState.ClientReqType) { // LENGTH 0, Set Boundary Voltage U16bit
 8003dce:	4b37      	ldr	r3, [pc, #220]	@ (8003eac <RspAssamblyTxMsg+0x6d8>)
 8003dd0:	7c1b      	ldrb	r3, [r3, #16]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d13a      	bne.n	8003e4c <RspAssamblyTxMsg+0x678>
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003dd6:	4b36      	ldr	r3, [pc, #216]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003dd8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	b2d1      	uxtb	r1, r2
 8003de0:	4a33      	ldr	r2, [pc, #204]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003de2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003dea:	4413      	add	r3, r2
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003df2:	e02b      	b.n	8003e4c <RspAssamblyTxMsg+0x678>

		case CMD_SOFT_RESET: {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003df6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	b2d1      	uxtb	r1, r2
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e00:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003e10:	e01d      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>

		case CMD_SET_FIRMWARE_DOWNLOAD: {
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00;
 8003e12:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e14:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	b2d1      	uxtb	r1, r2
 8003e1c:	4a24      	ldr	r2, [pc, #144]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e1e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e26:	4413      	add	r3, r2
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		}break;
 8003e2e:	e00e      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e30:	bf00      	nop
 8003e32:	e00c      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e34:	bf00      	nop
 8003e36:	e00a      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e38:	bf00      	nop
 8003e3a:	e008      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e3c:	bf00      	nop
 8003e3e:	e006      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e40:	bf00      	nop
 8003e42:	e004      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <RspAssamblyTxMsg+0x67a>
		}break;
 8003e4c:	bf00      	nop
	}

	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum((uint8_t *)tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt); 	// CHECKSUM
 8003e4e:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e50:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8003e54:	4b16      	ldr	r3, [pc, #88]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e56:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	b2c8      	uxtb	r0, r1
 8003e5e:	4914      	ldr	r1, [pc, #80]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e60:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8003e64:	461c      	mov	r4, r3
 8003e66:	4611      	mov	r1, r2
 8003e68:	4812      	ldr	r0, [pc, #72]	@ (8003eb4 <RspAssamblyTxMsg+0x6e0>)
 8003e6a:	f001 fef9 	bl	8005c60 <UART_Chksum>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e74:	4423      	add	r3, r4
 8003e76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	UART_StuffAssambly();
 8003e7a:	f001 fe33 	bl	8005ae4 <UART_StuffAssambly>
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX; 	// ETX
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e80:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	b2d1      	uxtb	r1, r2
 8003e88:	4a09      	ldr	r2, [pc, #36]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e8a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e92:	4413      	add	r3, r2
 8003e94:	22c2      	movs	r2, #194	@ 0xc2
 8003e96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	tMsgPkt.FlagTxPktOn = ON;
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <RspAssamblyTxMsg+0x6dc>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000028c 	.word	0x2000028c
 8003eb0:	20000570 	.word	0x20000570
 8003eb4:	200005f0 	.word	0x200005f0

08003eb8 <Manual_GetAdcMsg>:

void Manual_GetAdcMsg(void)
{
 8003eb8:	b598      	push	{r3, r4, r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	if (ON == tSysState.FlagGetAdcOn)
 8003ebc:	4bb9      	ldr	r3, [pc, #740]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003ebe:	79db      	ldrb	r3, [r3, #7]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 80ef 	bne.w	80040a4 <Manual_GetAdcMsg+0x1ec>
	{
		if (OFF == tSysState.FlagLoopOn)
 8003ec6:	4bb7      	ldr	r3, [pc, #732]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003ec8:	7a1b      	ldrb	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <Manual_GetAdcMsg+0x24>
		{
			UART_TxInit();
 8003ece:	f001 fab5 	bl	800543c <UART_TxInit>
			WaitTime_Init();
 8003ed2:	f7fe fb6d 	bl	80025b0 <WaitTime_Init>
			tSysState.FlagLoopOn = ON;
 8003ed6:	4bb3      	ldr	r3, [pc, #716]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	721a      	strb	r2, [r3, #8]
		}

		//if ( TRUE == WaitHoldTime_mSec(ON, UART_MSG_SEND_ADC_TIME) )
		if(ON == m_FlagAdcSendOn)
 8003edc:	4bb2      	ldr	r3, [pc, #712]	@ (80041a8 <Manual_GetAdcMsg+0x2f0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 80cf 	bne.w	8004084 <Manual_GetAdcMsg+0x1cc>
		{
			//Check Get ADC

			// HEADER
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 8003ee6:	4bb1      	ldr	r3, [pc, #708]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003ee8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	b2d1      	uxtb	r1, r2
 8003ef0:	4aae      	ldr	r2, [pc, #696]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003ef2:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4bac      	ldr	r3, [pc, #688]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003efa:	4413      	add	r3, r2
 8003efc:	22c0      	movs	r2, #192	@ 0xc0
 8003efe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 8003f02:	4baa      	ldr	r3, [pc, #680]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f04:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	b2d1      	uxtb	r1, r2
 8003f0c:	4aa7      	ldr	r2, [pc, #668]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f0e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f12:	461a      	mov	r2, r3
 8003f14:	4ba5      	ldr	r3, [pc, #660]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f16:	4413      	add	r3, r2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tSysState.SelGetAdcCh;
 8003f1e:	4ba3      	ldr	r3, [pc, #652]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f20:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	b2d1      	uxtb	r1, r2
 8003f28:	4aa0      	ldr	r2, [pc, #640]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f2a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4b9c      	ldr	r3, [pc, #624]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003f32:	799a      	ldrb	r2, [r3, #6]
 8003f34:	4b9d      	ldr	r3, [pc, #628]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // MSG STATE
 8003f3c:	4b9b      	ldr	r3, [pc, #620]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f3e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	b2d1      	uxtb	r1, r2
 8003f46:	4a99      	ldr	r2, [pc, #612]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f48:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b97      	ldr	r3, [pc, #604]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f50:	4413      	add	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x02; // Length
 8003f58:	4b94      	ldr	r3, [pc, #592]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f5a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	b2d1      	uxtb	r1, r2
 8003f62:	4a92      	ldr	r2, [pc, #584]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f64:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b90      	ldr	r3, [pc, #576]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			if(ADC_GET_PD_CH == tSysState.SelGetAdcCh){
 8003f74:	4b8b      	ldr	r3, [pc, #556]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003f76:	799b      	ldrb	r3, [r3, #6]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d125      	bne.n	8003fc8 <Manual_GetAdcMsg+0x110>
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tPdCtrl.CurrAdcVal >> 8) & 0xFF);
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tPdCtrl.CurrAdcVal 	) & 0xFF);
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckPDAdVal >> 8) & 0xFF);
 8003f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80041b0 <Manual_GetAdcMsg+0x2f8>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	b298      	uxth	r0, r3
 8003f84:	4b89      	ldr	r3, [pc, #548]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f86:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	b2d1      	uxtb	r1, r2
 8003f8e:	4a87      	ldr	r2, [pc, #540]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f90:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003f94:	4619      	mov	r1, r3
 8003f96:	b2c2      	uxtb	r2, r0
 8003f98:	4b84      	ldr	r3, [pc, #528]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckPDAdVal) 	 & 0xFF);
 8003fa0:	4b83      	ldr	r3, [pc, #524]	@ (80041b0 <Manual_GetAdcMsg+0x2f8>)
 8003fa2:	8818      	ldrh	r0, [r3, #0]
 8003fa4:	4b81      	ldr	r3, [pc, #516]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fa6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	b2d1      	uxtb	r1, r2
 8003fae:	4a7f      	ldr	r2, [pc, #508]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fb0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	b2c2      	uxtb	r2, r0
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fba:	440b      	add	r3, r1
 8003fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				m_FlagDectPeckOn = OFF;
 8003fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <Manual_GetAdcMsg+0x2fc>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e028      	b.n	800401a <Manual_GetAdcMsg+0x162>
			}
			else if(ADC_GET_SiPM_CH == tSysState.SelGetAdcCh){
 8003fc8:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8003fca:	799b      	ldrb	r3, [r3, #6]
 8003fcc:	2b09      	cmp	r3, #9
 8003fce:	d124      	bne.n	800401a <Manual_GetAdcMsg+0x162>
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tSiPmCtrl.CurrAdcVal >> 8) & 0xFF);
				//tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (tSiPmCtrl.CurrAdcVal) 		& 0xFF);
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckSiPMAdVal >> 8)  & 0xFF);
 8003fd0:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <Manual_GetAdcMsg+0x300>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b298      	uxth	r0, r3
 8003fd8:	4b74      	ldr	r3, [pc, #464]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fda:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	b2d1      	uxtb	r1, r2
 8003fe2:	4a72      	ldr	r2, [pc, #456]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fe4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8003fe8:	4619      	mov	r1, r3
 8003fea:	b2c2      	uxtb	r2, r0
 8003fec:	4b6f      	ldr	r3, [pc, #444]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003fee:	440b      	add	r3, r1
 8003ff0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = (uint8_t)( (m_PeckSiPMAdVal) 	 	& 0xFF);
 8003ff4:	4b70      	ldr	r3, [pc, #448]	@ (80041b8 <Manual_GetAdcMsg+0x300>)
 8003ff6:	8818      	ldrh	r0, [r3, #0]
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8003ffa:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	b2d1      	uxtb	r1, r2
 8004002:	4a6a      	ldr	r2, [pc, #424]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004004:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8004008:	4619      	mov	r1, r3
 800400a:	b2c2      	uxtb	r2, r0
 800400c:	4b67      	ldr	r3, [pc, #412]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800400e:	440b      	add	r3, r1
 8004010:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				m_FlagDectPeckOn2 = OFF;
 8004014:	4b69      	ldr	r3, [pc, #420]	@ (80041bc <Manual_GetAdcMsg+0x304>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
			}

			//FOOTER
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum((uint8_t *)tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 800401a:	4b64      	ldr	r3, [pc, #400]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800401c:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8004020:	4b62      	ldr	r3, [pc, #392]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004022:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	b2c8      	uxtb	r0, r1
 800402a:	4960      	ldr	r1, [pc, #384]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800402c:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8004030:	461c      	mov	r4, r3
 8004032:	4611      	mov	r1, r2
 8004034:	4862      	ldr	r0, [pc, #392]	@ (80041c0 <Manual_GetAdcMsg+0x308>)
 8004036:	f001 fe13 	bl	8005c60 <UART_Chksum>
 800403a:	4603      	mov	r3, r0
 800403c:	461a      	mov	r2, r3
 800403e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004040:	4423      	add	r3, r4
 8004042:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			UART_StuffAssambly();
 8004046:	f001 fd4d 	bl	8005ae4 <UART_StuffAssambly>
			tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 800404a:	4b58      	ldr	r3, [pc, #352]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800404c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	b2d1      	uxtb	r1, r2
 8004054:	4a55      	ldr	r2, [pc, #340]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004056:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800405a:	461a      	mov	r2, r3
 800405c:	4b53      	ldr	r3, [pc, #332]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800405e:	4413      	add	r3, r2
 8004060:	22c2      	movs	r2, #194	@ 0xc2
 8004062:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

			tMsgPkt.FlagTxPktOn = ON;
 8004066:	4b51      	ldr	r3, [pc, #324]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			tPdCtrl.ChkCount = 0;
 800406e:	4b55      	ldr	r3, [pc, #340]	@ (80041c4 <Manual_GetAdcMsg+0x30c>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
			WaitTime_Init();
 8004074:	f7fe fa9c 	bl	80025b0 <WaitTime_Init>
			Calc_Init();
 8004078:	f7fd fbfe 	bl	8001878 <Calc_Init>


			m_FlagAdcSendOn = OFF;
 800407c:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <Manual_GetAdcMsg+0x2f0>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
		tMsgPkt.FlagTxPktOn = ON;
		WaitTime_Init();
		tPdCtrl.ChkCount = 0;
		m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
	}
}
 8004082:	e08c      	b.n	800419e <Manual_GetAdcMsg+0x2e6>
			if(ADC_GET_PD_CH == tSysState.SelGetAdcCh){ RngOfPdAdcSamplingVal(tPdCtrl.CurrAdcVal); 	 	 }
 8004084:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 8004086:	799b      	ldrb	r3, [r3, #6]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d105      	bne.n	8004098 <Manual_GetAdcMsg+0x1e0>
 800408c:	4b4d      	ldr	r3, [pc, #308]	@ (80041c4 <Manual_GetAdcMsg+0x30c>)
 800408e:	88db      	ldrh	r3, [r3, #6]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fa8d 	bl	80045b0 <RngOfPdAdcSamplingVal>
}
 8004096:	e082      	b.n	800419e <Manual_GetAdcMsg+0x2e6>
			else 									  {	RngOfSiPmAdcSamplingVal(tSiPmCtrl.CurrAdcVal);	 }
 8004098:	4b4b      	ldr	r3, [pc, #300]	@ (80041c8 <Manual_GetAdcMsg+0x310>)
 800409a:	88db      	ldrh	r3, [r3, #6]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb57 	bl	8004750 <RngOfSiPmAdcSamplingVal>
}
 80040a2:	e07c      	b.n	800419e <Manual_GetAdcMsg+0x2e6>
		UART_TxInit();
 80040a4:	f001 f9ca 	bl	800543c <UART_TxInit>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 80040a8:	4b40      	ldr	r3, [pc, #256]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040aa:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	b2d1      	uxtb	r1, r2
 80040b2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040b4:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040bc:	4413      	add	r3, r2
 80040be:	22c0      	movs	r2, #192	@ 0xc0
 80040c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // ADDR
 80040c4:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040c6:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	b2d1      	uxtb	r1, r2
 80040ce:	4a37      	ldr	r2, [pc, #220]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040d0:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b35      	ldr	r3, [pc, #212]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040d8:	4413      	add	r3, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tSysState.SelGetAdcCh;
 80040e0:	4b32      	ldr	r3, [pc, #200]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040e2:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	b2d1      	uxtb	r1, r2
 80040ea:	4a30      	ldr	r2, [pc, #192]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040ec:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80040f0:	4619      	mov	r1, r3
 80040f2:	4b2c      	ldr	r3, [pc, #176]	@ (80041a4 <Manual_GetAdcMsg+0x2ec>)
 80040f4:	799a      	ldrb	r2, [r3, #6]
 80040f6:	4b2d      	ldr	r3, [pc, #180]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 80040f8:	440b      	add	r3, r1
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState; // MSG STATE
 80040fe:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004100:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	b2d1      	uxtb	r1, r2
 8004108:	4a28      	ldr	r2, [pc, #160]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800410a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800410e:	4619      	mov	r1, r3
 8004110:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004112:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 8004116:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004118:	440b      	add	r3, r1
 800411a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = 0x00; // Length
 800411e:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004120:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	b2d1      	uxtb	r1, r2
 8004128:	4a20      	ldr	r2, [pc, #128]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800412a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800412e:	461a      	mov	r2, r3
 8004130:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004132:	4413      	add	r3, r2
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = UART_Chksum((uint8_t *)tMsgPkt.Txbuff, tMsgPkt.TxMsgCnt);
 800413a:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800413c:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004142:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	b2c8      	uxtb	r0, r1
 800414a:	4918      	ldr	r1, [pc, #96]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800414c:	f881 0102 	strb.w	r0, [r1, #258]	@ 0x102
 8004150:	461c      	mov	r4, r3
 8004152:	4611      	mov	r1, r2
 8004154:	481a      	ldr	r0, [pc, #104]	@ (80041c0 <Manual_GetAdcMsg+0x308>)
 8004156:	f001 fd83 	bl	8005c60 <UART_Chksum>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004160:	4423      	add	r3, r4
 8004162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		UART_StuffAssambly();
 8004166:	f001 fcbd 	bl	8005ae4 <UART_StuffAssambly>
		tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800416c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	b2d1      	uxtb	r1, r2
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004176:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800417a:	461a      	mov	r2, r3
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 800417e:	4413      	add	r3, r2
 8004180:	22c2      	movs	r2, #194	@ 0xc2
 8004182:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		tMsgPkt.FlagTxPktOn = ON;
 8004186:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <Manual_GetAdcMsg+0x2f4>)
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
		WaitTime_Init();
 800418e:	f7fe fa0f 	bl	80025b0 <WaitTime_Init>
		tPdCtrl.ChkCount = 0;
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <Manual_GetAdcMsg+0x30c>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
		m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <Manual_GetAdcMsg+0x314>)
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	701a      	strb	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	bd98      	pop	{r3, r4, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	2000028c 	.word	0x2000028c
 80041a8:	200002e0 	.word	0x200002e0
 80041ac:	20000570 	.word	0x20000570
 80041b0:	200002da 	.word	0x200002da
 80041b4:	200002de 	.word	0x200002de
 80041b8:	200002dc 	.word	0x200002dc
 80041bc:	200002df 	.word	0x200002df
 80041c0:	200005f0 	.word	0x200005f0
 80041c4:	20000074 	.word	0x20000074
 80041c8:	200000a4 	.word	0x200000a4
 80041cc:	200002d5 	.word	0x200002d5

080041d0 <PostMessage_Proc>:

void PostMessage_Proc(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
	if(ON == tMsgPkt.FlagRxPktOn)
 80041d4:	4bb3      	ldr	r3, [pc, #716]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80041d6:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80041da:	2b01      	cmp	r3, #1
 80041dc:	f040 81c4 	bne.w	8004568 <PostMessage_Proc+0x398>
	{
		switch(tMsgPkt.Cmd)
 80041e0:	4bb0      	ldr	r3, [pc, #704]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80041e2:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	dc2a      	bgt.n	8004240 <PostMessage_Proc+0x70>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f2c0 81b6 	blt.w	800455c <PostMessage_Proc+0x38c>
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	f200 81b3 	bhi.w	800455c <PostMessage_Proc+0x38c>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <PostMessage_Proc+0x2c>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004257 	.word	0x08004257
 8004204:	08004275 	.word	0x08004275
 8004208:	0800429d 	.word	0x0800429d
 800420c:	080042af 	.word	0x080042af
 8004210:	080042b7 	.word	0x080042b7
 8004214:	080042cb 	.word	0x080042cb
 8004218:	0800433b 	.word	0x0800433b
 800421c:	08004383 	.word	0x08004383
 8004220:	080043bd 	.word	0x080043bd
 8004224:	080043f7 	.word	0x080043f7
 8004228:	0800440b 	.word	0x0800440b
 800422c:	0800441f 	.word	0x0800441f
 8004230:	08004471 	.word	0x08004471
 8004234:	080044b5 	.word	0x080044b5
 8004238:	08004533 	.word	0x08004533
 800423c:	080044d3 	.word	0x080044d3
 8004240:	2bf0      	cmp	r3, #240	@ 0xf0
 8004242:	f000 816a 	beq.w	800451a <PostMessage_Proc+0x34a>
 8004246:	e189      	b.n	800455c <PostMessage_Proc+0x38c>
		{
			case CMD_BIT_MANUAL_START :
			{
				tSysState.FlagBitChkOn = ON;
 8004248:	4b97      	ldr	r3, [pc, #604]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800424a:	2201      	movs	r2, #1
 800424c:	749a      	strb	r2, [r3, #18]
				m_SysProcSeq = SYS_SEQ_IDLE;
 800424e:	4b97      	ldr	r3, [pc, #604]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
			}break;
 8004254:	e182      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_MEASUER_START :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004256:	4b93      	ldr	r3, [pc, #588]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004258:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fab9 	bl	80037d4 <RspAssamblyTxMsg>
				Measure_Start();
 8004262:	f7fe fe2d 	bl	8002ec0 <Measure_Start>
				tSysState.FlagOperModeOn = ON;
 8004266:	4b90      	ldr	r3, [pc, #576]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004268:	2201      	movs	r2, #1
 800426a:	72da      	strb	r2, [r3, #11]
				m_SysProcSeq = SYS_SEQ_OPRATION_MODE;
 800426c:	4b8f      	ldr	r3, [pc, #572]	@ (80044ac <PostMessage_Proc+0x2dc>)
 800426e:	2250      	movs	r2, #80	@ 0x50
 8004270:	701a      	strb	r2, [r3, #0]
 			}break;
 8004272:	e173      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_MEASUER_STOP :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004274:	4b8b      	ldr	r3, [pc, #556]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004276:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff faaa 	bl	80037d4 <RspAssamblyTxMsg>
				Measure_Stop();
 8004280:	f7fe fe58 	bl	8002f34 <Measure_Stop>
				tSysState.FlagOperModeOn = OFF;
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004286:	2200      	movs	r2, #0
 8004288:	72da      	strb	r2, [r3, #11]
				SetCfg_CurrentFanUseTime(tFan.CleWorkTime);
 800428a:	4b89      	ldr	r3, [pc, #548]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd fdd2 	bl	8001e38 <SetCfg_CurrentFanUseTime>
				m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 8004294:	4b85      	ldr	r3, [pc, #532]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004296:	2240      	movs	r2, #64	@ 0x40
 8004298:	701a      	strb	r2, [r3, #0]
 			}break;
 800429a:	e15f      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_MEASUER_READ_VAL :
			{
				Measure_Start();
 800429c:	f7fe fe10 	bl	8002ec0 <Measure_Start>
				tSysState.FlagSendPmResultOn = ON;
 80042a0:	4b81      	ldr	r3, [pc, #516]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	729a      	strb	r2, [r3, #10]
				m_SysProcSeq = SYS_SEQ_OPRATION_MODE;
 80042a6:	4b81      	ldr	r3, [pc, #516]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80042a8:	2250      	movs	r2, #80	@ 0x50
 80042aa:	701a      	strb	r2, [r3, #0]
			}break;
 80042ac:	e156      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_START_FAN_CLEAN :
			{
				m_SysProcSeq = SYS_SEQ_MANUAL_FAN_CLEAN_MODE;
 80042ae:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80042b0:	2264      	movs	r2, #100	@ 0x64
 80042b2:	701a      	strb	r2, [r3, #0]
			}break;
 80042b4:	e152      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_GET_AT_CLEAN_SEC :
			{
				tSysState.ClientReqType = CLIENT_REQ_GET;
 80042b6:	4b7c      	ldr	r3, [pc, #496]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	741a      	strb	r2, [r3, #16]
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 80042bc:	4b79      	ldr	r3, [pc, #484]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042be:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fa86 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 80042c8:	e148      	b.n	800455c <PostMessage_Proc+0x38c>


			case CMD_AT_CLEAN_INTVAL :
			{
				if (0x01 == tMsgPkt.Leng) {tSysState.ClientReqType = CLIENT_REQ_GET;}
 80042ca:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042cc:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <PostMessage_Proc+0x10a>
 80042d4:	4b74      	ldr	r3, [pc, #464]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	741a      	strb	r2, [r3, #16]
				if (0x05 == tMsgPkt.Leng)
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042dc:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d123      	bne.n	800432c <PostMessage_Proc+0x15c>
				{
					tSysState.ClientReqType = CLIENT_REQ_SET;
 80042e4:	4b70      	ldr	r3, [pc, #448]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80042e6:	2202      	movs	r2, #2
 80042e8:	741a      	strb	r2, [r3, #16]

					tFan.CleInterval  = (uint32_t)( tMsgPkt.RxBuff[5] << 24);
 80042ea:	4b6e      	ldr	r3, [pc, #440]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042ec:	795b      	ldrb	r3, [r3, #5]
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	4a6f      	ldr	r2, [pc, #444]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 80042f2:	60d3      	str	r3, [r2, #12]
					tFan.CleInterval |= (uint32_t)( tMsgPkt.RxBuff[6] << 16);
 80042f4:	4b6e      	ldr	r3, [pc, #440]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80042fa:	799b      	ldrb	r3, [r3, #6]
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	4313      	orrs	r3, r2
 8004300:	4a6b      	ldr	r2, [pc, #428]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004302:	60d3      	str	r3, [r2, #12]
					tFan.CleInterval |= (uint32_t)( tMsgPkt.RxBuff[7] << 8);
 8004304:	4b6a      	ldr	r3, [pc, #424]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4b66      	ldr	r3, [pc, #408]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800430a:	79db      	ldrb	r3, [r3, #7]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4313      	orrs	r3, r2
 8004310:	4a67      	ldr	r2, [pc, #412]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004312:	60d3      	str	r3, [r2, #12]
					tFan.CleInterval |= (uint32_t)( tMsgPkt.RxBuff[8] );
 8004314:	4b66      	ldr	r3, [pc, #408]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a62      	ldr	r2, [pc, #392]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800431a:	7a12      	ldrb	r2, [r2, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	4a64      	ldr	r2, [pc, #400]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004320:	60d3      	str	r3, [r2, #12]

					SetCfg_CurrentFanInterValTime(tFan.CleInterval);
 8004322:	4b63      	ldr	r3, [pc, #396]	@ (80044b0 <PostMessage_Proc+0x2e0>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fd9a 	bl	8001e60 <SetCfg_CurrentFanInterValTime>
				}

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800432c:	4b5d      	ldr	r3, [pc, #372]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800432e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fa4e 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 8004338:	e110      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_BOUNDARY_VOLT :
			{
				if (0x02 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET; tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5]; }
 800433a:	4b5a      	ldr	r3, [pc, #360]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800433c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004340:	2b02      	cmp	r3, #2
 8004342:	d106      	bne.n	8004352 <PostMessage_Proc+0x182>
 8004344:	4b58      	ldr	r3, [pc, #352]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004346:	2201      	movs	r2, #1
 8004348:	741a      	strb	r2, [r3, #16]
 800434a:	4b56      	ldr	r3, [pc, #344]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800434c:	795a      	ldrb	r2, [r3, #5]
 800434e:	4b56      	ldr	r3, [pc, #344]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004350:	73da      	strb	r2, [r3, #15]
				if (0x04 == tMsgPkt.Leng)
 8004352:	4b54      	ldr	r3, [pc, #336]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004354:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004358:	2b04      	cmp	r3, #4
 800435a:	d10b      	bne.n	8004374 <PostMessage_Proc+0x1a4>
				{
					tSysState.ClientReqType = CLIENT_REQ_SET;
 800435c:	4b52      	ldr	r3, [pc, #328]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800435e:	2202      	movs	r2, #2
 8004360:	741a      	strb	r2, [r3, #16]
					tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5];
 8004362:	4b50      	ldr	r3, [pc, #320]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004364:	795a      	ldrb	r2, [r3, #5]
 8004366:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004368:	73da      	strb	r2, [r3, #15]

					SetBoundaryVolt(tSysState.ClientReqSelCh);
 800436a:	4b4f      	ldr	r3, [pc, #316]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800436c:	7bdb      	ldrb	r3, [r3, #15]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe ff52 	bl	8003218 <SetBoundaryVolt>
				}

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004374:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004376:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fa2a 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 8004380:	e0ec      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_PD_TEST_MODE :
			{
				if(SYS_SEQ_OPRATION_MODE != m_SysProcSeq)
 8004382:	4b4a      	ldr	r3, [pc, #296]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b50      	cmp	r3, #80	@ 0x50
 8004388:	f000 80e5 	beq.w	8004556 <PostMessage_Proc+0x386>
				{
					if(ON == tMsgPkt.RxBuff[5]) 	{ Measure_Start(); FAN_Ctrl(LO, ON);  }
 800438c:	4b45      	ldr	r3, [pc, #276]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800438e:	795b      	ldrb	r3, [r3, #5]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <PostMessage_Proc+0x1d2>
 8004394:	f7fe fd94 	bl	8002ec0 <Measure_Start>
 8004398:	2101      	movs	r1, #1
 800439a:	2000      	movs	r0, #0
 800439c:	f7fd f9d6 	bl	800174c <FAN_Ctrl>
 80043a0:	e005      	b.n	80043ae <PostMessage_Proc+0x1de>
					else							{ Measure_Stop();  FAN_Ctrl(LO, OFF); }
 80043a2:	f7fe fdc7 	bl	8002f34 <Measure_Stop>
 80043a6:	2100      	movs	r1, #0
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fd f9cf 	bl	800174c <FAN_Ctrl>

					tSysState.SelGetAdcCh = ADC_GET_PD_CH;
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80043b0:	2208      	movs	r2, #8
 80043b2:	719a      	strb	r2, [r3, #6]
					m_SysProcSeq = SYS_SEQ_GET_ADC_TEST_MODE;
 80043b4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80043b6:	2270      	movs	r2, #112	@ 0x70
 80043b8:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80043ba:	e0cc      	b.n	8004556 <PostMessage_Proc+0x386>

			case CMD_SIPM_TEST_MODE :
			{
				if(SYS_SEQ_OPRATION_MODE != m_SysProcSeq)
 80043bc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	f000 80ca 	beq.w	800455a <PostMessage_Proc+0x38a>
				{
					if(ON == tMsgPkt.RxBuff[5])  	{ Measure_Start();  FAN_Ctrl(LO, ON);  }
 80043c6:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80043c8:	795b      	ldrb	r3, [r3, #5]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d106      	bne.n	80043dc <PostMessage_Proc+0x20c>
 80043ce:	f7fe fd77 	bl	8002ec0 <Measure_Start>
 80043d2:	2101      	movs	r1, #1
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7fd f9b9 	bl	800174c <FAN_Ctrl>
 80043da:	e005      	b.n	80043e8 <PostMessage_Proc+0x218>
					else							{ Measure_Stop();   FAN_Ctrl(LO, OFF); }
 80043dc:	f7fe fdaa 	bl	8002f34 <Measure_Stop>
 80043e0:	2100      	movs	r1, #0
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7fd f9b2 	bl	800174c <FAN_Ctrl>

					tSysState.SelGetAdcCh = ADC_GET_SiPM_CH;
 80043e8:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 80043ea:	2209      	movs	r2, #9
 80043ec:	719a      	strb	r2, [r3, #6]
					m_SysProcSeq = SYS_SEQ_GET_ADC_TEST_MODE;
 80043ee:	4b2f      	ldr	r3, [pc, #188]	@ (80044ac <PostMessage_Proc+0x2dc>)
 80043f0:	2270      	movs	r2, #112	@ 0x70
 80043f2:	701a      	strb	r2, [r3, #0]
				}
			}break;
 80043f4:	e0b1      	b.n	800455a <PostMessage_Proc+0x38a>


			case CMD_SLEEP_MODE :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 80043f6:	4b2b      	ldr	r3, [pc, #172]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 80043f8:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff f9e9 	bl	80037d4 <RspAssamblyTxMsg>
				m_SysProcSeq = SYS_SEQ_POWER_DOWN_MODE;
 8004402:	4b2a      	ldr	r3, [pc, #168]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004404:	2260      	movs	r2, #96	@ 0x60
 8004406:	701a      	strb	r2, [r3, #0]
			}break;
 8004408:	e0a8      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_WAKE_UP :
			{
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800440a:	4b26      	ldr	r3, [pc, #152]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800440c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff f9df 	bl	80037d4 <RspAssamblyTxMsg>
				m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 8004416:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <PostMessage_Proc+0x2dc>)
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	701a      	strb	r2, [r3, #0]
			}break;
 800441c:	e09e      	b.n	800455c <PostMessage_Proc+0x38c>

			// Error
			case CMD_DEVICE_INFO :
			{
				if (0x01 == tMsgPkt.Leng) { tSysState.ClientReqDevInfo = tMsgPkt.RxBuff[4];  tSysState.ClientReqType = CLIENT_REQ_GET;}
 800441e:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004420:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <PostMessage_Proc+0x266>
 8004428:	4b1e      	ldr	r3, [pc, #120]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800442a:	791a      	ldrb	r2, [r3, #4]
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800442e:	739a      	strb	r2, [r3, #14]
 8004430:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004432:	2201      	movs	r2, #1
 8004434:	741a      	strb	r2, [r3, #16]
				if (0x08 == tMsgPkt.Leng) { DeviceInfo(DEVICE_INFO_PRODUCT_TYPE); tSysState.ClientReqType = CLIENT_REQ_SET;}
 8004436:	4b1b      	ldr	r3, [pc, #108]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004438:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800443c:	2b08      	cmp	r3, #8
 800443e:	d105      	bne.n	800444c <PostMessage_Proc+0x27c>
 8004440:	2000      	movs	r0, #0
 8004442:	f7ff f955 	bl	80036f0 <DeviceInfo>
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004448:	2202      	movs	r2, #2
 800444a:	741a      	strb	r2, [r3, #16]
				if (0x10 == tMsgPkt.Leng) { DeviceInfo(DEVICE_INFO_SERIAL_NUM); tSysState.ClientReqType = CLIENT_REQ_SET;}
 800444c:	4b15      	ldr	r3, [pc, #84]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 800444e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004452:	2b10      	cmp	r3, #16
 8004454:	d105      	bne.n	8004462 <PostMessage_Proc+0x292>
 8004456:	2003      	movs	r0, #3
 8004458:	f7ff f94a 	bl	80036f0 <DeviceInfo>
 800445c:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800445e:	2202      	movs	r2, #2
 8004460:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004464:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f9b3 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 800446e:	e075      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_DEVICE_VER :
			{
				if (0x01 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004472:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <PostMessage_Proc+0x2b0>
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 800447c:	2201      	movs	r2, #1
 800447e:	741a      	strb	r2, [r3, #16]
				if (0x05 == tMsgPkt.Leng) { DeviceFirmwareVer(); tSysState.ClientReqType = CLIENT_REQ_SET;}
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004482:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004486:	2b05      	cmp	r3, #5
 8004488:	d104      	bne.n	8004494 <PostMessage_Proc+0x2c4>
 800448a:	f7ff f971 	bl	8003770 <DeviceFirmwareVer>
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <PostMessage_Proc+0x2d8>)
 8004490:	2202      	movs	r2, #2
 8004492:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <PostMessage_Proc+0x2d4>)
 8004496:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f99a 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 80044a0:	e05c      	b.n	800455c <PostMessage_Proc+0x38c>
 80044a2:	bf00      	nop
 80044a4:	20000570 	.word	0x20000570
 80044a8:	2000028c 	.word	0x2000028c
 80044ac:	200002d5 	.word	0x200002d5
 80044b0:	200000b4 	.word	0x200000b4

			case CMD_DEVICE_STATE :
			{
				if (0x00 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
 80044b4:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <PostMessage_Proc+0x39c>)
 80044b6:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <PostMessage_Proc+0x2f4>
 80044be:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <PostMessage_Proc+0x39c>)
 80044c6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff f982 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 80044d0:	e044      	b.n	800455c <PostMessage_Proc+0x38c>


			case CMD_SET_CORRECTION_VAL :
			{
				if (0x02 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET; tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5]; }
 80044d2:	4b26      	ldr	r3, [pc, #152]	@ (800456c <PostMessage_Proc+0x39c>)
 80044d4:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d106      	bne.n	80044ea <PostMessage_Proc+0x31a>
 80044dc:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044de:	2201      	movs	r2, #1
 80044e0:	741a      	strb	r2, [r3, #16]
 80044e2:	4b22      	ldr	r3, [pc, #136]	@ (800456c <PostMessage_Proc+0x39c>)
 80044e4:	795a      	ldrb	r2, [r3, #5]
 80044e6:	4b22      	ldr	r3, [pc, #136]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044e8:	73da      	strb	r2, [r3, #15]
				if (0x06 == tMsgPkt.Leng)
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <PostMessage_Proc+0x39c>)
 80044ec:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d10b      	bne.n	800450c <PostMessage_Proc+0x33c>
				{
					tSysState.ClientReqType = CLIENT_REQ_SET;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <PostMessage_Proc+0x3a0>)
 80044f6:	2202      	movs	r2, #2
 80044f8:	741a      	strb	r2, [r3, #16]
					tSysState.ClientReqSelCh = tMsgPkt.RxBuff[5];
 80044fa:	4b1c      	ldr	r3, [pc, #112]	@ (800456c <PostMessage_Proc+0x39c>)
 80044fc:	795a      	ldrb	r2, [r3, #5]
 80044fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <PostMessage_Proc+0x3a0>)
 8004500:	73da      	strb	r2, [r3, #15]

					SetAdjustCal(tSysState.ClientReqSelCh);
 8004502:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <PostMessage_Proc+0x3a0>)
 8004504:	7bdb      	ldrb	r3, [r3, #15]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe ffce 	bl	80034a8 <SetAdjustCal>
				}

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <PostMessage_Proc+0x39c>)
 800450e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f95e 	bl	80037d4 <RspAssamblyTxMsg>
			}break;
 8004518:	e020      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_SET_FIRMWARE_DOWNLOAD :
			{
				//if (0x00 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
				RspAssamblyTxMsg(tMsgPkt.Cmd);
 800451a:	4b14      	ldr	r3, [pc, #80]	@ (800456c <PostMessage_Proc+0x39c>)
 800451c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f957 	bl	80037d4 <RspAssamblyTxMsg>
				SetCfg_Flash_Firmware_Write();
 8004526:	f7fd fdb1 	bl	800208c <SetCfg_Flash_Firmware_Write>
				m_SysProcSeq = SYS_SEQ_RESET;
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <PostMessage_Proc+0x3a4>)
 800452c:	22a0      	movs	r2, #160	@ 0xa0
 800452e:	701a      	strb	r2, [r3, #0]
			}break;
 8004530:	e014      	b.n	800455c <PostMessage_Proc+0x38c>

			case CMD_SOFT_RESET :
			{
				if (0x00 == tMsgPkt.Leng) { tSysState.ClientReqType = CLIENT_REQ_GET;}
 8004532:	4b0e      	ldr	r3, [pc, #56]	@ (800456c <PostMessage_Proc+0x39c>)
 8004534:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <PostMessage_Proc+0x372>
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <PostMessage_Proc+0x3a0>)
 800453e:	2201      	movs	r2, #1
 8004540:	741a      	strb	r2, [r3, #16]

				RspAssamblyTxMsg(tMsgPkt.Cmd);
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <PostMessage_Proc+0x39c>)
 8004544:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff f943 	bl	80037d4 <RspAssamblyTxMsg>
				m_SysProcSeq = SYS_SEQ_RESET;
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <PostMessage_Proc+0x3a4>)
 8004550:	22a0      	movs	r2, #160	@ 0xa0
 8004552:	701a      	strb	r2, [r3, #0]
			}break;
 8004554:	e002      	b.n	800455c <PostMessage_Proc+0x38c>
			}break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <PostMessage_Proc+0x38c>
			}break;
 800455a:	bf00      	nop
		}

		UART_RxInit();
 800455c:	f000 ff54 	bl	8005408 <UART_RxInit>
		tMsgPkt.FlagRxPktOn = OFF;
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <PostMessage_Proc+0x39c>)
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	}
}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000570 	.word	0x20000570
 8004570:	2000028c 	.word	0x2000028c
 8004574:	200002d5 	.word	0x200002d5

08004578 <Operating_Process>:


void Operating_Process(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	if(OFF == tSysState.FlagStatClenaOn)
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <Operating_Process+0x34>)
 800457e:	7b5b      	ldrb	r3, [r3, #13]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <Operating_Process+0x2c>
	{
		if(ON == tSysState.FlagOperModeOn)
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <Operating_Process+0x34>)
 8004586:	7adb      	ldrb	r3, [r3, #11]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <Operating_Process+0x30>
		{
			EXT_HV_Ctrl(ON);
 800458c:	2001      	movs	r0, #1
 800458e:	f7fc fe6d 	bl	800126c <EXT_HV_Ctrl>
			EXT_PD_Ctrl(ON);
 8004592:	2001      	movs	r0, #1
 8004594:	f7fc fe8e 	bl	80012b4 <EXT_PD_Ctrl>
			EXT_LD_Ctrl(ON);
 8004598:	2001      	movs	r0, #1
 800459a:	f7fc fe43 	bl	8001224 <EXT_LD_Ctrl>

			ReadMeasuredVal();
 800459e:	f7fe f905 	bl	80027ac <ReadMeasuredVal>
	}
	else
	{
		FanCleanCtrl();
	}
}
 80045a2:	e001      	b.n	80045a8 <Operating_Process+0x30>
		FanCleanCtrl();
 80045a4:	f7fe fbc4 	bl	8002d30 <FanCleanCtrl>
}
 80045a8:	bf00      	nop
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000028c 	.word	0x2000028c

080045b0 <RngOfPdAdcSamplingVal>:


void RngOfPdAdcSamplingVal(uint16_t nAdcVal)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
	//volatile uint16_t Tmp = nAdcVal;

	__BKPT(0);
 80045ba:	be00      	bkpt	0x0000

	uint8_t m_SelCurrPdAdcRng = 99;
 80045bc:	2363      	movs	r3, #99	@ 0x63
 80045be:	73fb      	strb	r3, [r7, #15]
	uint8_t FlagGetOn = OFF;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73bb      	strb	r3, [r7, #14]

//	if ( (250 < nAdcVal) && (m_MaxPeckAdVal < nAdcVal) )
	if ( (tParam[PM_CH1].LB < nAdcVal) && (m_MaxPeckAdVal < nAdcVal) )
 80045c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20a      	bcs.n	80045e4 <RngOfPdAdcSamplingVal+0x34>
 80045ce:	4b5b      	ldr	r3, [pc, #364]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d905      	bls.n	80045e4 <RngOfPdAdcSamplingVal+0x34>
	{
		m_MaxPeckAdVal = nAdcVal;
 80045d8:	4a58      	ldr	r2, [pc, #352]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	8013      	strh	r3, [r2, #0]
		m_FlagDectPeckOn = ON;
 80045de:	4b58      	ldr	r3, [pc, #352]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
	}

	//if (0 >= nAdcVal) {m_FlagDectPeckOn = OFF; }

//	if  ( (250 > nAdcVal) && (ON == m_FlagDectPeckOn) )
	if  ( (tParam[PM_CH1].LB > nAdcVal) && (ON == m_FlagDectPeckOn) )
 80045e4:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d970      	bls.n	80046d0 <RngOfPdAdcSamplingVal+0x120>
 80045ee:	4b54      	ldr	r3, [pc, #336]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d16c      	bne.n	80046d0 <RngOfPdAdcSamplingVal+0x120>
	{

	    if ( (tParam[PM_CH1].LB <= m_MaxPeckAdVal) && (tParam[PM_CH1].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM0_5; tPmResult1[PM_CH1].nPdChAdc = nAdcVal;}
 80045f6:	4b50      	ldr	r3, [pc, #320]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a50      	ldr	r2, [pc, #320]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	4293      	cmp	r3, r2
 8004600:	d80a      	bhi.n	8004618 <RngOfPdAdcSamplingVal+0x68>
 8004602:	4b4d      	ldr	r3, [pc, #308]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	4a4d      	ldr	r2, [pc, #308]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	4293      	cmp	r3, r2
 800460c:	d304      	bcc.n	8004618 <RngOfPdAdcSamplingVal+0x68>
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	4a4c      	ldr	r2, [pc, #304]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	8393      	strh	r3, [r2, #28]
		if ( (tParam[PM_CH2].LB <= m_MaxPeckAdVal) && (tParam[PM_CH2].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM1_0; tPmResult1[PM_CH2].nPdChAdc = nAdcVal;}
 8004618:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800461a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461c:	4a47      	ldr	r2, [pc, #284]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 800461e:	8812      	ldrh	r2, [r2, #0]
 8004620:	4293      	cmp	r3, r2
 8004622:	d80a      	bhi.n	800463a <RngOfPdAdcSamplingVal+0x8a>
 8004624:	4b44      	ldr	r3, [pc, #272]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	4a44      	ldr	r2, [pc, #272]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 800462a:	8812      	ldrh	r2, [r2, #0]
 800462c:	4293      	cmp	r3, r2
 800462e:	d304      	bcc.n	800463a <RngOfPdAdcSamplingVal+0x8a>
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	4a43      	ldr	r2, [pc, #268]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	8793      	strh	r3, [r2, #60]	@ 0x3c
		if ( (tParam[PM_CH3].LB <= m_MaxPeckAdVal) && (tParam[PM_CH3].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM2_5; tPmResult1[PM_CH3].nPdChAdc = nAdcVal;}
 800463a:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800463c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463e:	4a3f      	ldr	r2, [pc, #252]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	4293      	cmp	r3, r2
 8004644:	d80b      	bhi.n	800465e <RngOfPdAdcSamplingVal+0xae>
 8004646:	4b3c      	ldr	r3, [pc, #240]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464a:	4a3c      	ldr	r2, [pc, #240]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	4293      	cmp	r3, r2
 8004650:	d305      	bcc.n	800465e <RngOfPdAdcSamplingVal+0xae>
 8004652:	2302      	movs	r3, #2
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	4a3b      	ldr	r2, [pc, #236]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	f8a2 305c 	strh.w	r3, [r2, #92]	@ 0x5c
		if ( (tParam[PM_CH4].LB <= m_MaxPeckAdVal) && (tParam[PM_CH4].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM4_0; tPmResult1[PM_CH4].nPdChAdc = nAdcVal;}
 800465e:	4b36      	ldr	r3, [pc, #216]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004664:	4a35      	ldr	r2, [pc, #212]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 8004666:	8812      	ldrh	r2, [r2, #0]
 8004668:	4293      	cmp	r3, r2
 800466a:	d80c      	bhi.n	8004686 <RngOfPdAdcSamplingVal+0xd6>
 800466c:	4b32      	ldr	r3, [pc, #200]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	4a32      	ldr	r2, [pc, #200]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 8004674:	8812      	ldrh	r2, [r2, #0]
 8004676:	4293      	cmp	r3, r2
 8004678:	d305      	bcc.n	8004686 <RngOfPdAdcSamplingVal+0xd6>
 800467a:	2303      	movs	r3, #3
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	4a31      	ldr	r2, [pc, #196]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	f8a2 307c 	strh.w	r3, [r2, #124]	@ 0x7c
		if ( (tParam[PM_CH5].LB <= m_MaxPeckAdVal) && (tParam[PM_CH5].UB >= m_MaxPeckAdVal) ) { m_SelCurrPdAdcRng = PM_10; tPmResult1[PM_CH5].nPdChAdc = nAdcVal;}
 8004686:	4b2c      	ldr	r3, [pc, #176]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800468c:	4a2b      	ldr	r2, [pc, #172]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 800468e:	8812      	ldrh	r2, [r2, #0]
 8004690:	4293      	cmp	r3, r2
 8004692:	d80c      	bhi.n	80046ae <RngOfPdAdcSamplingVal+0xfe>
 8004694:	4b28      	ldr	r3, [pc, #160]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 8004696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800469a:	4a28      	ldr	r2, [pc, #160]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	4293      	cmp	r3, r2
 80046a0:	d305      	bcc.n	80046ae <RngOfPdAdcSamplingVal+0xfe>
 80046a2:	2304      	movs	r3, #4
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	f8a2 309c 	strh.w	r3, [r2, #156]	@ 0x9c


		m_PeckPDAdVal = m_MaxPeckAdVal;
 80046ae:	4b23      	ldr	r3, [pc, #140]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <RngOfPdAdcSamplingVal+0x198>)
 80046b4:	801a      	strh	r2, [r3, #0]

		//m_MaxPeckAdVal = tParam[PM_CH1].LB + 1;
		m_MaxPeckAdVal = tParam[PM_CH1].LB;
 80046b6:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <RngOfPdAdcSamplingVal+0x188>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	4b1f      	ldr	r3, [pc, #124]	@ (800473c <RngOfPdAdcSamplingVal+0x18c>)
 80046be:	801a      	strh	r2, [r3, #0]
		m_FlagDectPeckOn = OFF;
 80046c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <RngOfPdAdcSamplingVal+0x190>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
		m_FlagAdcSendOn = ON;
 80046c6:	4b21      	ldr	r3, [pc, #132]	@ (800474c <RngOfPdAdcSamplingVal+0x19c>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
		FlagGetOn = ON;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73bb      	strb	r3, [r7, #14]

	}

	if( ON == FlagGetOn)
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d129      	bne.n	800472a <RngOfPdAdcSamplingVal+0x17a>
	{
	    if(PM0_5 == m_SelCurrPdAdcRng) tPmResult1[PM_CH1].nTmpNumConcet++;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <RngOfPdAdcSamplingVal+0x136>
 80046dc:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a18      	ldr	r2, [pc, #96]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046e4:	6153      	str	r3, [r2, #20]
	    if(PM1_0 == m_SelCurrPdAdcRng) tPmResult1[PM_CH2].nTmpNumConcet++;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d104      	bne.n	80046f6 <RngOfPdAdcSamplingVal+0x146>
 80046ec:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a14      	ldr	r2, [pc, #80]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046f4:	6353      	str	r3, [r2, #52]	@ 0x34
		if(PM2_5 == m_SelCurrPdAdcRng) tPmResult1[PM_CH3].nTmpNumConcet++;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d104      	bne.n	8004706 <RngOfPdAdcSamplingVal+0x156>
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	3301      	adds	r3, #1
 8004702:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004704:	6553      	str	r3, [r2, #84]	@ 0x54
		if(PM4_0 == m_SelCurrPdAdcRng) tPmResult1[PM_CH4].nTmpNumConcet++;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d104      	bne.n	8004716 <RngOfPdAdcSamplingVal+0x166>
 800470c:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	3301      	adds	r3, #1
 8004712:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004714:	6753      	str	r3, [r2, #116]	@ 0x74
		if(PM_10 == m_SelCurrPdAdcRng) tPmResult1[PM_CH5].nTmpNumConcet++;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d106      	bne.n	800472a <RngOfPdAdcSamplingVal+0x17a>
 800471c:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004722:	3301      	adds	r3, #1
 8004724:	4a07      	ldr	r2, [pc, #28]	@ (8004744 <RngOfPdAdcSamplingVal+0x194>)
 8004726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
//        }
//        // 피크 종료 후 초기화
//        maxVal = 0;
//        detecting = 0;
//    }
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	200000cc 	.word	0x200000cc
 800473c:	200002d6 	.word	0x200002d6
 8004740:	200002de 	.word	0x200002de
 8004744:	200001bc 	.word	0x200001bc
 8004748:	200002da 	.word	0x200002da
 800474c:	200002e0 	.word	0x200002e0

08004750 <RngOfSiPmAdcSamplingVal>:

void RngOfSiPmAdcSamplingVal(uint16_t nAdcVal)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	80fb      	strh	r3, [r7, #6]
	//volatile uint16_t Tmp = nAdcVal;

	if( (tParam[PM_SiPM].LB < nAdcVal) && (tParam[PM_SiPM].UB > nAdcVal) )
 800475a:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x8c>)
 800475c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	429a      	cmp	r2, r3
 8004764:	d210      	bcs.n	8004788 <RngOfSiPmAdcSamplingVal+0x38>
 8004766:	4b1d      	ldr	r3, [pc, #116]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x8c>)
 8004768:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	429a      	cmp	r2, r3
 8004770:	d90a      	bls.n	8004788 <RngOfSiPmAdcSamplingVal+0x38>
	{
		if(m_MaxPeckAdVal2 < nAdcVal)
 8004772:	4b1b      	ldr	r3, [pc, #108]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x90>)
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	429a      	cmp	r2, r3
 800477a:	d905      	bls.n	8004788 <RngOfSiPmAdcSamplingVal+0x38>
		{
			m_MaxPeckAdVal2 = nAdcVal;
 800477c:	4a18      	ldr	r2, [pc, #96]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x90>)
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	8013      	strh	r3, [r2, #0]
			m_FlagDectPeckOn2 = ON;
 8004782:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <RngOfSiPmAdcSamplingVal+0x94>)
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
		}
	}

	if( (tParam[PM_SiPM].LB > nAdcVal) && (ON == m_FlagDectPeckOn2) )
 8004788:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x8c>)
 800478a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	429a      	cmp	r2, r3
 8004792:	d91c      	bls.n	80047ce <RngOfSiPmAdcSamplingVal+0x7e>
 8004794:	4b13      	ldr	r3, [pc, #76]	@ (80047e4 <RngOfSiPmAdcSamplingVal+0x94>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d118      	bne.n	80047ce <RngOfSiPmAdcSamplingVal+0x7e>
	{
		tPmResult1[PM_SiPM].nTmpNumConcet++;
 800479c:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <RngOfSiPmAdcSamplingVal+0x98>)
 800479e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a10      	ldr	r2, [pc, #64]	@ (80047e8 <RngOfSiPmAdcSamplingVal+0x98>)
 80047a6:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4

		m_PeckSiPMAdVal = m_MaxPeckAdVal2;
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x90>)
 80047ac:	881a      	ldrh	r2, [r3, #0]
 80047ae:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <RngOfSiPmAdcSamplingVal+0x9c>)
 80047b0:	801a      	strh	r2, [r3, #0]
		m_MaxPeckAdVal2 = tParam[PM_SiPM].LB + 1;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <RngOfSiPmAdcSamplingVal+0x8c>)
 80047b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	4b08      	ldr	r3, [pc, #32]	@ (80047e0 <RngOfSiPmAdcSamplingVal+0x90>)
 80047c0:	801a      	strh	r2, [r3, #0]
		m_FlagAdcSendOn = ON;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <RngOfSiPmAdcSamplingVal+0xa0>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
		m_FlagDectPeckOn2 = OFF;
 80047c8:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <RngOfSiPmAdcSamplingVal+0x94>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
	}
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200000cc 	.word	0x200000cc
 80047e0:	200002d8 	.word	0x200002d8
 80047e4:	200002df 	.word	0x200002df
 80047e8:	200001bc 	.word	0x200001bc
 80047ec:	200002dc 	.word	0x200002dc
 80047f0:	200002e0 	.word	0x200002e0

080047f4 <Built_In_Test_Proc>:

void Built_In_Test_Proc(void)
{
 80047f4:	b598      	push	{r3, r4, r7, lr}
 80047f6:	af00      	add	r7, sp, #0
	switch(m_BITProcSeq)
 80047f8:	4bd8      	ldr	r3, [pc, #864]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2bef      	cmp	r3, #239	@ 0xef
 80047fe:	f000 845b 	beq.w	80050b8 <Built_In_Test_Proc+0x8c4>
 8004802:	2bef      	cmp	r3, #239	@ 0xef
 8004804:	f300 846d 	bgt.w	80050e2 <Built_In_Test_Proc+0x8ee>
 8004808:	2b90      	cmp	r3, #144	@ 0x90
 800480a:	f300 812b 	bgt.w	8004a64 <Built_In_Test_Proc+0x270>
 800480e:	2b00      	cmp	r3, #0
 8004810:	f2c0 8467 	blt.w	80050e2 <Built_In_Test_Proc+0x8ee>
 8004814:	2b90      	cmp	r3, #144	@ 0x90
 8004816:	f200 8464 	bhi.w	80050e2 <Built_In_Test_Proc+0x8ee>
 800481a:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <Built_In_Test_Proc+0x2c>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	080050bd 	.word	0x080050bd
 8004824:	080050e3 	.word	0x080050e3
 8004828:	080050e3 	.word	0x080050e3
 800482c:	080050e3 	.word	0x080050e3
 8004830:	080050e3 	.word	0x080050e3
 8004834:	080050e3 	.word	0x080050e3
 8004838:	080050e3 	.word	0x080050e3
 800483c:	080050e3 	.word	0x080050e3
 8004840:	080050e3 	.word	0x080050e3
 8004844:	080050e3 	.word	0x080050e3
 8004848:	080050e3 	.word	0x080050e3
 800484c:	080050e3 	.word	0x080050e3
 8004850:	080050e3 	.word	0x080050e3
 8004854:	080050e3 	.word	0x080050e3
 8004858:	080050e3 	.word	0x080050e3
 800485c:	080050e3 	.word	0x080050e3
 8004860:	08004a6d 	.word	0x08004a6d
 8004864:	080050e3 	.word	0x080050e3
 8004868:	080050e3 	.word	0x080050e3
 800486c:	080050e3 	.word	0x080050e3
 8004870:	080050e3 	.word	0x080050e3
 8004874:	080050e3 	.word	0x080050e3
 8004878:	080050e3 	.word	0x080050e3
 800487c:	080050e3 	.word	0x080050e3
 8004880:	080050e3 	.word	0x080050e3
 8004884:	080050e3 	.word	0x080050e3
 8004888:	080050e3 	.word	0x080050e3
 800488c:	080050e3 	.word	0x080050e3
 8004890:	080050e3 	.word	0x080050e3
 8004894:	080050e3 	.word	0x080050e3
 8004898:	080050e3 	.word	0x080050e3
 800489c:	080050e3 	.word	0x080050e3
 80048a0:	08004a99 	.word	0x08004a99
 80048a4:	080050e3 	.word	0x080050e3
 80048a8:	08004aab 	.word	0x08004aab
 80048ac:	080050e3 	.word	0x080050e3
 80048b0:	08004acf 	.word	0x08004acf
 80048b4:	080050e3 	.word	0x080050e3
 80048b8:	080050e3 	.word	0x080050e3
 80048bc:	080050e3 	.word	0x080050e3
 80048c0:	080050e3 	.word	0x080050e3
 80048c4:	080050e3 	.word	0x080050e3
 80048c8:	080050e3 	.word	0x080050e3
 80048cc:	080050e3 	.word	0x080050e3
 80048d0:	080050e3 	.word	0x080050e3
 80048d4:	080050e3 	.word	0x080050e3
 80048d8:	080050e3 	.word	0x080050e3
 80048dc:	080050e3 	.word	0x080050e3
 80048e0:	08004b17 	.word	0x08004b17
 80048e4:	080050e3 	.word	0x080050e3
 80048e8:	08004b33 	.word	0x08004b33
 80048ec:	080050e3 	.word	0x080050e3
 80048f0:	08004b6d 	.word	0x08004b6d
 80048f4:	08004c0d 	.word	0x08004c0d
 80048f8:	080050e3 	.word	0x080050e3
 80048fc:	08004c29 	.word	0x08004c29
 8004900:	080050e3 	.word	0x080050e3
 8004904:	08004c51 	.word	0x08004c51
 8004908:	080050e3 	.word	0x080050e3
 800490c:	080050e3 	.word	0x080050e3
 8004910:	080050e3 	.word	0x080050e3
 8004914:	080050e3 	.word	0x080050e3
 8004918:	080050e3 	.word	0x080050e3
 800491c:	080050e3 	.word	0x080050e3
 8004920:	08004ced 	.word	0x08004ced
 8004924:	080050e3 	.word	0x080050e3
 8004928:	08004d0b 	.word	0x08004d0b
 800492c:	080050e3 	.word	0x080050e3
 8004930:	08004d2d 	.word	0x08004d2d
 8004934:	080050e3 	.word	0x080050e3
 8004938:	080050e3 	.word	0x080050e3
 800493c:	080050e3 	.word	0x080050e3
 8004940:	080050e3 	.word	0x080050e3
 8004944:	080050e3 	.word	0x080050e3
 8004948:	080050e3 	.word	0x080050e3
 800494c:	080050e3 	.word	0x080050e3
 8004950:	080050e3 	.word	0x080050e3
 8004954:	080050e3 	.word	0x080050e3
 8004958:	080050e3 	.word	0x080050e3
 800495c:	080050e3 	.word	0x080050e3
 8004960:	08004dcd 	.word	0x08004dcd
 8004964:	080050e3 	.word	0x080050e3
 8004968:	08004de5 	.word	0x08004de5
 800496c:	080050e3 	.word	0x080050e3
 8004970:	08004e07 	.word	0x08004e07
 8004974:	080050e3 	.word	0x080050e3
 8004978:	080050e3 	.word	0x080050e3
 800497c:	080050e3 	.word	0x080050e3
 8004980:	080050e3 	.word	0x080050e3
 8004984:	080050e3 	.word	0x080050e3
 8004988:	080050e3 	.word	0x080050e3
 800498c:	080050e3 	.word	0x080050e3
 8004990:	080050e3 	.word	0x080050e3
 8004994:	080050e3 	.word	0x080050e3
 8004998:	080050e3 	.word	0x080050e3
 800499c:	080050e3 	.word	0x080050e3
 80049a0:	08004ebb 	.word	0x08004ebb
 80049a4:	080050e3 	.word	0x080050e3
 80049a8:	08004ed9 	.word	0x08004ed9
 80049ac:	080050e3 	.word	0x080050e3
 80049b0:	08004efb 	.word	0x08004efb
 80049b4:	080050e3 	.word	0x080050e3
 80049b8:	080050e3 	.word	0x080050e3
 80049bc:	080050e3 	.word	0x080050e3
 80049c0:	080050e3 	.word	0x080050e3
 80049c4:	080050e3 	.word	0x080050e3
 80049c8:	080050e3 	.word	0x080050e3
 80049cc:	080050e3 	.word	0x080050e3
 80049d0:	080050e3 	.word	0x080050e3
 80049d4:	080050e3 	.word	0x080050e3
 80049d8:	080050e3 	.word	0x080050e3
 80049dc:	080050e3 	.word	0x080050e3
 80049e0:	08004f97 	.word	0x08004f97
 80049e4:	080050e3 	.word	0x080050e3
 80049e8:	08004faf 	.word	0x08004faf
 80049ec:	080050e3 	.word	0x080050e3
 80049f0:	08004fd1 	.word	0x08004fd1
 80049f4:	080050e3 	.word	0x080050e3
 80049f8:	080050e3 	.word	0x080050e3
 80049fc:	080050e3 	.word	0x080050e3
 8004a00:	080050e3 	.word	0x080050e3
 8004a04:	080050e3 	.word	0x080050e3
 8004a08:	080050e3 	.word	0x080050e3
 8004a0c:	080050e3 	.word	0x080050e3
 8004a10:	080050e3 	.word	0x080050e3
 8004a14:	080050e3 	.word	0x080050e3
 8004a18:	080050e3 	.word	0x080050e3
 8004a1c:	080050e3 	.word	0x080050e3
 8004a20:	080050e3 	.word	0x080050e3
 8004a24:	080050e3 	.word	0x080050e3
 8004a28:	080050e3 	.word	0x080050e3
 8004a2c:	080050e3 	.word	0x080050e3
 8004a30:	080050e3 	.word	0x080050e3
 8004a34:	080050e3 	.word	0x080050e3
 8004a38:	080050e3 	.word	0x080050e3
 8004a3c:	080050e3 	.word	0x080050e3
 8004a40:	080050e3 	.word	0x080050e3
 8004a44:	080050e3 	.word	0x080050e3
 8004a48:	080050e3 	.word	0x080050e3
 8004a4c:	080050e3 	.word	0x080050e3
 8004a50:	080050e3 	.word	0x080050e3
 8004a54:	080050e3 	.word	0x080050e3
 8004a58:	080050e3 	.word	0x080050e3
 8004a5c:	080050e3 	.word	0x080050e3
 8004a60:	0800506d 	.word	0x0800506d
 8004a64:	2be0      	cmp	r3, #224	@ 0xe0
 8004a66:	f000 8317 	beq.w	8005098 <Built_In_Test_Proc+0x8a4>


			RspAssamblyTxMsg(CMD_DEVICE_STATE);
		}break;
	}
}
 8004a6a:	e33a      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			FAN_Ctrl(LO, OFF);
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7fc fe6c 	bl	800174c <FAN_Ctrl>
			EXT_SiPM_Ctrl(OFF);
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7fc fc41 	bl	80012fc <EXT_SiPM_Ctrl>
			EXT_PD_Ctrl(OFF);
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f7fc fc1a 	bl	80012b4 <EXT_PD_Ctrl>
			EXT_HV_Ctrl(OFF);
 8004a80:	2000      	movs	r0, #0
 8004a82:	f7fc fbf3 	bl	800126c <EXT_HV_Ctrl>
			EXT_LD_Ctrl(OFF);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f7fc fbcc 	bl	8001224 <EXT_LD_Ctrl>
			WaitTime_Init();
 8004a8c:	f7fd fd90 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_EEPROM_WRITE_READ;
 8004a90:	4b32      	ldr	r3, [pc, #200]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004a92:	2220      	movs	r2, #32
 8004a94:	701a      	strb	r2, [r3, #0]
		}break;
 8004a96:	e324      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			tConfig.DeviceUseCount = GetCfg_DeviceUseCount();
 8004a98:	f7fd fad0 	bl	800203c <GetCfg_DeviceUseCount>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a30      	ldr	r2, [pc, #192]	@ (8004b60 <Built_In_Test_Proc+0x36c>)
 8004aa0:	6253      	str	r3, [r2, #36]	@ 0x24
			m_BITProcSeq = BIT_SEQ_EEPROM_WRITE_TIME_CHK;
 8004aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004aa4:	2222      	movs	r2, #34	@ 0x22
 8004aa6:	701a      	strb	r2, [r3, #0]
		}break;
 8004aa8:	e31b      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			if ( TRUE == WaitHoldTime_Sec(ON, EEP_EEPROM_CHK_TIME) )
 8004aaa:	2101      	movs	r1, #1
 8004aac:	2001      	movs	r0, #1
 8004aae:	f7fd fd9d 	bl	80025ec <WaitHoldTime_Sec>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	f040 8303 	bne.w	80050c0 <Built_In_Test_Proc+0x8cc>
				SetCfg_DeviceUseCount(tConfig.DeviceUseCount+1);
 8004aba:	4b29      	ldr	r3, [pc, #164]	@ (8004b60 <Built_In_Test_Proc+0x36c>)
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	3301      	adds	r3, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fa98 	bl	8001ff6 <SetCfg_DeviceUseCount>
				m_BITProcSeq = BIT_SEQ_EEPROM_WRITE_VERIFY_CHK;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004ac8:	2224      	movs	r2, #36	@ 0x24
 8004aca:	701a      	strb	r2, [r3, #0]
		}break;
 8004acc:	e2f8      	b.n	80050c0 <Built_In_Test_Proc+0x8cc>
			if((tConfig.DeviceUseCount+1) == GetCfg_DeviceUseCount())
 8004ace:	4b24      	ldr	r3, [pc, #144]	@ (8004b60 <Built_In_Test_Proc+0x36c>)
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	1c5c      	adds	r4, r3, #1
 8004ad4:	f7fd fab2 	bl	800203c <GetCfg_DeviceUseCount>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d10f      	bne.n	8004afe <Built_In_Test_Proc+0x30a>
				WaitHoldTime_Sec(OFF, CHK_TIME_OFF);
 8004ade:	2163      	movs	r1, #99	@ 0x63
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7fd fd83 	bl	80025ec <WaitHoldTime_Sec>
				tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_EEPROM_OK, OFF);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2004      	movs	r0, #4
 8004aea:	f7fd fdd3 	bl	8002694 <DeviceSetState>
 8004aee:	4603      	mov	r3, r0
 8004af0:	461a      	mov	r2, r3
 8004af2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b64 <Built_In_Test_Proc+0x370>)
 8004af4:	839a      	strh	r2, [r3, #28]
				m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_CTRL_ON;
 8004af6:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004af8:	2230      	movs	r2, #48	@ 0x30
 8004afa:	701a      	strb	r2, [r3, #0]
		}break;
 8004afc:	e2f1      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
				tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_EEPROM_OK, ON);
 8004afe:	2101      	movs	r1, #1
 8004b00:	2004      	movs	r0, #4
 8004b02:	f7fd fdc7 	bl	8002694 <DeviceSetState>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <Built_In_Test_Proc+0x370>)
 8004b0c:	839a      	strh	r2, [r3, #28]
				m_BITProcSeq = BIT_SEQ_ERROR;
 8004b0e:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004b10:	22e0      	movs	r2, #224	@ 0xe0
 8004b12:	701a      	strb	r2, [r3, #0]
		}break;
 8004b14:	e2e5      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			FAN_Ctrl(LO, ON);
 8004b16:	2101      	movs	r1, #1
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f7fc fe17 	bl	800174c <FAN_Ctrl>
			WaitTime_Init();
 8004b1e:	f7fd fd47 	bl	80025b0 <WaitTime_Init>
			WaitHoldTime_Sec(OFF, CHK_TIME_OFF);
 8004b22:	2163      	movs	r1, #99	@ 0x63
 8004b24:	2000      	movs	r0, #0
 8004b26:	f7fd fd61 	bl	80025ec <WaitHoldTime_Sec>
			m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_STAB_TIME;
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004b2c:	2232      	movs	r2, #50	@ 0x32
 8004b2e:	701a      	strb	r2, [r3, #0]
		}break;
 8004b30:	e2d7      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_CON_ON_TIME) )
 8004b32:	2103      	movs	r1, #3
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7fd fd59 	bl	80025ec <WaitHoldTime_Sec>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	f040 82c1 	bne.w	80050c4 <Built_In_Test_Proc+0x8d0>
				tFan.RpmCurrCnt = 0;
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <Built_In_Test_Proc+0x374>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	611a      	str	r2, [r3, #16]
				FAN_RpmMeasuerment(ON);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fc fe1f 	bl	800178c <FAN_RpmMeasuerment>
				WaitTime_Init();
 8004b4e:	f7fd fd2f 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_CHK;
 8004b52:	4b02      	ldr	r3, [pc, #8]	@ (8004b5c <Built_In_Test_Proc+0x368>)
 8004b54:	2234      	movs	r2, #52	@ 0x34
 8004b56:	701a      	strb	r2, [r3, #0]
		}break;
 8004b58:	e2b4      	b.n	80050c4 <Built_In_Test_Proc+0x8d0>
 8004b5a:	bf00      	nop
 8004b5c:	200002d4 	.word	0x200002d4
 8004b60:	20000030 	.word	0x20000030
 8004b64:	2000028c 	.word	0x2000028c
 8004b68:	200000b4 	.word	0x200000b4
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_MEASURE_TIME) )
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fd fd3c 	bl	80025ec <WaitHoldTime_Sec>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	f040 82a6 	bne.w	80050c8 <Built_In_Test_Proc+0x8d4>
				if (ON == FAN_ChkCondition(DEFAULT_FAN_RPM_LOW_SPD_COUNT, tFan.RpmCurrCnt))
 8004b7c:	4bbc      	ldr	r3, [pc, #752]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	4619      	mov	r1, r3
 8004b82:	20ac      	movs	r0, #172	@ 0xac
 8004b84:	f7fc fe24 	bl	80017d0 <FAN_ChkCondition>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d11b      	bne.n	8004bc6 <Built_In_Test_Proc+0x3d2>
					tFan.RpmCurrCnt = 0;
 8004b8e:	4bb8      	ldr	r3, [pc, #736]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
					FAN_RpmMeasuerment(OFF);
 8004b94:	2000      	movs	r0, #0
 8004b96:	f7fc fdf9 	bl	800178c <FAN_RpmMeasuerment>
					FAN_Ctrl(HI, ON);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f7fc fdd5 	bl	800174c <FAN_Ctrl>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_N, OFF);
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7fd fd75 	bl	8002694 <DeviceSetState>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	4bb1      	ldr	r3, [pc, #708]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004bb0:	839a      	strh	r2, [r3, #28]
					tFan.FlagErrOn = ON;
 8004bb2:	4baf      	ldr	r3, [pc, #700]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	711a      	strb	r2, [r3, #4]
					m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_CTRL_ON;
 8004bb8:	4baf      	ldr	r3, [pc, #700]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004bba:	2235      	movs	r2, #53	@ 0x35
 8004bbc:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004bbe:	4bad      	ldr	r3, [pc, #692]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	779a      	strb	r2, [r3, #30]
 8004bc4:	e01f      	b.n	8004c06 <Built_In_Test_Proc+0x412>
					tFan.RpmCurrCnt = 0;
 8004bc6:	4baa      	ldr	r3, [pc, #680]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_FAN_CON_LO_SPD_CTRL_ON; }
 8004bcc:	4ba9      	ldr	r3, [pc, #676]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004bce:	7f9b      	ldrb	r3, [r3, #30]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	b2d1      	uxtb	r1, r2
 8004bd4:	4aa7      	ldr	r2, [pc, #668]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004bd6:	7791      	strb	r1, [r2, #30]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d803      	bhi.n	8004be4 <Built_In_Test_Proc+0x3f0>
 8004bdc:	4ba6      	ldr	r3, [pc, #664]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004bde:	2230      	movs	r2, #48	@ 0x30
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e010      	b.n	8004c06 <Built_In_Test_Proc+0x412>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_N, ON);
 8004be4:	2101      	movs	r1, #1
 8004be6:	2001      	movs	r0, #1
 8004be8:	f7fd fd54 	bl	8002694 <DeviceSetState>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004bf2:	839a      	strh	r2, [r3, #28]
						tFan.FlagErrOn = ON;
 8004bf4:	4b9e      	ldr	r3, [pc, #632]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	711a      	strb	r2, [r3, #4]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004bfa:	4b9f      	ldr	r3, [pc, #636]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004bfc:	22e0      	movs	r2, #224	@ 0xe0
 8004bfe:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004c00:	4b9c      	ldr	r3, [pc, #624]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	779a      	strb	r2, [r3, #30]
				WaitTime_Init();
 8004c06:	f7fd fcd3 	bl	80025b0 <WaitTime_Init>
		}break;
 8004c0a:	e25d      	b.n	80050c8 <Built_In_Test_Proc+0x8d4>
			FAN_Ctrl(HI, ON);
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f7fc fd9c 	bl	800174c <FAN_Ctrl>
			WaitTime_Init();
 8004c14:	f7fd fccc 	bl	80025b0 <WaitTime_Init>
			WaitHoldTime_Sec(OFF, CHK_TIME_OFF);
 8004c18:	2163      	movs	r1, #99	@ 0x63
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f7fd fce6 	bl	80025ec <WaitHoldTime_Sec>
			m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_STAB_TIME;
 8004c20:	4b95      	ldr	r3, [pc, #596]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004c22:	2237      	movs	r2, #55	@ 0x37
 8004c24:	701a      	strb	r2, [r3, #0]
		}break;
 8004c26:	e25c      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_CON_ON_TIME) )
 8004c28:	2103      	movs	r1, #3
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f7fd fcde 	bl	80025ec <WaitHoldTime_Sec>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 824a 	bne.w	80050cc <Built_In_Test_Proc+0x8d8>
				tFan.RpmCurrCnt = 0;
 8004c38:	4b8d      	ldr	r3, [pc, #564]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	611a      	str	r2, [r3, #16]
				FAN_RpmMeasuerment(ON);
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f7fc fda4 	bl	800178c <FAN_RpmMeasuerment>
				WaitTime_Init();
 8004c44:	f7fd fcb4 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_CHK;
 8004c48:	4b8b      	ldr	r3, [pc, #556]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004c4a:	2239      	movs	r2, #57	@ 0x39
 8004c4c:	701a      	strb	r2, [r3, #0]
		}break;
 8004c4e:	e23d      	b.n	80050cc <Built_In_Test_Proc+0x8d8>
			if ( TRUE == WaitHoldTime_Sec(ON, FAN_MEASURE_TIME) )
 8004c50:	2101      	movs	r1, #1
 8004c52:	2001      	movs	r0, #1
 8004c54:	f7fd fcca 	bl	80025ec <WaitHoldTime_Sec>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	f040 8238 	bne.w	80050d0 <Built_In_Test_Proc+0x8dc>
				if (ON == FAN_ChkCondition(DEFAULT_FAN_RPM_HIGH_SPD_COUNT, tFan.RpmCurrCnt))
 8004c60:	4b83      	ldr	r3, [pc, #524]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4619      	mov	r1, r3
 8004c66:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8004c6a:	f7fc fdb1 	bl	80017d0 <FAN_ChkCondition>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d118      	bne.n	8004ca6 <Built_In_Test_Proc+0x4b2>
					FAN_RpmMeasuerment(OFF);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7fc fd89 	bl	800178c <FAN_RpmMeasuerment>
					FAN_Ctrl(LO, ON);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fc fd65 	bl	800174c <FAN_Ctrl>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_H, OFF);
 8004c82:	2100      	movs	r1, #0
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fd fd05 	bl	8002694 <DeviceSetState>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b79      	ldr	r3, [pc, #484]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004c90:	839a      	strh	r2, [r3, #28]
					tFan.FlagErrOn = OFF;
 8004c92:	4b77      	ldr	r3, [pc, #476]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	711a      	strb	r2, [r3, #4]
					m_BITProcSeq = BIT_SEQ_LD_MON_ADC_CTRL_ON;
 8004c98:	4b77      	ldr	r3, [pc, #476]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004c9a:	2240      	movs	r2, #64	@ 0x40
 8004c9c:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004c9e:	4b75      	ldr	r3, [pc, #468]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	779a      	strb	r2, [r3, #30]
 8004ca4:	e01f      	b.n	8004ce6 <Built_In_Test_Proc+0x4f2>
					tFan.RpmCurrCnt = 0;
 8004ca6:	4b72      	ldr	r3, [pc, #456]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	611a      	str	r2, [r3, #16]
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_FAN_CON_HI_SPD_CTRL_ON; }
 8004cac:	4b71      	ldr	r3, [pc, #452]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004cae:	7f9b      	ldrb	r3, [r3, #30]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	b2d1      	uxtb	r1, r2
 8004cb4:	4a6f      	ldr	r2, [pc, #444]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004cb6:	7791      	strb	r1, [r2, #30]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d803      	bhi.n	8004cc4 <Built_In_Test_Proc+0x4d0>
 8004cbc:	4b6e      	ldr	r3, [pc, #440]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004cbe:	2235      	movs	r2, #53	@ 0x35
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e010      	b.n	8004ce6 <Built_In_Test_Proc+0x4f2>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SPD_H, ON);
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f7fd fce4 	bl	8002694 <DeviceSetState>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b68      	ldr	r3, [pc, #416]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004cd2:	839a      	strh	r2, [r3, #28]
						tFan.FlagErrOn = ON;
 8004cd4:	4b66      	ldr	r3, [pc, #408]	@ (8004e70 <Built_In_Test_Proc+0x67c>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	711a      	strb	r2, [r3, #4]
						tSysState.ErrRetry = 0;
 8004cda:	4b66      	ldr	r3, [pc, #408]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	779a      	strb	r2, [r3, #30]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004ce0:	4b65      	ldr	r3, [pc, #404]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004ce2:	22e0      	movs	r2, #224	@ 0xe0
 8004ce4:	701a      	strb	r2, [r3, #0]
				WaitTime_Init();
 8004ce6:	f7fd fc63 	bl	80025b0 <WaitTime_Init>
		}break;
 8004cea:	e1f1      	b.n	80050d0 <Built_In_Test_Proc+0x8dc>
			EXT_LD_Ctrl(ON);
 8004cec:	2001      	movs	r0, #1
 8004cee:	f7fc fa99 	bl	8001224 <EXT_LD_Ctrl>
			ADC_LD_Measuerment(OFF); // Initial
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fc fb7c 	bl	80013f0 <ADC_LD_Measuerment>
			WaitTime_Init();
 8004cf8:	f7fd fc5a 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_LD_MON_ADC_STAB_TIME;
 8004cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004cfe:	2242      	movs	r2, #66	@ 0x42
 8004d00:	701a      	strb	r2, [r3, #0]
			tSysState.FlagGetAdcOn = OFF;
 8004d02:	4b5c      	ldr	r3, [pc, #368]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	71da      	strb	r2, [r3, #7]
		}break;
 8004d08:	e1eb      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, LD_CTRL_ON_TIME) )
 8004d10:	2103      	movs	r1, #3
 8004d12:	2001      	movs	r0, #1
 8004d14:	f7fd fc6a 	bl	80025ec <WaitHoldTime_Sec>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	f040 81da 	bne.w	80050d4 <Built_In_Test_Proc+0x8e0>
				WaitTime_Init();
 8004d20:	f7fd fc46 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_LD_MON_ADC_CHK_ON;
 8004d24:	4b54      	ldr	r3, [pc, #336]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004d26:	2244      	movs	r2, #68	@ 0x44
 8004d28:	701a      	strb	r2, [r3, #0]
		}break;
 8004d2a:	e1d3      	b.n	80050d4 <Built_In_Test_Proc+0x8e0>
			if ( TRUE == WaitHoldTime_mSec(ON, LD_ADC_MEASURE_TIME) )
 8004d2c:	210a      	movs	r1, #10
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f7fd fc86 	bl	8002640 <WaitHoldTime_mSec>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d144      	bne.n	8004dc4 <Built_In_Test_Proc+0x5d0>
				tSysState.FlagGetAdcOn = OFF;
 8004d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	71da      	strb	r2, [r3, #7]
				if(TRUE == ADC_ChkCondition(DEFAULT_ADC_LD_NORMAL_VAL, tLdCtrl.AvgAdcVal))
 8004d40:	4b4e      	ldr	r3, [pc, #312]	@ (8004e7c <Built_In_Test_Proc+0x688>)
 8004d42:	889b      	ldrh	r3, [r3, #4]
 8004d44:	4619      	mov	r1, r3
 8004d46:	f240 40c4 	movw	r0, #1220	@ 0x4c4
 8004d4a:	f7fc fc5d 	bl	8001608 <ADC_ChkCondition>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d114      	bne.n	8004d7e <Built_In_Test_Proc+0x58a>
					ADC_LD_Measuerment(OFF);
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fc fb4b 	bl	80013f0 <ADC_LD_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_LD_OK, OFF);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2003      	movs	r0, #3
 8004d5e:	f7fd fc99 	bl	8002694 <DeviceSetState>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	4b43      	ldr	r3, [pc, #268]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d68:	839a      	strh	r2, [r3, #28]
					tLdCtrl.FlagErrOn = OFF;
 8004d6a:	4b44      	ldr	r3, [pc, #272]	@ (8004e7c <Built_In_Test_Proc+0x688>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_CTRL_ON;
 8004d70:	4b41      	ldr	r3, [pc, #260]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004d72:	2250      	movs	r2, #80	@ 0x50
 8004d74:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004d76:	4b3f      	ldr	r3, [pc, #252]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	779a      	strb	r2, [r3, #30]
 8004d7c:	e01f      	b.n	8004dbe <Built_In_Test_Proc+0x5ca>
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_LD_MON_ADC_CTRL_ON; }
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d80:	7f9b      	ldrb	r3, [r3, #30]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	b2d1      	uxtb	r1, r2
 8004d86:	4a3b      	ldr	r2, [pc, #236]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004d88:	7791      	strb	r1, [r2, #30]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d803      	bhi.n	8004d96 <Built_In_Test_Proc+0x5a2>
 8004d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004d90:	2240      	movs	r2, #64	@ 0x40
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e010      	b.n	8004db8 <Built_In_Test_Proc+0x5c4>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_LD_OK, ON);
 8004d96:	2101      	movs	r1, #1
 8004d98:	2003      	movs	r0, #3
 8004d9a:	f7fd fc7b 	bl	8002694 <DeviceSetState>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b34      	ldr	r3, [pc, #208]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004da4:	839a      	strh	r2, [r3, #28]
						tLdCtrl.FlagErrOn = ON;
 8004da6:	4b35      	ldr	r3, [pc, #212]	@ (8004e7c <Built_In_Test_Proc+0x688>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004dac:	4b32      	ldr	r3, [pc, #200]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004dae:	22e0      	movs	r2, #224	@ 0xe0
 8004db0:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8004db8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 8004dbe:	f7fd fbf7 	bl	80025b0 <WaitTime_Init>
		}break;
 8004dc2:	e18e      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
				ADC_LD_Measuerment(ON);
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7fc fb13 	bl	80013f0 <ADC_LD_Measuerment>
		}break;
 8004dca:	e18a      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			EXT_HV_Ctrl(ON);
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f7fc fa4d 	bl	800126c <EXT_HV_Ctrl>
			ADC_HV_Measuerment(OFF);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fc fb68 	bl	80014a8 <ADC_HV_Measuerment>
			WaitTime_Init();
 8004dd8:	f7fd fbea 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_STAB_TIME;
 8004ddc:	4b26      	ldr	r3, [pc, #152]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004dde:	2252      	movs	r2, #82	@ 0x52
 8004de0:	701a      	strb	r2, [r3, #0]
		} break;
 8004de2:	e17e      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004de4:	4b23      	ldr	r3, [pc, #140]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, HV_CTRL_ON_TIME) )
 8004dea:	2103      	movs	r1, #3
 8004dec:	2001      	movs	r0, #1
 8004dee:	f7fd fbfd 	bl	80025ec <WaitHoldTime_Sec>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	f040 816f 	bne.w	80050d8 <Built_In_Test_Proc+0x8e4>
				WaitTime_Init();
 8004dfa:	f7fd fbd9 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_CHK_ON;
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004e00:	2254      	movs	r2, #84	@ 0x54
 8004e02:	701a      	strb	r2, [r3, #0]
		}break;
 8004e04:	e168      	b.n	80050d8 <Built_In_Test_Proc+0x8e4>
			if ( true == WaitHoldTime_mSec(ON, HV_ADC_MEASURE_TIME) )
 8004e06:	2132      	movs	r1, #50	@ 0x32
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f7fd fc19 	bl	8002640 <WaitHoldTime_mSec>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d14e      	bne.n	8004eb2 <Built_In_Test_Proc+0x6be>
				tSysState.FlagGetAdcOn = OFF;
 8004e14:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	71da      	strb	r2, [r3, #7]
				if(TRUE == ADC_ChkCondition(DEFAULT_ADC_HV_NORMAL_VAL, tHvCtrl.AvgAdcVal) )
 8004e1a:	4b19      	ldr	r3, [pc, #100]	@ (8004e80 <Built_In_Test_Proc+0x68c>)
 8004e1c:	889b      	ldrh	r3, [r3, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f240 30b6 	movw	r0, #950	@ 0x3b6
 8004e24:	f7fc fbf0 	bl	8001608 <ADC_ChkCondition>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d114      	bne.n	8004e58 <Built_In_Test_Proc+0x664>
					ADC_HV_Measuerment(OFF);
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fc fb3a 	bl	80014a8 <ADC_HV_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_HV_OK, OFF);
 8004e34:	2100      	movs	r1, #0
 8004e36:	2005      	movs	r0, #5
 8004e38:	f7fd fc2c 	bl	8002694 <DeviceSetState>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004e42:	839a      	strh	r2, [r3, #28]
					tHvCtrl.FlagErrOn = OFF;
 8004e44:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <Built_In_Test_Proc+0x68c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_CTRL_ON;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004e4c:	2260      	movs	r2, #96	@ 0x60
 8004e4e:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004e50:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	779a      	strb	r2, [r3, #30]
 8004e56:	e029      	b.n	8004eac <Built_In_Test_Proc+0x6b8>
					if(3 >= tSysState.ErrRetry++) { m_BITProcSeq = BIT_SEQ_HV_CHK_ADC_CTRL_ON; }
 8004e58:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004e5a:	7f9b      	ldrb	r3, [r3, #30]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	b2d1      	uxtb	r1, r2
 8004e60:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <Built_In_Test_Proc+0x680>)
 8004e62:	7791      	strb	r1, [r2, #30]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d80d      	bhi.n	8004e84 <Built_In_Test_Proc+0x690>
 8004e68:	4b03      	ldr	r3, [pc, #12]	@ (8004e78 <Built_In_Test_Proc+0x684>)
 8004e6a:	2250      	movs	r2, #80	@ 0x50
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e01a      	b.n	8004ea6 <Built_In_Test_Proc+0x6b2>
 8004e70:	200000b4 	.word	0x200000b4
 8004e74:	2000028c 	.word	0x2000028c
 8004e78:	200002d4 	.word	0x200002d4
 8004e7c:	20000084 	.word	0x20000084
 8004e80:	20000094 	.word	0x20000094
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_HV_OK, ON);
 8004e84:	2101      	movs	r1, #1
 8004e86:	2005      	movs	r0, #5
 8004e88:	f7fd fc04 	bl	8002694 <DeviceSetState>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b95      	ldr	r3, [pc, #596]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004e92:	839a      	strh	r2, [r3, #28]
						tHvCtrl.FlagErrOn = ON;
 8004e94:	4b95      	ldr	r3, [pc, #596]	@ (80050ec <Built_In_Test_Proc+0x8f8>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004e9a:	4b95      	ldr	r3, [pc, #596]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004e9c:	22e0      	movs	r2, #224	@ 0xe0
 8004e9e:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004ea0:	4b91      	ldr	r3, [pc, #580]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8004ea6:	4b90      	ldr	r3, [pc, #576]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 8004eac:	f7fd fb80 	bl	80025b0 <WaitTime_Init>
		}break;
 8004eb0:	e117      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
				ADC_HV_Measuerment(ON);
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7fc faf8 	bl	80014a8 <ADC_HV_Measuerment>
		}break;
 8004eb8:	e113      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			EXT_LD_Ctrl(ON);
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f7fc f9b2 	bl	8001224 <EXT_LD_Ctrl>
			EXT_PD_Ctrl(ON);
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7fc f9f7 	bl	80012b4 <EXT_PD_Ctrl>
			ADC_PD_Measuerment(OFF);
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f7fc fa3c 	bl	8001344 <ADC_PD_Measuerment>
			WaitTime_Init();
 8004ecc:	f7fd fb70 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_STAB_TIME;
 8004ed0:	4b87      	ldr	r3, [pc, #540]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004ed2:	2262      	movs	r2, #98	@ 0x62
 8004ed4:	701a      	strb	r2, [r3, #0]
		}break;
 8004ed6:	e104      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004ed8:	4b83      	ldr	r3, [pc, #524]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, PD_CTRL_ON_TIME) )
 8004ede:	2103      	movs	r1, #3
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	f7fd fb83 	bl	80025ec <WaitHoldTime_Sec>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f040 80f7 	bne.w	80050dc <Built_In_Test_Proc+0x8e8>
				WaitTime_Init();
 8004eee:	f7fd fb5f 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_CHK_ON;
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004ef4:	2264      	movs	r2, #100	@ 0x64
 8004ef6:	701a      	strb	r2, [r3, #0]
		}break;
 8004ef8:	e0f0      	b.n	80050dc <Built_In_Test_Proc+0x8e8>
			if ( true == WaitHoldTime_mSec(ON, PD_ADC_MEASURE_TIME) )
 8004efa:	211e      	movs	r1, #30
 8004efc:	2001      	movs	r0, #1
 8004efe:	f7fd fb9f 	bl	8002640 <WaitHoldTime_mSec>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d142      	bne.n	8004f8e <Built_In_Test_Proc+0x79a>
				tSysState.FlagGetAdcOn = OFF;
 8004f08:	4b77      	ldr	r3, [pc, #476]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	71da      	strb	r2, [r3, #7]
				if(DEFAULT_ADC_PD_ERROR_CNT > tPdCtrl.ErrorCount)
 8004f0e:	4b79      	ldr	r3, [pc, #484]	@ (80050f4 <Built_In_Test_Proc+0x900>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d814      	bhi.n	8004f44 <Built_In_Test_Proc+0x750>
					ADC_PD_Measuerment(OFF);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f7fc fa12 	bl	8001344 <ADC_PD_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_PD_OK, OFF);
 8004f20:	2100      	movs	r1, #0
 8004f22:	2006      	movs	r0, #6
 8004f24:	f7fd fbb6 	bl	8002694 <DeviceSetState>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f2e:	839a      	strh	r2, [r3, #28]
					tHvCtrl.FlagErrOn = OFF;
 8004f30:	4b6e      	ldr	r3, [pc, #440]	@ (80050ec <Built_In_Test_Proc+0x8f8>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_CTRL_ON;
 8004f36:	4b6e      	ldr	r3, [pc, #440]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004f38:	2270      	movs	r2, #112	@ 0x70
 8004f3a:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8004f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	779a      	strb	r2, [r3, #30]
 8004f42:	e021      	b.n	8004f88 <Built_In_Test_Proc+0x794>
					tSysState.ErrRetry++;
 8004f44:	4b68      	ldr	r3, [pc, #416]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f46:	7f9b      	ldrb	r3, [r3, #30]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	4b66      	ldr	r3, [pc, #408]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f4e:	779a      	strb	r2, [r3, #30]
					if(3 >= tSysState.ErrRetry) { m_BITProcSeq = BIT_SEQ_PD_SIG_ADC_CTRL_ON; }
 8004f50:	4b65      	ldr	r3, [pc, #404]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f52:	7f9b      	ldrb	r3, [r3, #30]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d803      	bhi.n	8004f60 <Built_In_Test_Proc+0x76c>
 8004f58:	4b65      	ldr	r3, [pc, #404]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004f5a:	2260      	movs	r2, #96	@ 0x60
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e010      	b.n	8004f82 <Built_In_Test_Proc+0x78e>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_PD_OK, OFF);
 8004f60:	2100      	movs	r1, #0
 8004f62:	2006      	movs	r0, #6
 8004f64:	f7fd fb96 	bl	8002694 <DeviceSetState>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f6e:	839a      	strh	r2, [r3, #28]
						tPdCtrl.FlagErrOn = ON;
 8004f70:	4b60      	ldr	r3, [pc, #384]	@ (80050f4 <Built_In_Test_Proc+0x900>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 8004f76:	4b5e      	ldr	r3, [pc, #376]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004f78:	22e0      	movs	r2, #224	@ 0xe0
 8004f7a:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8004f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8004f82:	4b59      	ldr	r3, [pc, #356]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 8004f88:	f7fd fb12 	bl	80025b0 <WaitTime_Init>
		}break;
 8004f8c:	e0a9      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
				ADC_PD_Measuerment(ON);
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f7fc f9d8 	bl	8001344 <ADC_PD_Measuerment>
		}break;
 8004f94:	e0a5      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			ADC_SiPM_Measuerment(OFF);
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7fc fade 	bl	8001558 <ADC_SiPM_Measuerment>
			EXT_SiPM_Ctrl(ON);
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f7fc f9ad 	bl	80012fc <EXT_SiPM_Ctrl>
			WaitTime_Init();
 8004fa2:	f7fd fb05 	bl	80025b0 <WaitTime_Init>
			m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_STAB_TIME;
 8004fa6:	4b52      	ldr	r3, [pc, #328]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004fa8:	2272      	movs	r2, #114	@ 0x72
 8004faa:	701a      	strb	r2, [r3, #0]
		}break;
 8004fac:	e099      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			tSysState.FlagGetAdcOn = ON;
 8004fae:	4b4e      	ldr	r3, [pc, #312]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	71da      	strb	r2, [r3, #7]
			if ( TRUE == WaitHoldTime_Sec(ON, SiPM_CTRL_ON_TIME) )
 8004fb4:	2103      	movs	r1, #3
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7fd fb18 	bl	80025ec <WaitHoldTime_Sec>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f040 808e 	bne.w	80050e0 <Built_In_Test_Proc+0x8ec>
				WaitTime_Init();
 8004fc4:	f7fd faf4 	bl	80025b0 <WaitTime_Init>
				m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_CHK_ON;
 8004fc8:	4b49      	ldr	r3, [pc, #292]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8004fca:	2274      	movs	r2, #116	@ 0x74
 8004fcc:	701a      	strb	r2, [r3, #0]
		}break;
 8004fce:	e087      	b.n	80050e0 <Built_In_Test_Proc+0x8ec>
			if ( true == WaitHoldTime_mSec(ON, PD_ADC_MEASURE_TIME) )
 8004fd0:	211e      	movs	r1, #30
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f7fd fb34 	bl	8002640 <WaitHoldTime_mSec>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d142      	bne.n	8005064 <Built_In_Test_Proc+0x870>
				tSysState.FlagGetAdcOn = OFF;
 8004fde:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	71da      	strb	r2, [r3, #7]
				if(DEFAULT_ADC_SiPM_ERROR_CNT > tSiPmCtrl.ErrorCount)
 8004fe4:	4b44      	ldr	r3, [pc, #272]	@ (80050f8 <Built_In_Test_Proc+0x904>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d814      	bhi.n	800501a <Built_In_Test_Proc+0x826>
					ADC_SiPM_Measuerment(OFF);
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f7fc fab1 	bl	8001558 <ADC_SiPM_Measuerment>
					tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SiPM_OK, OFF);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	2007      	movs	r0, #7
 8004ffa:	f7fd fb4b 	bl	8002694 <DeviceSetState>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005004:	839a      	strh	r2, [r3, #28]
					tSiPmCtrl.FlagErrOn = OFF;
 8005006:	4b3c      	ldr	r3, [pc, #240]	@ (80050f8 <Built_In_Test_Proc+0x904>)
 8005008:	2200      	movs	r2, #0
 800500a:	70da      	strb	r2, [r3, #3]
					m_BITProcSeq = BIT_SEQ_COMPLETE;
 800500c:	4b38      	ldr	r3, [pc, #224]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 800500e:	2290      	movs	r2, #144	@ 0x90
 8005010:	701a      	strb	r2, [r3, #0]
					tSysState.ErrRetry = 0;
 8005012:	4b35      	ldr	r3, [pc, #212]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005014:	2200      	movs	r2, #0
 8005016:	779a      	strb	r2, [r3, #30]
 8005018:	e021      	b.n	800505e <Built_In_Test_Proc+0x86a>
					tSysState.ErrRetry++;
 800501a:	4b33      	ldr	r3, [pc, #204]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 800501c:	7f9b      	ldrb	r3, [r3, #30]
 800501e:	3301      	adds	r3, #1
 8005020:	b2da      	uxtb	r2, r3
 8005022:	4b31      	ldr	r3, [pc, #196]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005024:	779a      	strb	r2, [r3, #30]
					if(3 >= tSysState.ErrRetry) { m_BITProcSeq = BIT_SEQ_SiPM_SIG_ADC_CTRL_ON; }
 8005026:	4b30      	ldr	r3, [pc, #192]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005028:	7f9b      	ldrb	r3, [r3, #30]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d803      	bhi.n	8005036 <Built_In_Test_Proc+0x842>
 800502e:	4b30      	ldr	r3, [pc, #192]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8005030:	2270      	movs	r2, #112	@ 0x70
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e010      	b.n	8005058 <Built_In_Test_Proc+0x864>
						tSysState.DeviceState = DeviceSetState(DEVICE_BIT_ADDR_SiPM_OK, ON);
 8005036:	2101      	movs	r1, #1
 8005038:	2007      	movs	r0, #7
 800503a:	f7fd fb2b 	bl	8002694 <DeviceSetState>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	4b29      	ldr	r3, [pc, #164]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005044:	839a      	strh	r2, [r3, #28]
						tSiPmCtrl.FlagErrOn = ON;
 8005046:	4b2c      	ldr	r3, [pc, #176]	@ (80050f8 <Built_In_Test_Proc+0x904>)
 8005048:	2201      	movs	r2, #1
 800504a:	70da      	strb	r2, [r3, #3]
						m_BITProcSeq = BIT_SEQ_ERROR;
 800504c:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 800504e:	22e0      	movs	r2, #224	@ 0xe0
 8005050:	701a      	strb	r2, [r3, #0]
						tSysState.ErrRetry = 0;
 8005052:	4b25      	ldr	r3, [pc, #148]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005054:	2200      	movs	r2, #0
 8005056:	779a      	strb	r2, [r3, #30]
					tSysState.FlagGetAdcOn  = ON;
 8005058:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 800505a:	2201      	movs	r2, #1
 800505c:	71da      	strb	r2, [r3, #7]
				WaitTime_Init();
 800505e:	f7fd faa7 	bl	80025b0 <WaitTime_Init>
		}break;
 8005062:	e03e      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
				ADC_SiPM_Measuerment(ON);
 8005064:	2001      	movs	r0, #1
 8005066:	f7fc fa77 	bl	8001558 <ADC_SiPM_Measuerment>
		}break;
 800506a:	e03a      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			WaitTime_Init();
 800506c:	f7fd faa0 	bl	80025b0 <WaitTime_Init>
			tSysState.BitChkOn = ON;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005072:	2201      	movs	r2, #1
 8005074:	711a      	strb	r2, [r3, #4]
			tSysState.flagBitErrOn = OFF;
 8005076:	4b1c      	ldr	r3, [pc, #112]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005078:	2200      	movs	r2, #0
 800507a:	715a      	strb	r2, [r3, #5]
			RspAssamblyTxMsg(CMD_BIT_MANUAL_START);
 800507c:	2000      	movs	r0, #0
 800507e:	f7fe fba9 	bl	80037d4 <RspAssamblyTxMsg>
			if(ON == tSysState.FlagBitChkOn)
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 8005084:	7c9b      	ldrb	r3, [r3, #18]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d102      	bne.n	8005090 <Built_In_Test_Proc+0x89c>
				tSysState.FlagBitChkOn = OFF;
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 800508c:	2200      	movs	r2, #0
 800508e:	749a      	strb	r2, [r3, #18]
			m_BITProcSeq = BIT_SEQ_IDLE;
 8005090:	4b17      	ldr	r3, [pc, #92]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
		}break;
 8005096:	e024      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
			tSysState.BitChkOn = OFF;
 8005098:	4b13      	ldr	r3, [pc, #76]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 800509a:	2200      	movs	r2, #0
 800509c:	711a      	strb	r2, [r3, #4]
			tSysState.flagBitErrOn = ON;
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	715a      	strb	r2, [r3, #5]
			tSysState.FlagBitChkOn = OFF;
 80050a4:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <Built_In_Test_Proc+0x8f4>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	749a      	strb	r2, [r3, #18]
			m_BITProcSeq = BIT_SEQ_FAIL;
 80050aa:	4b11      	ldr	r3, [pc, #68]	@ (80050f0 <Built_In_Test_Proc+0x8fc>)
 80050ac:	22ef      	movs	r2, #239	@ 0xef
 80050ae:	701a      	strb	r2, [r3, #0]
			RspAssamblyTxMsg(CMD_DEVICE_STATE);
 80050b0:	200e      	movs	r0, #14
 80050b2:	f7fe fb8f 	bl	80037d4 <RspAssamblyTxMsg>
		}break;
 80050b6:	e014      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050b8:	bf00      	nop
 80050ba:	e012      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050bc:	bf00      	nop
 80050be:	e010      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050c0:	bf00      	nop
 80050c2:	e00e      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050c4:	bf00      	nop
 80050c6:	e00c      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050c8:	bf00      	nop
 80050ca:	e00a      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050cc:	bf00      	nop
 80050ce:	e008      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050d0:	bf00      	nop
 80050d2:	e006      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050d4:	bf00      	nop
 80050d6:	e004      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050d8:	bf00      	nop
 80050da:	e002      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050dc:	bf00      	nop
 80050de:	e000      	b.n	80050e2 <Built_In_Test_Proc+0x8ee>
		}break;
 80050e0:	bf00      	nop
}
 80050e2:	bf00      	nop
 80050e4:	bd98      	pop	{r3, r4, r7, pc}
 80050e6:	bf00      	nop
 80050e8:	2000028c 	.word	0x2000028c
 80050ec:	20000094 	.word	0x20000094
 80050f0:	200002d4 	.word	0x200002d4
 80050f4:	20000074 	.word	0x20000074
 80050f8:	200000a4 	.word	0x200000a4

080050fc <SYSTEM_SEQ>:
void SYSTEM_SEQ(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
	switch(m_SysProcSeq)
 8005100:	4b87      	ldr	r3, [pc, #540]	@ (8005320 <SYSTEM_SEQ+0x224>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2bee      	cmp	r3, #238	@ 0xee
 8005106:	f000 80fb 	beq.w	8005300 <SYSTEM_SEQ+0x204>
 800510a:	2bee      	cmp	r3, #238	@ 0xee
 800510c:	f300 8105 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005110:	2be0      	cmp	r3, #224	@ 0xe0
 8005112:	f000 80f7 	beq.w	8005304 <SYSTEM_SEQ+0x208>
 8005116:	2be0      	cmp	r3, #224	@ 0xe0
 8005118:	f300 80ff 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 800511c:	2ba0      	cmp	r3, #160	@ 0xa0
 800511e:	f000 80eb 	beq.w	80052f8 <SYSTEM_SEQ+0x1fc>
 8005122:	2ba0      	cmp	r3, #160	@ 0xa0
 8005124:	f300 80f9 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005128:	2b90      	cmp	r3, #144	@ 0x90
 800512a:	f000 80ed 	beq.w	8005308 <SYSTEM_SEQ+0x20c>
 800512e:	2b90      	cmp	r3, #144	@ 0x90
 8005130:	f300 80f3 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005134:	2b80      	cmp	r3, #128	@ 0x80
 8005136:	f000 80e9 	beq.w	800530c <SYSTEM_SEQ+0x210>
 800513a:	2b80      	cmp	r3, #128	@ 0x80
 800513c:	f300 80ed 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005140:	2b70      	cmp	r3, #112	@ 0x70
 8005142:	f000 80d3 	beq.w	80052ec <SYSTEM_SEQ+0x1f0>
 8005146:	2b70      	cmp	r3, #112	@ 0x70
 8005148:	f300 80e7 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 800514c:	2b64      	cmp	r3, #100	@ 0x64
 800514e:	f000 80c4 	beq.w	80052da <SYSTEM_SEQ+0x1de>
 8005152:	2b64      	cmp	r3, #100	@ 0x64
 8005154:	f300 80e1 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005158:	2b60      	cmp	r3, #96	@ 0x60
 800515a:	f000 80ca 	beq.w	80052f2 <SYSTEM_SEQ+0x1f6>
 800515e:	2b60      	cmp	r3, #96	@ 0x60
 8005160:	f300 80db 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005164:	2b50      	cmp	r3, #80	@ 0x50
 8005166:	f000 80b5 	beq.w	80052d4 <SYSTEM_SEQ+0x1d8>
 800516a:	2b50      	cmp	r3, #80	@ 0x50
 800516c:	f300 80d5 	bgt.w	800531a <SYSTEM_SEQ+0x21e>
 8005170:	2b35      	cmp	r3, #53	@ 0x35
 8005172:	dc75      	bgt.n	8005260 <SYSTEM_SEQ+0x164>
 8005174:	2b00      	cmp	r3, #0
 8005176:	f2c0 80d0 	blt.w	800531a <SYSTEM_SEQ+0x21e>
 800517a:	2b35      	cmp	r3, #53	@ 0x35
 800517c:	f200 80cd 	bhi.w	800531a <SYSTEM_SEQ+0x21e>
 8005180:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <SYSTEM_SEQ+0x8c>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	08005267 	.word	0x08005267
 800518c:	0800531b 	.word	0x0800531b
 8005190:	0800531b 	.word	0x0800531b
 8005194:	0800531b 	.word	0x0800531b
 8005198:	0800531b 	.word	0x0800531b
 800519c:	08005311 	.word	0x08005311
 80051a0:	0800531b 	.word	0x0800531b
 80051a4:	0800531b 	.word	0x0800531b
 80051a8:	0800531b 	.word	0x0800531b
 80051ac:	0800531b 	.word	0x0800531b
 80051b0:	0800531b 	.word	0x0800531b
 80051b4:	0800531b 	.word	0x0800531b
 80051b8:	0800531b 	.word	0x0800531b
 80051bc:	0800531b 	.word	0x0800531b
 80051c0:	0800531b 	.word	0x0800531b
 80051c4:	0800531b 	.word	0x0800531b
 80051c8:	0800526f 	.word	0x0800526f
 80051cc:	0800531b 	.word	0x0800531b
 80051d0:	0800531b 	.word	0x0800531b
 80051d4:	0800531b 	.word	0x0800531b
 80051d8:	0800531b 	.word	0x0800531b
 80051dc:	0800531b 	.word	0x0800531b
 80051e0:	0800531b 	.word	0x0800531b
 80051e4:	0800531b 	.word	0x0800531b
 80051e8:	0800531b 	.word	0x0800531b
 80051ec:	0800531b 	.word	0x0800531b
 80051f0:	0800531b 	.word	0x0800531b
 80051f4:	0800531b 	.word	0x0800531b
 80051f8:	0800531b 	.word	0x0800531b
 80051fc:	0800531b 	.word	0x0800531b
 8005200:	0800531b 	.word	0x0800531b
 8005204:	0800531b 	.word	0x0800531b
 8005208:	08005311 	.word	0x08005311
 800520c:	0800531b 	.word	0x0800531b
 8005210:	0800531b 	.word	0x0800531b
 8005214:	0800531b 	.word	0x0800531b
 8005218:	0800531b 	.word	0x0800531b
 800521c:	08005311 	.word	0x08005311
 8005220:	0800531b 	.word	0x0800531b
 8005224:	0800531b 	.word	0x0800531b
 8005228:	0800531b 	.word	0x0800531b
 800522c:	0800531b 	.word	0x0800531b
 8005230:	0800531b 	.word	0x0800531b
 8005234:	0800531b 	.word	0x0800531b
 8005238:	0800531b 	.word	0x0800531b
 800523c:	0800531b 	.word	0x0800531b
 8005240:	0800531b 	.word	0x0800531b
 8005244:	0800531b 	.word	0x0800531b
 8005248:	08005291 	.word	0x08005291
 800524c:	0800531b 	.word	0x0800531b
 8005250:	0800531b 	.word	0x0800531b
 8005254:	0800531b 	.word	0x0800531b
 8005258:	0800531b 	.word	0x0800531b
 800525c:	0800529f 	.word	0x0800529f
 8005260:	2b40      	cmp	r3, #64	@ 0x40
 8005262:	d031      	beq.n	80052c8 <SYSTEM_SEQ+0x1cc>
		case SYS_SEQ_RESET :
		{
			SCB->AIRCR = AIRCR_VECTKEY_MASK | 0x04;
		}break;
	}
}
 8005264:	e059      	b.n	800531a <SYSTEM_SEQ+0x21e>
			m_SysProcSeq = SYS_SEQ_INIT;
 8005266:	4b2e      	ldr	r3, [pc, #184]	@ (8005320 <SYSTEM_SEQ+0x224>)
 8005268:	2210      	movs	r2, #16
 800526a:	701a      	strb	r2, [r3, #0]
		}break;
 800526c:	e055      	b.n	800531a <SYSTEM_SEQ+0x21e>
			FAN_Init();
 800526e:	f7fc fa5f 	bl	8001730 <FAN_Init>
			m_SysProcSeq = SYS_SEQ_READY; 				//Debug_ None BIT Check
 8005272:	4b2b      	ldr	r3, [pc, #172]	@ (8005320 <SYSTEM_SEQ+0x224>)
 8005274:	2205      	movs	r2, #5
 8005276:	701a      	strb	r2, [r3, #0]
			m_MaxPeckAdVal =  tParam[PM_CH1].LB;
 8005278:	4b2a      	ldr	r3, [pc, #168]	@ (8005324 <SYSTEM_SEQ+0x228>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	b29a      	uxth	r2, r3
 800527e:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <SYSTEM_SEQ+0x22c>)
 8005280:	801a      	strh	r2, [r3, #0]
			m_MaxPeckAdVal2 = tParam[PM_SiPM].LB;
 8005282:	4b28      	ldr	r3, [pc, #160]	@ (8005324 <SYSTEM_SEQ+0x228>)
 8005284:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005288:	b29a      	uxth	r2, r3
 800528a:	4b28      	ldr	r3, [pc, #160]	@ (800532c <SYSTEM_SEQ+0x230>)
 800528c:	801a      	strh	r2, [r3, #0]
		}break;
 800528e:	e044      	b.n	800531a <SYSTEM_SEQ+0x21e>
			m_BITProcSeq = BIT_SEQ_START; //Debug
 8005290:	4b27      	ldr	r3, [pc, #156]	@ (8005330 <SYSTEM_SEQ+0x234>)
 8005292:	2210      	movs	r2, #16
 8005294:	701a      	strb	r2, [r3, #0]
			m_SysProcSeq = SYS_SEQ_BIT_WAIT;
 8005296:	4b22      	ldr	r3, [pc, #136]	@ (8005320 <SYSTEM_SEQ+0x224>)
 8005298:	2235      	movs	r2, #53	@ 0x35
 800529a:	701a      	strb	r2, [r3, #0]
		}break;
 800529c:	e03d      	b.n	800531a <SYSTEM_SEQ+0x21e>
			Built_In_Test_Proc();
 800529e:	f7ff faa9 	bl	80047f4 <Built_In_Test_Proc>
			if(BIT_SEQ_IDLE == m_BITProcSeq )
 80052a2:	4b23      	ldr	r3, [pc, #140]	@ (8005330 <SYSTEM_SEQ+0x234>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d134      	bne.n	8005314 <SYSTEM_SEQ+0x218>
				if(ON == tSysState.flagBitErrOn ) 	{ m_SysProcSeq = SYS_SEQ_FAULT; }
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <SYSTEM_SEQ+0x238>)
 80052ac:	795b      	ldrb	r3, [r3, #5]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d102      	bne.n	80052b8 <SYSTEM_SEQ+0x1bc>
 80052b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005320 <SYSTEM_SEQ+0x224>)
 80052b4:	22ee      	movs	r2, #238	@ 0xee
 80052b6:	701a      	strb	r2, [r3, #0]
				if(ON == tSysState.BitChkOn)
 80052b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <SYSTEM_SEQ+0x238>)
 80052ba:	791b      	ldrb	r3, [r3, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d129      	bne.n	8005314 <SYSTEM_SEQ+0x218>
					m_SysProcSeq = SYS_SEQ_STANDBY_MODE;
 80052c0:	4b17      	ldr	r3, [pc, #92]	@ (8005320 <SYSTEM_SEQ+0x224>)
 80052c2:	2240      	movs	r2, #64	@ 0x40
 80052c4:	701a      	strb	r2, [r3, #0]
		}break;
 80052c6:	e025      	b.n	8005314 <SYSTEM_SEQ+0x218>
			Measure_Stop();
 80052c8:	f7fd fe34 	bl	8002f34 <Measure_Stop>
			m_SysProcSeq = SYS_SEQ_READY;
 80052cc:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <SYSTEM_SEQ+0x224>)
 80052ce:	2205      	movs	r2, #5
 80052d0:	701a      	strb	r2, [r3, #0]
		}break;
 80052d2:	e022      	b.n	800531a <SYSTEM_SEQ+0x21e>
			Operating_Process();
 80052d4:	f7ff f950 	bl	8004578 <Operating_Process>
		}break;
 80052d8:	e01f      	b.n	800531a <SYSTEM_SEQ+0x21e>
			if(TRUE == FanCleanCtrl()) {
 80052da:	f7fd fd29 	bl	8002d30 <FanCleanCtrl>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d119      	bne.n	8005318 <SYSTEM_SEQ+0x21c>
				m_SysProcSeq = SYS_SEQ_READY;
 80052e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <SYSTEM_SEQ+0x224>)
 80052e6:	2205      	movs	r2, #5
 80052e8:	701a      	strb	r2, [r3, #0]
		}break;
 80052ea:	e015      	b.n	8005318 <SYSTEM_SEQ+0x21c>
			Manual_GetAdcMsg();
 80052ec:	f7fe fde4 	bl	8003eb8 <Manual_GetAdcMsg>
		}break;
 80052f0:	e013      	b.n	800531a <SYSTEM_SEQ+0x21e>
			Measure_Stop();
 80052f2:	f7fd fe1f 	bl	8002f34 <Measure_Stop>
		}break;
 80052f6:	e010      	b.n	800531a <SYSTEM_SEQ+0x21e>
			SCB->AIRCR = AIRCR_VECTKEY_MASK | 0x04;
 80052f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005338 <SYSTEM_SEQ+0x23c>)
 80052fa:	4a10      	ldr	r2, [pc, #64]	@ (800533c <SYSTEM_SEQ+0x240>)
 80052fc:	60da      	str	r2, [r3, #12]
		}break;
 80052fe:	e00c      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 8005300:	bf00      	nop
 8005302:	e00a      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 8005304:	bf00      	nop
 8005306:	e008      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 8005308:	bf00      	nop
 800530a:	e006      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 800530c:	bf00      	nop
 800530e:	e004      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <SYSTEM_SEQ+0x21e>
		}break;
 8005318:	bf00      	nop
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	200002d5 	.word	0x200002d5
 8005324:	200000cc 	.word	0x200000cc
 8005328:	200002d6 	.word	0x200002d6
 800532c:	200002d8 	.word	0x200002d8
 8005330:	200002d4 	.word	0x200002d4
 8005334:	2000028c 	.word	0x2000028c
 8005338:	e000ed00 	.word	0xe000ed00
 800533c:	05fa0004 	.word	0x05fa0004

08005340 <SYSTEM_Process>:

void SYSTEM_Process(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
	UART_MsgProc();
 8005344:	f000 fb5c 	bl	8005a00 <UART_MsgProc>
	PostMessage_Proc();
 8005348:	f7fe ff42 	bl	80041d0 <PostMessage_Proc>

	SYSTEM_SEQ();
 800534c:	f7ff fed6 	bl	80050fc <SYSTEM_SEQ>
	SystemTimeCtrl();
 8005350:	f000 f802 	bl	8005358 <SystemTimeCtrl>
}
 8005354:	bf00      	nop
 8005356:	bd80      	pop	{r7, pc}

08005358 <SystemTimeCtrl>:

void SystemTimeCtrl(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
	if(ON == tSysTime.FlagSysTickOn)
 800535c:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <SystemTimeCtrl+0xa4>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d111      	bne.n	8005388 <SystemTimeCtrl+0x30>
	{
		tSysTime.Sys10mSecTick++;
 8005364:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <SystemTimeCtrl+0xa4>)
 8005366:	7b9b      	ldrb	r3, [r3, #14]
 8005368:	3301      	adds	r3, #1
 800536a:	b2da      	uxtb	r2, r3
 800536c:	4b23      	ldr	r3, [pc, #140]	@ (80053fc <SystemTimeCtrl+0xa4>)
 800536e:	739a      	strb	r2, [r3, #14]

		if(ON == tSysTime.FlagWaitmSecTimeOn) { tSysTime.WaitmSecTime++; }
 8005370:	4b22      	ldr	r3, [pc, #136]	@ (80053fc <SystemTimeCtrl+0xa4>)
 8005372:	7f1b      	ldrb	r3, [r3, #28]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d104      	bne.n	8005382 <SystemTimeCtrl+0x2a>
 8005378:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <SystemTimeCtrl+0xa4>)
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	3301      	adds	r3, #1
 800537e:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <SystemTimeCtrl+0xa4>)
 8005380:	6213      	str	r3, [r2, #32]
		tSysTime.FlagSysTickOn = OFF;
 8005382:	4b1e      	ldr	r3, [pc, #120]	@ (80053fc <SystemTimeCtrl+0xa4>)
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]


	}

	if (TICK_100mSEC <= tSysTime.Sys10mSecTick)
 8005388:	4b1c      	ldr	r3, [pc, #112]	@ (80053fc <SystemTimeCtrl+0xa4>)
 800538a:	7b9b      	ldrb	r3, [r3, #14]
 800538c:	2b09      	cmp	r3, #9
 800538e:	d908      	bls.n	80053a2 <SystemTimeCtrl+0x4a>
	{
		tSysTime.Sys10mSecTick = 0;
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <SystemTimeCtrl+0xa4>)
 8005392:	2200      	movs	r2, #0
 8005394:	739a      	strb	r2, [r3, #14]
		tSysTime.Sys100mSecTick++;
 8005396:	4b19      	ldr	r3, [pc, #100]	@ (80053fc <SystemTimeCtrl+0xa4>)
 8005398:	8a1b      	ldrh	r3, [r3, #16]
 800539a:	3301      	adds	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	4b17      	ldr	r3, [pc, #92]	@ (80053fc <SystemTimeCtrl+0xa4>)
 80053a0:	821a      	strh	r2, [r3, #16]
	}

	if (TICK_1SEC <= tSysTime.Sys100mSecTick)
 80053a2:	4b16      	ldr	r3, [pc, #88]	@ (80053fc <SystemTimeCtrl+0xa4>)
 80053a4:	8a1b      	ldrh	r3, [r3, #16]
 80053a6:	2b09      	cmp	r3, #9
 80053a8:	d926      	bls.n	80053f8 <SystemTimeCtrl+0xa0>
	{
		tSysTime.Sys100mSecTick = 0;
 80053aa:	4b14      	ldr	r3, [pc, #80]	@ (80053fc <SystemTimeCtrl+0xa4>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	821a      	strh	r2, [r3, #16]
		if(ON == tSysState.FlagOperModeOn)
 80053b0:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <SystemTimeCtrl+0xa8>)
 80053b2:	7adb      	ldrb	r3, [r3, #11]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d111      	bne.n	80053dc <SystemTimeCtrl+0x84>
		{
			if(ON == tFan.FlagCleanModeOn)
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <SystemTimeCtrl+0xac>)
 80053ba:	799b      	ldrb	r3, [r3, #6]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10d      	bne.n	80053dc <SystemTimeCtrl+0x84>
			{
				tFan.CleWorkTime++;
 80053c0:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <SystemTimeCtrl+0xac>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005404 <SystemTimeCtrl+0xac>)
 80053c8:	6093      	str	r3, [r2, #8]

				if(tFan.CleInterval <= tFan.CleWorkTime)
 80053ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <SystemTimeCtrl+0xac>)
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <SystemTimeCtrl+0xac>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d802      	bhi.n	80053dc <SystemTimeCtrl+0x84>
				{
					tSysState.FlagStatClenaOn = ON;
 80053d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <SystemTimeCtrl+0xa8>)
 80053d8:	2201      	movs	r2, #1
 80053da:	735a      	strb	r2, [r3, #13]
		  memcpy(tUartMsg.RingTxTemp, temp, 14);
		  tUartMsg.TxTempCnt = 13;
		  tMsgPkt.FlagTxPktOn = ON;
*/

		MCU_AlarmTempMonitor(tSysState.Temp);
 80053dc:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <SystemTimeCtrl+0xa8>)
 80053de:	8b1b      	ldrh	r3, [r3, #24]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fd f983 	bl	80026ec <MCU_AlarmTempMonitor>
		if(ON == tSysTime.FlagWaitSecTimeOn) { tSysTime.WaitSecTime++; }
 80053e6:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <SystemTimeCtrl+0xa4>)
 80053e8:	7d1b      	ldrb	r3, [r3, #20]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d104      	bne.n	80053f8 <SystemTimeCtrl+0xa0>
 80053ee:	4b03      	ldr	r3, [pc, #12]	@ (80053fc <SystemTimeCtrl+0xa4>)
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a01      	ldr	r2, [pc, #4]	@ (80053fc <SystemTimeCtrl+0xa4>)
 80053f6:	6193      	str	r3, [r2, #24]
	}
}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200002ac 	.word	0x200002ac
 8005400:	2000028c 	.word	0x2000028c
 8005404:	200000b4 	.word	0x200000b4

08005408 <UART_RxInit>:
struct _tUART_MSG 		tUartMsg;
struct _tMSG_PACKET		tMsgPkt;


void UART_RxInit()
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
	tMsgPkt.RxMsgCnt = 0;
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <UART_RxInit+0x2c>)
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
	tUartMsg.RxTempCnt = 0;
 8005414:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <UART_RxInit+0x30>)
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
	//tUartMsg.uNewPos = 0;
	//tUartMsg.uOldPos = 0;
	tUartMsg.FlagMsgRcvOn = OFF;
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <UART_RxInit+0x30>)
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286

	//memset(tUartMsg.RingRxTemp, 0, sizeof(tUartMsg.RingRxTemp));
	memset(tMsgPkt.RxBuff, 0, sizeof(tMsgPkt.RxBuff));
 8005424:	2280      	movs	r2, #128	@ 0x80
 8005426:	2100      	movs	r1, #0
 8005428:	4802      	ldr	r0, [pc, #8]	@ (8005434 <UART_RxInit+0x2c>)
 800542a:	f007 fc53 	bl	800ccd4 <memset>
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000570 	.word	0x20000570
 8005438:	200002e4 	.word	0x200002e4

0800543c <UART_TxInit>:

void UART_TxInit()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
	tMsgPkt.TxMsgCnt = 0;
 8005440:	4b16      	ldr	r3, [pc, #88]	@ (800549c <UART_TxInit+0x60>)
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	tMsgPkt.FlagTxPktOn = OFF;
 8005448:	4b14      	ldr	r3, [pc, #80]	@ (800549c <UART_TxInit+0x60>)
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	tMsgPkt.Cmd = 0;
 8005450:	4b12      	ldr	r3, [pc, #72]	@ (800549c <UART_TxInit+0x60>)
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	tMsgPkt.Chksum = 0;
 8005458:	4b10      	ldr	r3, [pc, #64]	@ (800549c <UART_TxInit+0x60>)
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
	tMsgPkt.Set = 0;
 8005460:	4b0e      	ldr	r3, [pc, #56]	@ (800549c <UART_TxInit+0x60>)
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
	tMsgPkt.Leng = 0;
 8005468:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <UART_TxInit+0x60>)
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

	tUartMsg.TxTempCnt = 0;
 8005470:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <UART_TxInit+0x64>)
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282
	tMsgPkt.MsgState = MSG_STAT_NO_ERR;
 8005478:	4b08      	ldr	r3, [pc, #32]	@ (800549c <UART_TxInit+0x60>)
 800547a:	2200      	movs	r2, #0
 800547c:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	memset(tMsgPkt.Txbuff, 0, sizeof(tMsgPkt.Txbuff));
 8005480:	2280      	movs	r2, #128	@ 0x80
 8005482:	2100      	movs	r1, #0
 8005484:	4807      	ldr	r0, [pc, #28]	@ (80054a4 <UART_TxInit+0x68>)
 8005486:	f007 fc25 	bl	800ccd4 <memset>
	memset(tUartMsg.RingTxTemp, 0, sizeof(tUartMsg.RingTxTemp));
 800548a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800548e:	2100      	movs	r1, #0
 8005490:	4805      	ldr	r0, [pc, #20]	@ (80054a8 <UART_TxInit+0x6c>)
 8005492:	f007 fc1f 	bl	800ccd4 <memset>
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000570 	.word	0x20000570
 80054a0:	200002e4 	.word	0x200002e4
 80054a4:	200005f0 	.word	0x200005f0
 80054a8:	200003e4 	.word	0x200003e4

080054ac <UART_CMD_CHK>:

uint8_t UART_CMD_CHK(uint8_t nCmd, uint8_t nLeng)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	460a      	mov	r2, r1
 80054b6:	71fb      	strb	r3, [r7, #7]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71bb      	strb	r3, [r7, #6]
	uint8_t Result = FALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]

	switch (nCmd)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	dc2a      	bgt.n	800551c <UART_CMD_CHK+0x70>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f2c0 80cf 	blt.w	800566a <UART_CMD_CHK+0x1be>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	f200 80cc 	bhi.w	800566a <UART_CMD_CHK+0x1be>
 80054d2:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_CMD_CHK+0x2c>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	08005523 	.word	0x08005523
 80054dc:	0800552f 	.word	0x0800552f
 80054e0:	0800553b 	.word	0x0800553b
 80054e4:	08005547 	.word	0x08005547
 80054e8:	08005553 	.word	0x08005553
 80054ec:	0800555f 	.word	0x0800555f
 80054f0:	08005571 	.word	0x08005571
 80054f4:	08005583 	.word	0x08005583
 80054f8:	08005595 	.word	0x08005595
 80054fc:	080055a1 	.word	0x080055a1
 8005500:	080055ad 	.word	0x080055ad
 8005504:	080055b9 	.word	0x080055b9
 8005508:	080055c5 	.word	0x080055c5
 800550c:	080055dd 	.word	0x080055dd
 8005510:	080055ef 	.word	0x080055ef
 8005514:	080055fb 	.word	0x080055fb
 8005518:	08005607 	.word	0x08005607
 800551c:	2bf0      	cmp	r3, #240	@ 0xf0
 800551e:	d07b      	beq.n	8005618 <UART_CMD_CHK+0x16c>
 8005520:	e0a3      	b.n	800566a <UART_CMD_CHK+0x1be>
	{
		case CMD_BIT_MANUAL_START : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 8005522:	79bb      	ldrb	r3, [r7, #6]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d17d      	bne.n	8005624 <UART_CMD_CHK+0x178>
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e07a      	b.n	8005624 <UART_CMD_CHK+0x178>
		case CMD_MEASUER_START : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 800552e:	79bb      	ldrb	r3, [r7, #6]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d179      	bne.n	8005628 <UART_CMD_CHK+0x17c>
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	e076      	b.n	8005628 <UART_CMD_CHK+0x17c>
		case CMD_MEASUER_STOP : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 800553a:	79bb      	ldrb	r3, [r7, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d175      	bne.n	800562c <UART_CMD_CHK+0x180>
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	e072      	b.n	800562c <UART_CMD_CHK+0x180>
		case CMD_MEASUER_READ_VAL : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 8005546:	79bb      	ldrb	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d171      	bne.n	8005630 <UART_CMD_CHK+0x184>
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	e06e      	b.n	8005630 <UART_CMD_CHK+0x184>
		case CMD_START_FAN_CLEAN : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 8005552:	79bb      	ldrb	r3, [r7, #6]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d16d      	bne.n	8005634 <UART_CMD_CHK+0x188>
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e06a      	b.n	8005634 <UART_CMD_CHK+0x188>
		case CMD_GET_AT_CLEAN_SEC : 	{ if ((1 == nLeng) || (2 == nLeng)) { Result = TRUE; } } break;
 800555e:	79bb      	ldrb	r3, [r7, #6]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d002      	beq.n	800556a <UART_CMD_CHK+0xbe>
 8005564:	79bb      	ldrb	r3, [r7, #6]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d166      	bne.n	8005638 <UART_CMD_CHK+0x18c>
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
 800556e:	e063      	b.n	8005638 <UART_CMD_CHK+0x18c>
		case CMD_AT_CLEAN_INTVAL : 		{ if ((1 == nLeng) || (5 == nLeng)) { Result = TRUE; } } break;
 8005570:	79bb      	ldrb	r3, [r7, #6]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d002      	beq.n	800557c <UART_CMD_CHK+0xd0>
 8005576:	79bb      	ldrb	r3, [r7, #6]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d15f      	bne.n	800563c <UART_CMD_CHK+0x190>
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
 8005580:	e05c      	b.n	800563c <UART_CMD_CHK+0x190>
		case CMD_BOUNDARY_VOLT : 		{ if ((2 == nLeng) || (4 == nLeng)) { Result = TRUE; } } break;
 8005582:	79bb      	ldrb	r3, [r7, #6]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d002      	beq.n	800558e <UART_CMD_CHK+0xe2>
 8005588:	79bb      	ldrb	r3, [r7, #6]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d158      	bne.n	8005640 <UART_CMD_CHK+0x194>
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
 8005592:	e055      	b.n	8005640 <UART_CMD_CHK+0x194>
		case CMD_PD_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005594:	79bb      	ldrb	r3, [r7, #6]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d154      	bne.n	8005644 <UART_CMD_CHK+0x198>
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e051      	b.n	8005644 <UART_CMD_CHK+0x198>
		case CMD_SIPM_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 80055a0:	79bb      	ldrb	r3, [r7, #6]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d150      	bne.n	8005648 <UART_CMD_CHK+0x19c>
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
 80055aa:	e04d      	b.n	8005648 <UART_CMD_CHK+0x19c>
		case CMD_SLEEP_MODE	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 80055ac:	79bb      	ldrb	r3, [r7, #6]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d14c      	bne.n	800564c <UART_CMD_CHK+0x1a0>
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	e049      	b.n	800564c <UART_CMD_CHK+0x1a0>
		case CMD_WAKE_UP	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 80055b8:	79bb      	ldrb	r3, [r7, #6]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d148      	bne.n	8005650 <UART_CMD_CHK+0x1a4>
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e045      	b.n	8005650 <UART_CMD_CHK+0x1a4>
		case CMD_DEVICE_INFO	:		{ if ((1 == nLeng) || (8 == nLeng) || (16 == nLeng)) { Result = TRUE; } } break;
 80055c4:	79bb      	ldrb	r3, [r7, #6]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d005      	beq.n	80055d6 <UART_CMD_CHK+0x12a>
 80055ca:	79bb      	ldrb	r3, [r7, #6]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d002      	beq.n	80055d6 <UART_CMD_CHK+0x12a>
 80055d0:	79bb      	ldrb	r3, [r7, #6]
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d13e      	bne.n	8005654 <UART_CMD_CHK+0x1a8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e03b      	b.n	8005654 <UART_CMD_CHK+0x1a8>
		case CMD_DEVICE_VER	:			{ if ((1 == nLeng) || (5 == nLeng)) 				 { Result = TRUE; } } break;
 80055dc:	79bb      	ldrb	r3, [r7, #6]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d002      	beq.n	80055e8 <UART_CMD_CHK+0x13c>
 80055e2:	79bb      	ldrb	r3, [r7, #6]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d137      	bne.n	8005658 <UART_CMD_CHK+0x1ac>
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
 80055ec:	e034      	b.n	8005658 <UART_CMD_CHK+0x1ac>
		case CMD_DEVICE_STATE	:		{ if (1 == nLeng) { Result = TRUE; } } break;
 80055ee:	79bb      	ldrb	r3, [r7, #6]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d133      	bne.n	800565c <UART_CMD_CHK+0x1b0>
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e030      	b.n	800565c <UART_CMD_CHK+0x1b0>
		case CMD_SOFT_RESET	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 80055fa:	79bb      	ldrb	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d12f      	bne.n	8005660 <UART_CMD_CHK+0x1b4>
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
 8005604:	e02c      	b.n	8005660 <UART_CMD_CHK+0x1b4>
		case CMD_SET_CORRECTION_VAL :	{ if ((2 == nLeng) || (6 == nLeng)) { Result = TRUE; }  } break;
 8005606:	79bb      	ldrb	r3, [r7, #6]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d002      	beq.n	8005612 <UART_CMD_CHK+0x166>
 800560c:	79bb      	ldrb	r3, [r7, #6]
 800560e:	2b06      	cmp	r3, #6
 8005610:	d128      	bne.n	8005664 <UART_CMD_CHK+0x1b8>
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	e025      	b.n	8005664 <UART_CMD_CHK+0x1b8>
		case CMD_SET_FIRMWARE_DOWNLOAD:	{ if (0 == nLeng) { Result = TRUE; }  } break;
 8005618:	79bb      	ldrb	r3, [r7, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d124      	bne.n	8005668 <UART_CMD_CHK+0x1bc>
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e021      	b.n	8005668 <UART_CMD_CHK+0x1bc>
		case CMD_BIT_MANUAL_START : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 8005624:	bf00      	nop
 8005626:	e020      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_MEASUER_START : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005628:	bf00      	nop
 800562a:	e01e      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_MEASUER_STOP : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 800562c:	bf00      	nop
 800562e:	e01c      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_MEASUER_READ_VAL : 	{ if (0 == nLeng) { Result = TRUE; } } break;
 8005630:	bf00      	nop
 8005632:	e01a      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_START_FAN_CLEAN : 		{ if (0 == nLeng) { Result = TRUE; } } break;
 8005634:	bf00      	nop
 8005636:	e018      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_GET_AT_CLEAN_SEC : 	{ if ((1 == nLeng) || (2 == nLeng)) { Result = TRUE; } } break;
 8005638:	bf00      	nop
 800563a:	e016      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_AT_CLEAN_INTVAL : 		{ if ((1 == nLeng) || (5 == nLeng)) { Result = TRUE; } } break;
 800563c:	bf00      	nop
 800563e:	e014      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_BOUNDARY_VOLT : 		{ if ((2 == nLeng) || (4 == nLeng)) { Result = TRUE; } } break;
 8005640:	bf00      	nop
 8005642:	e012      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_PD_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005644:	bf00      	nop
 8005646:	e010      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_SIPM_TEST_MODE : 		{ if (2 == nLeng) { Result = TRUE; } } break;
 8005648:	bf00      	nop
 800564a:	e00e      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_SLEEP_MODE	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 800564c:	bf00      	nop
 800564e:	e00c      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_WAKE_UP	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 8005650:	bf00      	nop
 8005652:	e00a      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_DEVICE_INFO	:		{ if ((1 == nLeng) || (8 == nLeng) || (16 == nLeng)) { Result = TRUE; } } break;
 8005654:	bf00      	nop
 8005656:	e008      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_DEVICE_VER	:			{ if ((1 == nLeng) || (5 == nLeng)) 				 { Result = TRUE; } } break;
 8005658:	bf00      	nop
 800565a:	e006      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_DEVICE_STATE	:		{ if (1 == nLeng) { Result = TRUE; } } break;
 800565c:	bf00      	nop
 800565e:	e004      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_SOFT_RESET	:			{ if (0 == nLeng) { Result = TRUE; } } break;
 8005660:	bf00      	nop
 8005662:	e002      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_SET_CORRECTION_VAL :	{ if ((2 == nLeng) || (6 == nLeng)) { Result = TRUE; }  } break;
 8005664:	bf00      	nop
 8005666:	e000      	b.n	800566a <UART_CMD_CHK+0x1be>
		case CMD_SET_FIRMWARE_DOWNLOAD:	{ if (0 == nLeng) { Result = TRUE; }  } break;
 8005668:	bf00      	nop
	}

	return Result;
 800566a:	7bfb      	ldrb	r3, [r7, #15]

}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <FindRcvMsgToPacket>:

uint8_t FindRcvMsgToPacket(uint8_t* nRcvMsg, uint8_t nRcvCnt)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
	uint8_t ChkSum = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	73bb      	strb	r3, [r7, #14]
	uint8_t ChksCnt = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	737b      	strb	r3, [r7, #13]

	uint8_t MsgCnt = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	733b      	strb	r3, [r7, #12]
	uint8_t flagPacktOn = OFF;
 8005694:	2300      	movs	r3, #0
 8005696:	72fb      	strb	r3, [r7, #11]

	uint8_t Result = TRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	72bb      	strb	r3, [r7, #10]
	uint8_t FlagstuffOn = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	727b      	strb	r3, [r7, #9]
	uint8_t stuffSkipCnt = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	723b      	strb	r3, [r7, #8]

	tMsgPkt.MsgState = 0x00;
 80056a4:	4b8b      	ldr	r3, [pc, #556]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

	for (i = 0; i < nRcvCnt; i++)
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
 80056b0:	e0ae      	b.n	8005810 <FindRcvMsgToPacket+0x198>
	{
		if ((FALSE==flagPacktOn) && (STX == nRcvMsg[i]))
 80056b2:	7afb      	ldrb	r3, [r7, #11]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d116      	bne.n	80056e6 <FindRcvMsgToPacket+0x6e>
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80056c2:	d110      	bne.n	80056e6 <FindRcvMsgToPacket+0x6e>
		{
			tMsgPkt.RxBuff[MsgCnt] = nRcvMsg[i];
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	441a      	add	r2, r3
 80056ca:	7b3b      	ldrb	r3, [r7, #12]
 80056cc:	7811      	ldrb	r1, [r2, #0]
 80056ce:	4a81      	ldr	r2, [pc, #516]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80056d0:	54d1      	strb	r1, [r2, r3]
			flagPacktOn = ON;
 80056d2:	2301      	movs	r3, #1
 80056d4:	72fb      	strb	r3, [r7, #11]
			ChkSum = ChkSum + tMsgPkt.RxBuff[MsgCnt];
 80056d6:	7b3b      	ldrb	r3, [r7, #12]
 80056d8:	4a7e      	ldr	r2, [pc, #504]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80056da:	5cd2      	ldrb	r2, [r2, r3]
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	4413      	add	r3, r2
 80056e0:	73bb      	strb	r3, [r7, #14]
			ChksCnt = i;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	737b      	strb	r3, [r7, #13]
		}

		if ( (ON == flagPacktOn ) && (i >= ChksCnt + 1) )
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	f040 808e 	bne.w	800580a <FindRcvMsgToPacket+0x192>
 80056ee:	7b7a      	ldrb	r2, [r7, #13]
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	f080 8089 	bcs.w	800580a <FindRcvMsgToPacket+0x192>
		{
			MsgCnt++;
 80056f8:	7b3b      	ldrb	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	733b      	strb	r3, [r7, #12]

			 	  if( (0xDB == nRcvMsg[MsgCnt]) && (0xDC == nRcvMsg[MsgCnt+1]) ) { tMsgPkt.RxBuff[MsgCnt] = 0xC0; FlagstuffOn = ON; }
 80056fe:	7b3b      	ldrb	r3, [r7, #12]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2bdb      	cmp	r3, #219	@ 0xdb
 8005708:	d10d      	bne.n	8005726 <FindRcvMsgToPacket+0xae>
 800570a:	7b3b      	ldrb	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2bdc      	cmp	r3, #220	@ 0xdc
 8005716:	d106      	bne.n	8005726 <FindRcvMsgToPacket+0xae>
 8005718:	7b3b      	ldrb	r3, [r7, #12]
 800571a:	4a6e      	ldr	r2, [pc, #440]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800571c:	21c0      	movs	r1, #192	@ 0xc0
 800571e:	54d1      	strb	r1, [r2, r3]
 8005720:	2301      	movs	r3, #1
 8005722:	727b      	strb	r3, [r7, #9]
 8005724:	e026      	b.n	8005774 <FindRcvMsgToPacket+0xfc>
			 else if( (0xDB == nRcvMsg[MsgCnt]) && (0xDD == nRcvMsg[MsgCnt+1]) ) { tMsgPkt.RxBuff[MsgCnt] = 0xDB; FlagstuffOn = ON; }
 8005726:	7b3b      	ldrb	r3, [r7, #12]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2bdb      	cmp	r3, #219	@ 0xdb
 8005730:	d10d      	bne.n	800574e <FindRcvMsgToPacket+0xd6>
 8005732:	7b3b      	ldrb	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2bdd      	cmp	r3, #221	@ 0xdd
 800573e:	d106      	bne.n	800574e <FindRcvMsgToPacket+0xd6>
 8005740:	7b3b      	ldrb	r3, [r7, #12]
 8005742:	4a64      	ldr	r2, [pc, #400]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005744:	21db      	movs	r1, #219	@ 0xdb
 8005746:	54d1      	strb	r1, [r2, r3]
 8005748:	2301      	movs	r3, #1
 800574a:	727b      	strb	r3, [r7, #9]
 800574c:	e012      	b.n	8005774 <FindRcvMsgToPacket+0xfc>
			 else if( (0xDB == nRcvMsg[MsgCnt]) && (0xDE == nRcvMsg[MsgCnt+1]) ) { tMsgPkt.RxBuff[MsgCnt] = 0xC2; FlagstuffOn = ON; }
 800574e:	7b3b      	ldrb	r3, [r7, #12]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2bdb      	cmp	r3, #219	@ 0xdb
 8005758:	d10c      	bne.n	8005774 <FindRcvMsgToPacket+0xfc>
 800575a:	7b3b      	ldrb	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2bde      	cmp	r3, #222	@ 0xde
 8005766:	d105      	bne.n	8005774 <FindRcvMsgToPacket+0xfc>
 8005768:	7b3b      	ldrb	r3, [r7, #12]
 800576a:	4a5a      	ldr	r2, [pc, #360]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800576c:	21c2      	movs	r1, #194	@ 0xc2
 800576e:	54d1      	strb	r1, [r2, r3]
 8005770:	2301      	movs	r3, #1
 8005772:	727b      	strb	r3, [r7, #9]

			if(OFF == FlagstuffOn)
 8005774:	7a7b      	ldrb	r3, [r7, #9]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d139      	bne.n	80057ee <FindRcvMsgToPacket+0x176>
			{
				tMsgPkt.RxBuff[MsgCnt] = nRcvMsg[i];
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	441a      	add	r2, r3
 8005780:	7b3b      	ldrb	r3, [r7, #12]
 8005782:	7811      	ldrb	r1, [r2, #0]
 8005784:	4a53      	ldr	r2, [pc, #332]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005786:	54d1      	strb	r1, [r2, r3]

				if(1 == MsgCnt) { tMsgPkt.Addr = tMsgPkt.RxBuff[MsgCnt];  }
 8005788:	7b3b      	ldrb	r3, [r7, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <FindRcvMsgToPacket+0x122>
 800578e:	7b3b      	ldrb	r3, [r7, #12]
 8005790:	4a50      	ldr	r2, [pc, #320]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005792:	5cd2      	ldrb	r2, [r2, r3]
 8005794:	4b4f      	ldr	r3, [pc, #316]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005796:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
				if(2 == MsgCnt) { tMsgPkt.Cmd  = tMsgPkt.RxBuff[MsgCnt];  }
 800579a:	7b3b      	ldrb	r3, [r7, #12]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d105      	bne.n	80057ac <FindRcvMsgToPacket+0x134>
 80057a0:	7b3b      	ldrb	r3, [r7, #12]
 80057a2:	4a4c      	ldr	r2, [pc, #304]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80057a4:	5cd2      	ldrb	r2, [r2, r3]
 80057a6:	4b4b      	ldr	r3, [pc, #300]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80057a8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
				if(3 == MsgCnt) { tMsgPkt.Leng = tMsgPkt.RxBuff[MsgCnt];  }
 80057ac:	7b3b      	ldrb	r3, [r7, #12]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d105      	bne.n	80057be <FindRcvMsgToPacket+0x146>
 80057b2:	7b3b      	ldrb	r3, [r7, #12]
 80057b4:	4a47      	ldr	r2, [pc, #284]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80057b6:	5cd2      	ldrb	r2, [r2, r3]
 80057b8:	4b46      	ldr	r3, [pc, #280]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80057ba:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

				if(i < (nRcvCnt-2)) {
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	3b02      	subs	r3, #2
 80057c4:	429a      	cmp	r2, r3
 80057c6:	da05      	bge.n	80057d4 <FindRcvMsgToPacket+0x15c>
					ChkSum = (uint8_t)(ChkSum + tMsgPkt.RxBuff[MsgCnt]);
 80057c8:	7b3b      	ldrb	r3, [r7, #12]
 80057ca:	4a42      	ldr	r2, [pc, #264]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80057cc:	5cd2      	ldrb	r2, [r2, r3]
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	4413      	add	r3, r2
 80057d2:	73bb      	strb	r3, [r7, #14]
				}

				if(ETX == nRcvMsg[i])
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4413      	add	r3, r2
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2bc2      	cmp	r3, #194	@ 0xc2
 80057de:	d114      	bne.n	800580a <FindRcvMsgToPacket+0x192>
				{
					ChkSum = (uint8_t)(ChkSum + tMsgPkt.RxBuff[MsgCnt]);
 80057e0:	7b3b      	ldrb	r3, [r7, #12]
 80057e2:	4a3c      	ldr	r2, [pc, #240]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80057e4:	5cd2      	ldrb	r2, [r2, r3]
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	4413      	add	r3, r2
 80057ea:	73bb      	strb	r3, [r7, #14]
					break;
 80057ec:	e015      	b.n	800581a <FindRcvMsgToPacket+0x1a2>
				}
			}

			else
			{
				stuffSkipCnt++;
 80057ee:	7a3b      	ldrb	r3, [r7, #8]
 80057f0:	3301      	adds	r3, #1
 80057f2:	723b      	strb	r3, [r7, #8]

				if(2 <= stuffSkipCnt) { stuffSkipCnt = 0; FlagstuffOn = OFF;}
 80057f4:	7a3b      	ldrb	r3, [r7, #8]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d904      	bls.n	8005804 <FindRcvMsgToPacket+0x18c>
 80057fa:	2300      	movs	r3, #0
 80057fc:	723b      	strb	r3, [r7, #8]
 80057fe:	2300      	movs	r3, #0
 8005800:	727b      	strb	r3, [r7, #9]
 8005802:	e002      	b.n	800580a <FindRcvMsgToPacket+0x192>
				else { MsgCnt--; }
 8005804:	7b3b      	ldrb	r3, [r7, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	733b      	strb	r3, [r7, #12]
	for (i = 0; i < nRcvCnt; i++)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	3301      	adds	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	7bfa      	ldrb	r2, [r7, #15]
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	429a      	cmp	r2, r3
 8005816:	f4ff af4c 	bcc.w	80056b2 <FindRcvMsgToPacket+0x3a>
			}
		}
	}

	tMsgPkt.Chksum = tMsgPkt.RxBuff[MsgCnt-1];
 800581a:	7b3b      	ldrb	r3, [r7, #12]
 800581c:	3b01      	subs	r3, #1
 800581e:	4a2d      	ldr	r2, [pc, #180]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005820:	5cd2      	ldrb	r2, [r2, r3]
 8005822:	4b2c      	ldr	r3, [pc, #176]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005824:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109


	//Protocol Error Check
	//=============================================================================================================================================================================================
	//CheckSum CHK!
	if(ChkSum != tMsgPkt.Chksum) {tMsgPkt.MsgState  = MSG_STAT_WRONG_DATA_LENG; }
 8005828:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800582a:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 800582e:	7bba      	ldrb	r2, [r7, #14]
 8005830:	429a      	cmp	r2, r3
 8005832:	d003      	beq.n	800583c <FindRcvMsgToPacket+0x1c4>
 8005834:	4b27      	ldr	r3, [pc, #156]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005836:	2201      	movs	r2, #1
 8005838:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	//STX ERROR
	if(STX != tMsgPkt.RxBuff[0]) {tMsgPkt.MsgState = MSG_STAT_WRONG_DATA_LENG; }
 800583c:	4b25      	ldr	r3, [pc, #148]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2bc0      	cmp	r3, #192	@ 0xc0
 8005842:	d003      	beq.n	800584c <FindRcvMsgToPacket+0x1d4>
 8005844:	4b23      	ldr	r3, [pc, #140]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005846:	2201      	movs	r2, #1
 8005848:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	// Unknown CMD
	if( FALSE == UART_CMD_CHK(tMsgPkt.Cmd, tMsgPkt.Leng) ) {tMsgPkt.MsgState = MSG_STAT_UNKNOWN_CMD;}
 800584c:	4b21      	ldr	r3, [pc, #132]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800584e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005852:	4a20      	ldr	r2, [pc, #128]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005854:	f892 2108 	ldrb.w	r2, [r2, #264]	@ 0x108
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fe26 	bl	80054ac <UART_CMD_CHK>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <FindRcvMsgToPacket+0x1f6>
 8005866:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005868:	2202      	movs	r2, #2
 800586a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

	// Operation Mode Allow case Command : Measure Stop, Read Value
	if( (ON == tSysState.FlagOperModeOn) && !((CMD_MEASUER_STOP == tMsgPkt.Cmd)||(CMD_MEASUER_READ_VAL == tMsgPkt.Cmd))  ) { tMsgPkt.MsgState = MSG_STAT_NO_ACC_CMD; }
 800586e:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <FindRcvMsgToPacket+0x260>)
 8005870:	7adb      	ldrb	r3, [r3, #11]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10d      	bne.n	8005892 <FindRcvMsgToPacket+0x21a>
 8005876:	4b17      	ldr	r3, [pc, #92]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005878:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800587c:	2b02      	cmp	r3, #2
 800587e:	d008      	beq.n	8005892 <FindRcvMsgToPacket+0x21a>
 8005880:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 8005882:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005886:	2b03      	cmp	r3, #3
 8005888:	d003      	beq.n	8005892 <FindRcvMsgToPacket+0x21a>
 800588a:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800588c:	2203      	movs	r2, #3
 800588e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	if( ON == tSysState.FlagBitChkOn)																					   { tMsgPkt.MsgState = MSG_STAT_NO_ACC_CMD; }
 8005892:	4b11      	ldr	r3, [pc, #68]	@ (80058d8 <FindRcvMsgToPacket+0x260>)
 8005894:	7c9b      	ldrb	r3, [r3, #18]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d103      	bne.n	80058a2 <FindRcvMsgToPacket+0x22a>
 800589a:	4b0e      	ldr	r3, [pc, #56]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 800589c:	2203      	movs	r2, #3
 800589e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

	// Sleep Mode
	if( (ON == tSysState.FlagSleepModeOn) && (CMD_WAKE_UP != tMsgPkt.Cmd) ) { tMsgPkt.MsgState = MSG_STAT_CMD_NOT_ALLOW_DEVICE; }
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <FindRcvMsgToPacket+0x260>)
 80058a4:	7b1b      	ldrb	r3, [r3, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d108      	bne.n	80058bc <FindRcvMsgToPacket+0x244>
 80058aa:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80058ac:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80058b0:	2b0b      	cmp	r3, #11
 80058b2:	d003      	beq.n	80058bc <FindRcvMsgToPacket+0x244>
 80058b4:	4b07      	ldr	r3, [pc, #28]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80058b6:	2206      	movs	r2, #6
 80058b8:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
	//=============================================================================================================================================================================================


	if(0x00 != tMsgPkt.MsgState) { Result = FALSE; }
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <FindRcvMsgToPacket+0x25c>)
 80058be:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <FindRcvMsgToPacket+0x252>
 80058c6:	2300      	movs	r3, #0
 80058c8:	72bb      	strb	r3, [r7, #10]

	return Result;
 80058ca:	7abb      	ldrb	r3, [r7, #10]

}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000570 	.word	0x20000570
 80058d8:	2000028c 	.word	0x2000028c

080058dc <RcvMsgErrAssambly>:


void RcvMsgErrAssambly(uint8_t nCmd)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

	uint8_t ChkSum = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73bb      	strb	r3, [r7, #14]

	tMsgPkt.TxMsgCnt = 0;
 80058ee:	4b43      	ldr	r3, [pc, #268]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = STX;
 80058f6:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80058f8:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	b2d1      	uxtb	r1, r2
 8005900:	4a3e      	ldr	r2, [pc, #248]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005902:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8005906:	461a      	mov	r2, r3
 8005908:	4b3c      	ldr	r3, [pc, #240]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800590a:	4413      	add	r3, r2
 800590c:	22c0      	movs	r2, #192	@ 0xc0
 800590e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ADDR;
 8005912:	4b3a      	ldr	r3, [pc, #232]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005914:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	b2d1      	uxtb	r1, r2
 800591c:	4a37      	ldr	r2, [pc, #220]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800591e:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 8005922:	461a      	mov	r2, r3
 8005924:	4b35      	ldr	r3, [pc, #212]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005926:	4413      	add	r3, r2
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = nCmd;
 800592e:	4b33      	ldr	r3, [pc, #204]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005930:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	b2d1      	uxtb	r1, r2
 8005938:	4a30      	ldr	r2, [pc, #192]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800593a:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800593e:	461a      	mov	r2, r3
 8005940:	4b2e      	ldr	r3, [pc, #184]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005942:	4413      	add	r3, r2
 8005944:	79fa      	ldrb	r2, [r7, #7]
 8005946:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = tMsgPkt.MsgState;
 800594a:	4b2c      	ldr	r3, [pc, #176]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800594c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	b2d1      	uxtb	r1, r2
 8005954:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005956:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800595a:	4619      	mov	r1, r3
 800595c:	4b27      	ldr	r3, [pc, #156]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800595e:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 8005962:	4b26      	ldr	r3, [pc, #152]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005964:	440b      	add	r3, r1
 8005966:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = LENG_REQ_RETURN;
 800596a:	4b24      	ldr	r3, [pc, #144]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800596c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	b2d1      	uxtb	r1, r2
 8005974:	4a21      	ldr	r2, [pc, #132]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005976:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 800597a:	461a      	mov	r2, r3
 800597c:	4b1f      	ldr	r3, [pc, #124]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 800597e:	4413      	add	r3, r2
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	for(i = 0; i < tMsgPkt.TxMsgCnt; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e00a      	b.n	80059a2 <RcvMsgErrAssambly+0xc6>
	{
		ChkSum |= tMsgPkt.Txbuff[i];
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	4a1b      	ldr	r2, [pc, #108]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 8005990:	4413      	add	r3, r2
 8005992:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	4313      	orrs	r3, r2
 800599a:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < tMsgPkt.TxMsgCnt; i++)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	3301      	adds	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
 80059a2:	4b16      	ldr	r3, [pc, #88]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059a4:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d3ee      	bcc.n	800598c <RcvMsgErrAssambly+0xb0>
	}

	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ChkSum;
 80059ae:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059b0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	b2d1      	uxtb	r1, r2
 80059b8:	4a10      	ldr	r2, [pc, #64]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059ba:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80059be:	461a      	mov	r2, r3
 80059c0:	4b0e      	ldr	r3, [pc, #56]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059c2:	4413      	add	r3, r2
 80059c4:	7bba      	ldrb	r2, [r7, #14]
 80059c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	tMsgPkt.Txbuff[tMsgPkt.TxMsgCnt++] = ETX;
 80059ca:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059cc:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	b2d1      	uxtb	r1, r2
 80059d4:	4a09      	ldr	r2, [pc, #36]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059d6:	f882 1102 	strb.w	r1, [r2, #258]	@ 0x102
 80059da:	461a      	mov	r2, r3
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059de:	4413      	add	r3, r2
 80059e0:	22c2      	movs	r2, #194	@ 0xc2
 80059e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	tMsgPkt.FlagTxPktOn = ON;
 80059e6:	4b05      	ldr	r3, [pc, #20]	@ (80059fc <RcvMsgErrAssambly+0x120>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000570 	.word	0x20000570

08005a00 <UART_MsgProc>:



void UART_MsgProc(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
	if(ON == tUartMsg.FlagMsgRcvOn)
 8005a04:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <UART_MsgProc+0x50>)
 8005a06:	f893 3286 	ldrb.w	r3, [r3, #646]	@ 0x286
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d11f      	bne.n	8005a4e <UART_MsgProc+0x4e>
	{
		if(FALSE == FindRcvMsgToPacket(tUartMsg.RxTemp, tUartMsg.RxTempCnt))
 8005a0e:	4b10      	ldr	r3, [pc, #64]	@ (8005a50 <UART_MsgProc+0x50>)
 8005a10:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 8005a14:	4619      	mov	r1, r3
 8005a16:	480f      	ldr	r0, [pc, #60]	@ (8005a54 <UART_MsgProc+0x54>)
 8005a18:	f7ff fe2e 	bl	8005678 <FindRcvMsgToPacket>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d111      	bne.n	8005a46 <UART_MsgProc+0x46>
		{
			RcvMsgErrAssambly(tMsgPkt.Cmd);
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <UART_MsgProc+0x58>)
 8005a24:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff57 	bl	80058dc <RcvMsgErrAssambly>
			memset(tUartMsg.RxTemp, 0, sizeof(tUartMsg.RxTemp));
 8005a2e:	2280      	movs	r2, #128	@ 0x80
 8005a30:	2100      	movs	r1, #0
 8005a32:	4808      	ldr	r0, [pc, #32]	@ (8005a54 <UART_MsgProc+0x54>)
 8005a34:	f007 f94e 	bl	800ccd4 <memset>
			tMsgPkt.MsgState = MSG_STAT_NO_ERR;
 8005a38:	4b07      	ldr	r3, [pc, #28]	@ (8005a58 <UART_MsgProc+0x58>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
			UART_RxInit();
 8005a40:	f7ff fce2 	bl	8005408 <UART_RxInit>
			return;
 8005a44:	e003      	b.n	8005a4e <UART_MsgProc+0x4e>
		}

		tMsgPkt.FlagRxPktOn = ON;
 8005a46:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <UART_MsgProc+0x58>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
	}
}
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200002e4 	.word	0x200002e4
 8005a54:	200004e4 	.word	0x200004e4
 8005a58:	20000570 	.word	0x20000570

08005a5c <UART_Init>:


void UART_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
	memset(tUartMsg.RingRxTemp, 0, 	sizeof(tUartMsg.RingRxTemp) );
 8005a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a64:	2100      	movs	r1, #0
 8005a66:	481c      	ldr	r0, [pc, #112]	@ (8005ad8 <UART_Init+0x7c>)
 8005a68:	f007 f934 	bl	800ccd4 <memset>

	memset(tMsgPkt.Txbuff, 	 0, 	sizeof(tMsgPkt.Txbuff) );
 8005a6c:	2280      	movs	r2, #128	@ 0x80
 8005a6e:	2100      	movs	r1, #0
 8005a70:	481a      	ldr	r0, [pc, #104]	@ (8005adc <UART_Init+0x80>)
 8005a72:	f007 f92f 	bl	800ccd4 <memset>
	memset(tMsgPkt.RxBuff, 	 0, 	sizeof(tMsgPkt.RxBuff) );
 8005a76:	2280      	movs	r2, #128	@ 0x80
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4819      	ldr	r0, [pc, #100]	@ (8005ae0 <UART_Init+0x84>)
 8005a7c:	f007 f92a 	bl	800ccd4 <memset>
	memset(&tMsgPkt, 0, 			sizeof(struct _tMSG_PACKET) );
 8005a80:	f240 120b 	movw	r2, #267	@ 0x10b
 8005a84:	2100      	movs	r1, #0
 8005a86:	4816      	ldr	r0, [pc, #88]	@ (8005ae0 <UART_Init+0x84>)
 8005a88:	f007 f924 	bl	800ccd4 <memset>

	tUartMsg.FlagMsgErr  	= FALSE;
 8005a8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ad8 <UART_Init+0x7c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
	tUartMsg.FlagMsgRcvOn 	= FALSE;
 8005a94:	4b10      	ldr	r3, [pc, #64]	@ (8005ad8 <UART_Init+0x7c>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
	tUartMsg.FlagPktFindOn 	= FALSE;
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <UART_Init+0x7c>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287
	tUartMsg.RxStxCnt  = 0;
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <UART_Init+0x7c>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
	tUartMsg.RxTempCnt = 0;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <UART_Init+0x7c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281
	tUartMsg.TxTempCnt = 0;
 8005ab4:	4b08      	ldr	r3, [pc, #32]	@ (8005ad8 <UART_Init+0x7c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282

	tMsgPkt.FlagTxPktOn	= OFF;
 8005abc:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <UART_Init+0x84>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	tMsgPkt.RxMsgCnt = 0;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <UART_Init+0x84>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
	tMsgPkt.TxMsgCnt = 0;
 8005acc:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <UART_Init+0x84>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
}
 8005ad4:	bf00      	nop
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200002e4 	.word	0x200002e4
 8005adc:	200005f0 	.word	0x200005f0
 8005ae0:	20000570 	.word	0x20000570

08005ae4 <UART_StuffAssambly>:

void UART_StuffAssambly(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	71fb      	strb	r3, [r7, #7]
	memset(tUartMsg.RingRxTemp, 0, sizeof(tUartMsg.RingTxTemp));
 8005aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005af2:	2100      	movs	r1, #0
 8005af4:	4858      	ldr	r0, [pc, #352]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005af6:	f007 f8ed 	bl	800ccd4 <memset>
	tUartMsg.TxTempCnt = 0;
 8005afa:	4b57      	ldr	r3, [pc, #348]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2282 	strb.w	r2, [r3, #642]	@ 0x282

	tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = STX;
 8005b02:	4b55      	ldr	r3, [pc, #340]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b04:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	b2d1      	uxtb	r1, r2
 8005b0c:	4a52      	ldr	r2, [pc, #328]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b0e:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b50      	ldr	r3, [pc, #320]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b16:	4413      	add	r3, r2
 8005b18:	22c0      	movs	r2, #192	@ 0xc0
 8005b1a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

	for(i = 1; i < tMsgPkt.TxMsgCnt; i++)
 8005b1e:	2301      	movs	r3, #1
 8005b20:	71fb      	strb	r3, [r7, #7]
 8005b22:	e080      	b.n	8005c26 <UART_StuffAssambly+0x142>
	{
			 if(0xC0 == tMsgPkt.Txbuff[i]) { tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDB; tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDC; }
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	4a4d      	ldr	r2, [pc, #308]	@ (8005c5c <UART_StuffAssambly+0x178>)
 8005b28:	4413      	add	r3, r2
 8005b2a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b30:	d11c      	bne.n	8005b6c <UART_StuffAssambly+0x88>
 8005b32:	4b49      	ldr	r3, [pc, #292]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b34:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	b2d1      	uxtb	r1, r2
 8005b3c:	4a46      	ldr	r2, [pc, #280]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b3e:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b42:	461a      	mov	r2, r3
 8005b44:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b46:	4413      	add	r3, r2
 8005b48:	22db      	movs	r2, #219	@ 0xdb
 8005b4a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005b4e:	4b42      	ldr	r3, [pc, #264]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b50:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	b2d1      	uxtb	r1, r2
 8005b58:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b5a:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b3d      	ldr	r3, [pc, #244]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b62:	4413      	add	r3, r2
 8005b64:	22dc      	movs	r2, #220	@ 0xdc
 8005b66:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005b6a:	e059      	b.n	8005c20 <UART_StuffAssambly+0x13c>
		else if(0xDB == tMsgPkt.Txbuff[i]) { tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDB; tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDD; }
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c5c <UART_StuffAssambly+0x178>)
 8005b70:	4413      	add	r3, r2
 8005b72:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b76:	2bdb      	cmp	r3, #219	@ 0xdb
 8005b78:	d11c      	bne.n	8005bb4 <UART_StuffAssambly+0xd0>
 8005b7a:	4b37      	ldr	r3, [pc, #220]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b7c:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	b2d1      	uxtb	r1, r2
 8005b84:	4a34      	ldr	r2, [pc, #208]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b86:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4b32      	ldr	r3, [pc, #200]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b8e:	4413      	add	r3, r2
 8005b90:	22db      	movs	r2, #219	@ 0xdb
 8005b92:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005b96:	4b30      	ldr	r3, [pc, #192]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005b98:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	b2d1      	uxtb	r1, r2
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005ba2:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005baa:	4413      	add	r3, r2
 8005bac:	22dd      	movs	r2, #221	@ 0xdd
 8005bae:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005bb2:	e035      	b.n	8005c20 <UART_StuffAssambly+0x13c>
		else if(0xC2 == tMsgPkt.Txbuff[i]) { tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDB; tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = 0xDE; }
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	4a29      	ldr	r2, [pc, #164]	@ (8005c5c <UART_StuffAssambly+0x178>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005bbe:	2bc2      	cmp	r3, #194	@ 0xc2
 8005bc0:	d11c      	bne.n	8005bfc <UART_StuffAssambly+0x118>
 8005bc2:	4b25      	ldr	r3, [pc, #148]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005bc4:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	b2d1      	uxtb	r1, r2
 8005bcc:	4a22      	ldr	r2, [pc, #136]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005bce:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4b20      	ldr	r3, [pc, #128]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005bd6:	4413      	add	r3, r2
 8005bd8:	22db      	movs	r2, #219	@ 0xdb
 8005bda:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005bde:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005be0:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	b2d1      	uxtb	r1, r2
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005bea:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005bf2:	4413      	add	r3, r2
 8005bf4:	22de      	movs	r2, #222	@ 0xde
 8005bf6:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8005bfa:	e011      	b.n	8005c20 <UART_StuffAssambly+0x13c>
		else tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = tMsgPkt.Txbuff[i];
 8005bfc:	79fa      	ldrb	r2, [r7, #7]
 8005bfe:	4b16      	ldr	r3, [pc, #88]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005c00:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	b2c8      	uxtb	r0, r1
 8005c08:	4913      	ldr	r1, [pc, #76]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005c0a:	f881 0282 	strb.w	r0, [r1, #642]	@ 0x282
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4b12      	ldr	r3, [pc, #72]	@ (8005c5c <UART_StuffAssambly+0x178>)
 8005c12:	4413      	add	r3, r2
 8005c14:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8005c18:	4b0f      	ldr	r3, [pc, #60]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005c1a:	440b      	add	r3, r1
 8005c1c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	for(i = 1; i < tMsgPkt.TxMsgCnt; i++)
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	3301      	adds	r3, #1
 8005c24:	71fb      	strb	r3, [r7, #7]
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <UART_StuffAssambly+0x178>)
 8005c28:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005c2c:	79fa      	ldrb	r2, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f4ff af78 	bcc.w	8005b24 <UART_StuffAssambly+0x40>
	}

	tUartMsg.RingTxTemp[tUartMsg.TxTempCnt++] = ETX;
 8005c34:	4b08      	ldr	r3, [pc, #32]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005c36:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	b2d1      	uxtb	r1, r2
 8005c3e:	4a06      	ldr	r2, [pc, #24]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005c40:	f882 1282 	strb.w	r1, [r2, #642]	@ 0x282
 8005c44:	461a      	mov	r2, r3
 8005c46:	4b04      	ldr	r3, [pc, #16]	@ (8005c58 <UART_StuffAssambly+0x174>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	22c2      	movs	r2, #194	@ 0xc2
 8005c4c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	200002e4 	.word	0x200002e4
 8005c5c:	20000570 	.word	0x20000570

08005c60 <UART_Chksum>:

uint8_t UART_Chksum(uint8_t* pCh, uint8_t nCnt)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73fb      	strb	r3, [r7, #15]
	uint8_t Result = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73bb      	strb	r3, [r7, #14]

	for( i = 0; i < nCnt; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	e009      	b.n	8005c8e <UART_Chksum+0x2e>
	{
		Result = (uint8_t)(Result + pCh[i]);
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4413      	add	r3, r2
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	4413      	add	r3, r2
 8005c86:	73bb      	strb	r3, [r7, #14]
	for( i = 0; i < nCnt; i++)
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d3f1      	bcc.n	8005c7a <UART_Chksum+0x1a>
	}

	Result = (uint8_t)(Result + ETX);
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	3b3e      	subs	r3, #62	@ 0x3e
 8005c9a:	73bb      	strb	r3, [r7, #14]
	return Result;
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == FAN_RPM_Pin)
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cbc:	d104      	bne.n	8005cc8 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		tFan.RpmCurrCnt++;
 8005cbe:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <HAL_GPIO_EXTI_Callback+0x28>)
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a03      	ldr	r2, [pc, #12]	@ (8005cd4 <HAL_GPIO_EXTI_Callback+0x28>)
 8005cc6:	6113      	str	r3, [r2, #16]
	}
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	200000b4 	.word	0x200000b4

08005cd8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	@ (8005d40 <HAL_UARTEx_RxEventCallback+0x68>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d124      	bne.n	8005d38 <HAL_UARTEx_RxEventCallback+0x60>
		//tUartMsg.uNewPos = 0;
		/* start the DMA again */
//		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)tUartMsg.RxTemp, MAX_RX_BUFF_SIZE);
//		__HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

		memcpy ((uint8_t *)tUartMsg.RxTemp, (uint8_t *)tUartMsg.RingRxTemp, Size);
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4914      	ldr	r1, [pc, #80]	@ (8005d44 <HAL_UARTEx_RxEventCallback+0x6c>)
 8005cf4:	4814      	ldr	r0, [pc, #80]	@ (8005d48 <HAL_UARTEx_RxEventCallback+0x70>)
 8005cf6:	f007 f819 	bl	800cd2c <memcpy>

		tUartMsg.FlagMsgRcvOn = ON;
 8005cfa:	4b12      	ldr	r3, [pc, #72]	@ (8005d44 <HAL_UARTEx_RxEventCallback+0x6c>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
		tUartMsg.RxTempCnt = Size;
 8005d02:	887b      	ldrh	r3, [r7, #2]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4b0f      	ldr	r3, [pc, #60]	@ (8005d44 <HAL_UARTEx_RxEventCallback+0x6c>)
 8005d08:	f883 2281 	strb.w	r2, [r3, #641]	@ 0x281

		memset(tUartMsg.RingRxTemp, 0, sizeof(tUartMsg.RingRxTemp));
 8005d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d10:	2100      	movs	r1, #0
 8005d12:	480c      	ldr	r0, [pc, #48]	@ (8005d44 <HAL_UARTEx_RxEventCallback+0x6c>)
 8005d14:	f006 ffde 	bl	800ccd4 <memset>

		HAL_UART_DMAStop(&huart1);
 8005d18:	480c      	ldr	r0, [pc, #48]	@ (8005d4c <HAL_UARTEx_RxEventCallback+0x74>)
 8005d1a:	f005 fd4c 	bl	800b7b6 <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) tUartMsg.RingRxTemp, MAX_RX_BUFF_SIZE);
 8005d1e:	2280      	movs	r2, #128	@ 0x80
 8005d20:	4908      	ldr	r1, [pc, #32]	@ (8005d44 <HAL_UARTEx_RxEventCallback+0x6c>)
 8005d22:	480a      	ldr	r0, [pc, #40]	@ (8005d4c <HAL_UARTEx_RxEventCallback+0x74>)
 8005d24:	f006 ff82 	bl	800cc2c <HAL_UARTEx_ReceiveToIdle_DMA>
       __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <HAL_UARTEx_RxEventCallback+0x78>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <HAL_UARTEx_RxEventCallback+0x78>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	601a      	str	r2, [r3, #0]
	}
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40013800 	.word	0x40013800
 8005d44:	200002e4 	.word	0x200002e4
 8005d48:	200004e4 	.word	0x200004e4
 8005d4c:	200007e8 	.word	0x200007e8
 8005d50:	20000870 	.word	0x20000870

08005d54 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]



	if(ON == tSysState.FlagGetAdcOn)
 8005d5c:	4b13      	ldr	r3, [pc, #76]	@ (8005dac <HAL_ADC_ConvCpltCallback+0x58>)
 8005d5e:	79db      	ldrb	r3, [r3, #7]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d118      	bne.n	8005d96 <HAL_ADC_ConvCpltCallback+0x42>
	{

		tSiPmCtrl.CurrAdcVal 	= (uint16_t)(Adc_Temp[0]);
 8005d64:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <HAL_ADC_ConvCpltCallback+0x60>)
 8005d6c:	80da      	strh	r2, [r3, #6]
		tPdCtrl.CurrAdcVal  	= (uint16_t)(Adc_Temp[1]);
 8005d6e:	4b10      	ldr	r3, [pc, #64]	@ (8005db0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <HAL_ADC_ConvCpltCallback+0x64>)
 8005d76:	80da      	strh	r2, [r3, #6]
		tLdCtrl.CurrAdcVal 		= (uint16_t)(Adc_Temp[2]);
 8005d78:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8005d7a:	889b      	ldrh	r3, [r3, #4]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dbc <HAL_ADC_ConvCpltCallback+0x68>)
 8005d80:	80da      	strh	r2, [r3, #6]
		tHvCtrl.CurrAdcVal 		= (uint16_t)(Adc_Temp[3]);
 8005d82:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8005d8a:	80da      	strh	r2, [r3, #6]


		tPdCtrl.ChkCount++;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <HAL_ADC_ConvCpltCallback+0x64>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	3301      	adds	r3, #1
 8005d92:	4a09      	ldr	r2, [pc, #36]	@ (8005db8 <HAL_ADC_ConvCpltCallback+0x64>)
 8005d94:	6093      	str	r3, [r2, #8]

		//HAL_ADC_Start_DMA(&hadc1, Adc_Temp, 5);
	}

	tSysState.Temp			= (uint16_t)(Adc_Temp[4]);
 8005d96:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8005d98:	891b      	ldrh	r3, [r3, #8]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	4b03      	ldr	r3, [pc, #12]	@ (8005dac <HAL_ADC_ConvCpltCallback+0x58>)
 8005d9e:	831a      	strh	r2, [r3, #24]

}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	2000028c 	.word	0x2000028c
 8005db0:	2000067c 	.word	0x2000067c
 8005db4:	200000a4 	.word	0x200000a4
 8005db8:	20000074 	.word	0x20000074
 8005dbc:	20000084 	.word	0x20000084
 8005dc0:	20000094 	.word	0x20000094

08005dc4 <UART_Transmit_Proc>:


void UART_Transmit_Proc(UART_HandleTypeDef* hUart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	if(ON == tMsgPkt.FlagTxPktOn)
 8005dcc:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <UART_Transmit_Proc+0x30>)
 8005dce:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10a      	bne.n	8005dec <UART_Transmit_Proc+0x28>
	{
		HAL_UART_Transmit(hUart, tUartMsg.RingTxTemp, tUartMsg.TxTempCnt,100);
 8005dd6:	4b08      	ldr	r3, [pc, #32]	@ (8005df8 <UART_Transmit_Proc+0x34>)
 8005dd8:	f893 3282 	ldrb.w	r3, [r3, #642]	@ 0x282
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2364      	movs	r3, #100	@ 0x64
 8005de0:	4906      	ldr	r1, [pc, #24]	@ (8005dfc <UART_Transmit_Proc+0x38>)
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f005 fc5e 	bl	800b6a4 <HAL_UART_Transmit>
		UART_TxInit();
 8005de8:	f7ff fb28 	bl	800543c <UART_TxInit>
	}
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000570 	.word	0x20000570
 8005df8:	200002e4 	.word	0x200002e4
 8005dfc:	200003e4 	.word	0x200003e4

08005e00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e10:	d102      	bne.n	8005e18 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		tSysTime.FlagSysTickOn = ON;
 8005e12:	4b04      	ldr	r3, [pc, #16]	@ (8005e24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
	}
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	200002ac 	.word	0x200002ac

08005e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e2c:	f000 fcf9 	bl	8006822 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(Adc_Temp, 0, sizeof(Adc_Temp));
 8005e30:	2220      	movs	r2, #32
 8005e32:	2100      	movs	r1, #0
 8005e34:	481a      	ldr	r0, [pc, #104]	@ (8005ea0 <main+0x78>)
 8005e36:	f006 ff4d 	bl	800ccd4 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e3a:	f000 f83d 	bl	8005eb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PROC_Init();
 8005e3e:	f7fc fb93 	bl	8002568 <PROC_Init>
  EXT_Init();
 8005e42:	f7fb f9b5 	bl	80011b0 <EXT_Init>
  FAN_Init();
 8005e46:	f7fb fc73 	bl	8001730 <FAN_Init>
  UART_Init();
 8005e4a:	f7ff fe07 	bl	8005a5c <UART_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e4e:	f000 fa2d 	bl	80062ac <MX_GPIO_Init>
  MX_DMA_Init();
 8005e52:	f000 fa05 	bl	8006260 <MX_DMA_Init>
  MX_I2C1_Init();
 8005e56:	f000 f945 	bl	80060e4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8005e5a:	f000 f87b 	bl	8005f54 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8005e5e:	f000 f9cf 	bl	8006200 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005e62:	f000 f97f 	bl	8006164 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  PARAM_Init(&hi2c1);
 8005e66:	480f      	ldr	r0, [pc, #60]	@ (8005ea4 <main+0x7c>)
 8005e68:	f7fc fa56 	bl	8002318 <PARAM_Init>
  PARAM_Process();
 8005e6c:	f7fc fa7a 	bl	8002364 <PARAM_Process>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)tUartMsg.RingRxTemp, MAX_RX_BUFF_SIZE);
 8005e70:	2280      	movs	r2, #128	@ 0x80
 8005e72:	490d      	ldr	r1, [pc, #52]	@ (8005ea8 <main+0x80>)
 8005e74:	480d      	ldr	r0, [pc, #52]	@ (8005eac <main+0x84>)
 8005e76:	f006 fed9 	bl	800cc2c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb0 <main+0x88>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <main+0x88>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0204 	bic.w	r2, r2, #4
 8005e88:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8005e8a:	480a      	ldr	r0, [pc, #40]	@ (8005eb4 <main+0x8c>)
 8005e8c:	f004 ffe2 	bl	800ae54 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 SYSTEM_Process();
 8005e90:	f7ff fa56 	bl	8005340 <SYSTEM_Process>
	 UART_Transmit_Proc(&huart1);
 8005e94:	4805      	ldr	r0, [pc, #20]	@ (8005eac <main+0x84>)
 8005e96:	f7ff ff95 	bl	8005dc4 <UART_Transmit_Proc>
	 SYSTEM_Process();
 8005e9a:	bf00      	nop
 8005e9c:	e7f8      	b.n	8005e90 <main+0x68>
 8005e9e:	bf00      	nop
 8005ea0:	2000067c 	.word	0x2000067c
 8005ea4:	20000748 	.word	0x20000748
 8005ea8:	200002e4 	.word	0x200002e4
 8005eac:	200007e8 	.word	0x200007e8
 8005eb0:	20000870 	.word	0x20000870
 8005eb4:	2000079c 	.word	0x2000079c

08005eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b096      	sub	sp, #88	@ 0x58
 8005ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ebe:	f107 0314 	add.w	r3, r7, #20
 8005ec2:	2244      	movs	r2, #68	@ 0x44
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f006 ff04 	bl	800ccd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ecc:	463b      	mov	r3, r7
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	60da      	str	r2, [r3, #12]
 8005ed8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005eda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005ede:	f003 feff 	bl	8009ce0 <HAL_PWREx_ControlVoltageScaling>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005ee8:	f000 fa4c 	bl	8006384 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005ef0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8005ef4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005efa:	2303      	movs	r3, #3
 8005efc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005efe:	2301      	movs	r3, #1
 8005f00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005f02:	2328      	movs	r3, #40	@ 0x28
 8005f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f06:	2302      	movs	r3, #2
 8005f08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f0e:	f107 0314 	add.w	r3, r7, #20
 8005f12:	4618      	mov	r0, r3
 8005f14:	f003 ff3a 	bl	8009d8c <HAL_RCC_OscConfig>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8005f1e:	f000 fa31 	bl	8006384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f22:	230f      	movs	r3, #15
 8005f24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f26:	2303      	movs	r3, #3
 8005f28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005f36:	463b      	mov	r3, r7
 8005f38:	2104      	movs	r1, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f004 fb88 	bl	800a650 <HAL_RCC_ClockConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005f46:	f000 fa1d 	bl	8006384 <Error_Handler>
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3758      	adds	r7, #88	@ 0x58
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005f5a:	f107 031c 	add.w	r3, r7, #28
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	611a      	str	r2, [r3, #16]
 8005f74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005f76:	4b53      	ldr	r3, [pc, #332]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f78:	4a53      	ldr	r2, [pc, #332]	@ (80060c8 <MX_ADC1_Init+0x174>)
 8005f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8005f7c:	4b51      	ldr	r3, [pc, #324]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f7e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8005f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f84:	4b4f      	ldr	r3, [pc, #316]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005f90:	4b4c      	ldr	r3, [pc, #304]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f96:	4b4b      	ldr	r3, [pc, #300]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f98:	2204      	movs	r2, #4
 8005f9a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f9c:	4b49      	ldr	r3, [pc, #292]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005fa2:	4b48      	ldr	r3, [pc, #288]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8005fa8:	4b46      	ldr	r3, [pc, #280]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005faa:	2205      	movs	r2, #5
 8005fac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005fae:	4b45      	ldr	r3, [pc, #276]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005fb6:	4b43      	ldr	r3, [pc, #268]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005fbc:	4b41      	ldr	r3, [pc, #260]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005fc2:	4b40      	ldr	r3, [pc, #256]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005fca:	4b3e      	ldr	r3, [pc, #248]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005fd8:	483a      	ldr	r0, [pc, #232]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005fda:	f000 fec7 	bl	8006d6c <HAL_ADC_Init>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005fe4:	f000 f9ce 	bl	8006384 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005fec:	f107 031c 	add.w	r3, r7, #28
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4834      	ldr	r0, [pc, #208]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8005ff4:	f002 f94a 	bl	800828c <HAL_ADCEx_MultiModeConfigChannel>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8005ffe:	f000 f9c1 	bl	8006384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006002:	4b32      	ldr	r3, [pc, #200]	@ (80060cc <MX_ADC1_Init+0x178>)
 8006004:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006006:	2306      	movs	r3, #6
 8006008:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800600a:	2302      	movs	r3, #2
 800600c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800600e:	237f      	movs	r3, #127	@ 0x7f
 8006010:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006012:	2304      	movs	r3, #4
 8006014:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4829      	ldr	r0, [pc, #164]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8006020:	f001 fada 	bl	80075d8 <HAL_ADC_ConfigChannel>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800602a:	f000 f9ab 	bl	8006384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800602e:	4b28      	ldr	r3, [pc, #160]	@ (80060d0 <MX_ADC1_Init+0x17c>)
 8006030:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006032:	230c      	movs	r3, #12
 8006034:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4822      	ldr	r0, [pc, #136]	@ (80060c4 <MX_ADC1_Init+0x170>)
 800603c:	f001 facc 	bl	80075d8 <HAL_ADC_ConfigChannel>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8006046:	f000 f99d 	bl	8006384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800604a:	4b22      	ldr	r3, [pc, #136]	@ (80060d4 <MX_ADC1_Init+0x180>)
 800604c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800604e:	2312      	movs	r3, #18
 8006050:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8006052:	2305      	movs	r3, #5
 8006054:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	4619      	mov	r1, r3
 800605a:	481a      	ldr	r0, [pc, #104]	@ (80060c4 <MX_ADC1_Init+0x170>)
 800605c:	f001 fabc 	bl	80075d8 <HAL_ADC_ConfigChannel>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8006066:	f000 f98d 	bl	8006384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800606a:	4b1b      	ldr	r3, [pc, #108]	@ (80060d8 <MX_ADC1_Init+0x184>)
 800606c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800606e:	2318      	movs	r3, #24
 8006070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4813      	ldr	r0, [pc, #76]	@ (80060c4 <MX_ADC1_Init+0x170>)
 8006078:	f001 faae 	bl	80075d8 <HAL_ADC_ConfigChannel>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8006082:	f000 f97f 	bl	8006384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006086:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <MX_ADC1_Init+0x188>)
 8006088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800608a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800608e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8006090:	2307      	movs	r3, #7
 8006092:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006094:	1d3b      	adds	r3, r7, #4
 8006096:	4619      	mov	r1, r3
 8006098:	480a      	ldr	r0, [pc, #40]	@ (80060c4 <MX_ADC1_Init+0x170>)
 800609a:	f001 fa9d 	bl	80075d8 <HAL_ADC_ConfigChannel>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80060a4:	f000 f96e 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80060a8:	217f      	movs	r1, #127	@ 0x7f
 80060aa:	4806      	ldr	r0, [pc, #24]	@ (80060c4 <MX_ADC1_Init+0x170>)
 80060ac:	f002 f85c 	bl	8008168 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, Adc_Temp, 5);
 80060b0:	2205      	movs	r2, #5
 80060b2:	490b      	ldr	r1, [pc, #44]	@ (80060e0 <MX_ADC1_Init+0x18c>)
 80060b4:	4803      	ldr	r0, [pc, #12]	@ (80060c4 <MX_ADC1_Init+0x170>)
 80060b6:	f000 ffa3 	bl	8007000 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 80060ba:	bf00      	nop
 80060bc:	3728      	adds	r7, #40	@ 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000069c 	.word	0x2000069c
 80060c8:	50040000 	.word	0x50040000
 80060cc:	19200040 	.word	0x19200040
 80060d0:	1d500080 	.word	0x1d500080
 80060d4:	21800100 	.word	0x21800100
 80060d8:	25b00200 	.word	0x25b00200
 80060dc:	c7520000 	.word	0xc7520000
 80060e0:	2000067c 	.word	0x2000067c

080060e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80060e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006158 <MX_I2C1_Init+0x74>)
 80060ea:	4a1c      	ldr	r2, [pc, #112]	@ (800615c <MX_I2C1_Init+0x78>)
 80060ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80060ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <MX_I2C1_Init+0x74>)
 80060f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <MX_I2C1_Init+0x7c>)
 80060f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80060f4:	4b18      	ldr	r3, [pc, #96]	@ (8006158 <MX_I2C1_Init+0x74>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060fa:	4b17      	ldr	r3, [pc, #92]	@ (8006158 <MX_I2C1_Init+0x74>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006100:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <MX_I2C1_Init+0x74>)
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006106:	4b14      	ldr	r3, [pc, #80]	@ (8006158 <MX_I2C1_Init+0x74>)
 8006108:	2200      	movs	r2, #0
 800610a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800610c:	4b12      	ldr	r3, [pc, #72]	@ (8006158 <MX_I2C1_Init+0x74>)
 800610e:	2200      	movs	r2, #0
 8006110:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006112:	4b11      	ldr	r3, [pc, #68]	@ (8006158 <MX_I2C1_Init+0x74>)
 8006114:	2200      	movs	r2, #0
 8006116:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006118:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <MX_I2C1_Init+0x74>)
 800611a:	2200      	movs	r2, #0
 800611c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800611e:	480e      	ldr	r0, [pc, #56]	@ (8006158 <MX_I2C1_Init+0x74>)
 8006120:	f002 fec0 	bl	8008ea4 <HAL_I2C_Init>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800612a:	f000 f92b 	bl	8006384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800612e:	2100      	movs	r1, #0
 8006130:	4809      	ldr	r0, [pc, #36]	@ (8006158 <MX_I2C1_Init+0x74>)
 8006132:	f003 fd2f 	bl	8009b94 <HAL_I2CEx_ConfigAnalogFilter>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800613c:	f000 f922 	bl	8006384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006140:	2100      	movs	r1, #0
 8006142:	4805      	ldr	r0, [pc, #20]	@ (8006158 <MX_I2C1_Init+0x74>)
 8006144:	f003 fd71 	bl	8009c2a <HAL_I2CEx_ConfigDigitalFilter>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800614e:	f000 f919 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000748 	.word	0x20000748
 800615c:	40005400 	.word	0x40005400
 8006160:	10d19ce4 	.word	0x10d19ce4

08006164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800616a:	f107 0310 	add.w	r3, r7, #16
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	609a      	str	r2, [r3, #8]
 8006176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006178:	1d3b      	adds	r3, r7, #4
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006182:	4b1e      	ldr	r3, [pc, #120]	@ (80061fc <MX_TIM2_Init+0x98>)
 8006184:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006188:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800618a:	4b1c      	ldr	r3, [pc, #112]	@ (80061fc <MX_TIM2_Init+0x98>)
 800618c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8006190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006192:	4b1a      	ldr	r3, [pc, #104]	@ (80061fc <MX_TIM2_Init+0x98>)
 8006194:	2200      	movs	r2, #0
 8006196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8006198:	4b18      	ldr	r3, [pc, #96]	@ (80061fc <MX_TIM2_Init+0x98>)
 800619a:	2263      	movs	r2, #99	@ 0x63
 800619c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800619e:	4b17      	ldr	r3, [pc, #92]	@ (80061fc <MX_TIM2_Init+0x98>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061a4:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <MX_TIM2_Init+0x98>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80061aa:	4814      	ldr	r0, [pc, #80]	@ (80061fc <MX_TIM2_Init+0x98>)
 80061ac:	f004 fdfa 	bl	800ada4 <HAL_TIM_Base_Init>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80061b6:	f000 f8e5 	bl	8006384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	4619      	mov	r1, r3
 80061c6:	480d      	ldr	r0, [pc, #52]	@ (80061fc <MX_TIM2_Init+0x98>)
 80061c8:	f004 ff9f 	bl	800b10a <HAL_TIM_ConfigClockSource>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80061d2:	f000 f8d7 	bl	8006384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4806      	ldr	r0, [pc, #24]	@ (80061fc <MX_TIM2_Init+0x98>)
 80061e4:	f005 f98c 	bl	800b500 <HAL_TIMEx_MasterConfigSynchronization>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80061ee:	f000 f8c9 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80061f2:	bf00      	nop
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2000079c 	.word	0x2000079c

08006200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006206:	4a15      	ldr	r2, [pc, #84]	@ (800625c <MX_USART1_UART_Init+0x5c>)
 8006208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 800620c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006212:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006214:	2200      	movs	r2, #0
 8006216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 800621a:	2200      	movs	r2, #0
 800621c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006220:	2200      	movs	r2, #0
 8006222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006226:	220c      	movs	r2, #12
 8006228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006238:	2200      	movs	r2, #0
 800623a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 800623e:	2200      	movs	r2, #0
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	@ (8006258 <MX_USART1_UART_Init+0x58>)
 8006244:	f005 f9e0 	bl	800b608 <HAL_UART_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800624e:	f000 f899 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	200007e8 	.word	0x200007e8
 800625c:	40013800 	.word	0x40013800

08006260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006266:	4b10      	ldr	r3, [pc, #64]	@ (80062a8 <MX_DMA_Init+0x48>)
 8006268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800626a:	4a0f      	ldr	r2, [pc, #60]	@ (80062a8 <MX_DMA_Init+0x48>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6493      	str	r3, [r2, #72]	@ 0x48
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <MX_DMA_Init+0x48>)
 8006274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	200b      	movs	r0, #11
 8006284:	f002 f9a5 	bl	80085d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006288:	200b      	movs	r0, #11
 800628a:	f002 f9be 	bl	800860a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	200f      	movs	r0, #15
 8006294:	f002 f99d 	bl	80085d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006298:	200f      	movs	r0, #15
 800629a:	f002 f9b6 	bl	800860a <HAL_NVIC_EnableIRQ>

}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000

080062ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	605a      	str	r2, [r3, #4]
 80062bc:	609a      	str	r2, [r3, #8]
 80062be:	60da      	str	r2, [r3, #12]
 80062c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c2:	4b2e      	ldr	r3, [pc, #184]	@ (800637c <MX_GPIO_Init+0xd0>)
 80062c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c6:	4a2d      	ldr	r2, [pc, #180]	@ (800637c <MX_GPIO_Init+0xd0>)
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062ce:	4b2b      	ldr	r3, [pc, #172]	@ (800637c <MX_GPIO_Init+0xd0>)
 80062d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80062da:	4b28      	ldr	r3, [pc, #160]	@ (800637c <MX_GPIO_Init+0xd0>)
 80062dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062de:	4a27      	ldr	r2, [pc, #156]	@ (800637c <MX_GPIO_Init+0xd0>)
 80062e0:	f043 0302 	orr.w	r3, r3, #2
 80062e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062e6:	4b25      	ldr	r3, [pc, #148]	@ (800637c <MX_GPIO_Init+0xd0>)
 80062e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_CON_Pin|HV_CON_Pin|FAN_SPD_Pin|FAN_CON_Pin, GPIO_PIN_RESET);
 80062f2:	2200      	movs	r2, #0
 80062f4:	211b      	movs	r1, #27
 80062f6:	4822      	ldr	r0, [pc, #136]	@ (8006380 <MX_GPIO_Init+0xd4>)
 80062f8:	f002 fda4 	bl	8008e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PROM_WP_GPIO_Port, PROM_WP_Pin, GPIO_PIN_RESET);
 80062fc:	2200      	movs	r2, #0
 80062fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006306:	f002 fd9d 	bl	8008e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_CON_Pin HV_CON_Pin FAN_SPD_Pin FAN_CON_Pin */
  GPIO_InitStruct.Pin = LD_CON_Pin|HV_CON_Pin|FAN_SPD_Pin|FAN_CON_Pin;
 800630a:	231b      	movs	r3, #27
 800630c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800630e:	2301      	movs	r3, #1
 8006310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006312:	2302      	movs	r3, #2
 8006314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800631a:	f107 030c 	add.w	r3, r7, #12
 800631e:	4619      	mov	r1, r3
 8006320:	4817      	ldr	r0, [pc, #92]	@ (8006380 <MX_GPIO_Init+0xd4>)
 8006322:	f002 fc1d 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_RPM_Pin */
  GPIO_InitStruct.Pin = FAN_RPM_Pin;
 8006326:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800632a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800632c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006332:	2301      	movs	r3, #1
 8006334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAN_RPM_GPIO_Port, &GPIO_InitStruct);
 8006336:	f107 030c 	add.w	r3, r7, #12
 800633a:	4619      	mov	r1, r3
 800633c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006340:	f002 fc0e 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROM_WP_Pin */
  GPIO_InitStruct.Pin = PROM_WP_Pin;
 8006344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800634a:	2301      	movs	r3, #1
 800634c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800634e:	2302      	movs	r3, #2
 8006350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PROM_WP_GPIO_Port, &GPIO_InitStruct);
 8006356:	f107 030c 	add.w	r3, r7, #12
 800635a:	4619      	mov	r1, r3
 800635c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006360:	f002 fbfe 	bl	8008b60 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	2017      	movs	r0, #23
 800636a:	f002 f932 	bl	80085d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800636e:	2017      	movs	r0, #23
 8006370:	f002 f94b 	bl	800860a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8006374:	bf00      	nop
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40021000 	.word	0x40021000
 8006380:	48000400 	.word	0x48000400

08006384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006388:	b672      	cpsid	i
}
 800638a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <Error_Handler+0x8>

08006390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006396:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <HAL_MspInit+0x44>)
 8006398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800639a:	4a0e      	ldr	r2, [pc, #56]	@ (80063d4 <HAL_MspInit+0x44>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80063a2:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <HAL_MspInit+0x44>)
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ae:	4b09      	ldr	r3, [pc, #36]	@ (80063d4 <HAL_MspInit+0x44>)
 80063b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b2:	4a08      	ldr	r2, [pc, #32]	@ (80063d4 <HAL_MspInit+0x44>)
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ba:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <HAL_MspInit+0x44>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40021000 	.word	0x40021000

080063d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a2f      	ldr	r2, [pc, #188]	@ (80064b4 <HAL_ADC_MspInit+0xdc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d158      	bne.n	80064ac <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80063fa:	4b2f      	ldr	r3, [pc, #188]	@ (80064b8 <HAL_ADC_MspInit+0xe0>)
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	4a2e      	ldr	r2, [pc, #184]	@ (80064b8 <HAL_ADC_MspInit+0xe0>)
 8006400:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006406:	4b2c      	ldr	r3, [pc, #176]	@ (80064b8 <HAL_ADC_MspInit+0xe0>)
 8006408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006412:	4b29      	ldr	r3, [pc, #164]	@ (80064b8 <HAL_ADC_MspInit+0xe0>)
 8006414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006416:	4a28      	ldr	r2, [pc, #160]	@ (80064b8 <HAL_ADC_MspInit+0xe0>)
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800641e:	4b26      	ldr	r3, [pc, #152]	@ (80064b8 <HAL_ADC_MspInit+0xe0>)
 8006420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SiPM_Sig_Pin|PD_Sig_Pin|LD_Mon_Pin|HV_Chk_Pin;
 800642a:	231e      	movs	r3, #30
 800642c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800642e:	230b      	movs	r3, #11
 8006430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006436:	f107 0314 	add.w	r3, r7, #20
 800643a:	4619      	mov	r1, r3
 800643c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006440:	f002 fb8e 	bl	8008b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006444:	4b1d      	ldr	r3, [pc, #116]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006446:	4a1e      	ldr	r2, [pc, #120]	@ (80064c0 <HAL_ADC_MspInit+0xe8>)
 8006448:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800644a:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 800644c:	2200      	movs	r2, #0
 800644e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006450:	4b1a      	ldr	r3, [pc, #104]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006452:	2200      	movs	r2, #0
 8006454:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006456:	4b19      	ldr	r3, [pc, #100]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006458:	2200      	movs	r2, #0
 800645a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800645c:	4b17      	ldr	r3, [pc, #92]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 800645e:	2280      	movs	r2, #128	@ 0x80
 8006460:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006462:	4b16      	ldr	r3, [pc, #88]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006464:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006468:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800646a:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 800646c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006470:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006474:	2220      	movs	r2, #32
 8006476:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006478:	4b10      	ldr	r3, [pc, #64]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 800647a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800647e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006480:	480e      	ldr	r0, [pc, #56]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006482:	f002 f8eb 	bl	800865c <HAL_DMA_Init>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_ADC_MspInit+0xb8>
    {
      Error_Handler();
 800648c:	f7ff ff7a 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a0a      	ldr	r2, [pc, #40]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006494:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006496:	4a09      	ldr	r2, [pc, #36]	@ (80064bc <HAL_ADC_MspInit+0xe4>)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	2012      	movs	r0, #18
 80064a2:	f002 f896 	bl	80085d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80064a6:	2012      	movs	r0, #18
 80064a8:	f002 f8af 	bl	800860a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80064ac:	bf00      	nop
 80064ae:	3728      	adds	r7, #40	@ 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	50040000 	.word	0x50040000
 80064b8:	40021000 	.word	0x40021000
 80064bc:	20000700 	.word	0x20000700
 80064c0:	40020008 	.word	0x40020008

080064c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b096      	sub	sp, #88	@ 0x58
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	609a      	str	r2, [r3, #8]
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064dc:	f107 0310 	add.w	r3, r7, #16
 80064e0:	2234      	movs	r2, #52	@ 0x34
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f006 fbf5 	bl	800ccd4 <memset>
  if(hi2c->Instance==I2C1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1f      	ldr	r2, [pc, #124]	@ (800656c <HAL_I2C_MspInit+0xa8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d137      	bne.n	8006564 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80064f8:	2300      	movs	r3, #0
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064fc:	f107 0310 	add.w	r3, r7, #16
 8006500:	4618      	mov	r0, r3
 8006502:	f004 fac9 	bl	800aa98 <HAL_RCCEx_PeriphCLKConfig>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800650c:	f7ff ff3a 	bl	8006384 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006510:	4b17      	ldr	r3, [pc, #92]	@ (8006570 <HAL_I2C_MspInit+0xac>)
 8006512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006514:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <HAL_I2C_MspInit+0xac>)
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800651c:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <HAL_I2C_MspInit+0xac>)
 800651e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006528:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800652c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800652e:	2312      	movs	r3, #18
 8006530:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006532:	2300      	movs	r3, #0
 8006534:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006536:	2300      	movs	r3, #0
 8006538:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800653a:	2304      	movs	r3, #4
 800653c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006542:	4619      	mov	r1, r3
 8006544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006548:	f002 fb0a 	bl	8008b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800654c:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <HAL_I2C_MspInit+0xac>)
 800654e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006550:	4a07      	ldr	r2, [pc, #28]	@ (8006570 <HAL_I2C_MspInit+0xac>)
 8006552:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006556:	6593      	str	r3, [r2, #88]	@ 0x58
 8006558:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <HAL_I2C_MspInit+0xac>)
 800655a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006564:	bf00      	nop
 8006566:	3758      	adds	r7, #88	@ 0x58
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40005400 	.word	0x40005400
 8006570:	40021000 	.word	0x40021000

08006574 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006584:	d113      	bne.n	80065ae <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <HAL_TIM_Base_MspInit+0x44>)
 8006588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658a:	4a0b      	ldr	r2, [pc, #44]	@ (80065b8 <HAL_TIM_Base_MspInit+0x44>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	6593      	str	r3, [r2, #88]	@ 0x58
 8006592:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <HAL_TIM_Base_MspInit+0x44>)
 8006594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800659e:	2200      	movs	r2, #0
 80065a0:	2100      	movs	r1, #0
 80065a2:	201c      	movs	r0, #28
 80065a4:	f002 f815 	bl	80085d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80065a8:	201c      	movs	r0, #28
 80065aa:	f002 f82e 	bl	800860a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000

080065bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b096      	sub	sp, #88	@ 0x58
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065d4:	f107 0310 	add.w	r3, r7, #16
 80065d8:	2234      	movs	r2, #52	@ 0x34
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f006 fb79 	bl	800ccd4 <memset>
  if(huart->Instance==USART1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a37      	ldr	r2, [pc, #220]	@ (80066c4 <HAL_UART_MspInit+0x108>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d166      	bne.n	80066ba <HAL_UART_MspInit+0xfe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80065ec:	2301      	movs	r3, #1
 80065ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	4618      	mov	r0, r3
 80065fa:	f004 fa4d 	bl	800aa98 <HAL_RCCEx_PeriphCLKConfig>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006604:	f7ff febe 	bl	8006384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006608:	4b2f      	ldr	r3, [pc, #188]	@ (80066c8 <HAL_UART_MspInit+0x10c>)
 800660a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660c:	4a2e      	ldr	r2, [pc, #184]	@ (80066c8 <HAL_UART_MspInit+0x10c>)
 800660e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006612:	6613      	str	r3, [r2, #96]	@ 0x60
 8006614:	4b2c      	ldr	r3, [pc, #176]	@ (80066c8 <HAL_UART_MspInit+0x10c>)
 8006616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006620:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <HAL_UART_MspInit+0x10c>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	4a28      	ldr	r2, [pc, #160]	@ (80066c8 <HAL_UART_MspInit+0x10c>)
 8006626:	f043 0302 	orr.w	r3, r3, #2
 800662a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800662c:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <HAL_UART_MspInit+0x10c>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006638:	23c0      	movs	r3, #192	@ 0xc0
 800663a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663c:	2302      	movs	r3, #2
 800663e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006644:	2301      	movs	r3, #1
 8006646:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006648:	2307      	movs	r3, #7
 800664a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006650:	4619      	mov	r1, r3
 8006652:	481e      	ldr	r0, [pc, #120]	@ (80066cc <HAL_UART_MspInit+0x110>)
 8006654:	f002 fa84 	bl	8008b60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006658:	4b1d      	ldr	r3, [pc, #116]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 800665a:	4a1e      	ldr	r2, [pc, #120]	@ (80066d4 <HAL_UART_MspInit+0x118>)
 800665c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800665e:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 8006660:	2202      	movs	r2, #2
 8006662:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 8006666:	2200      	movs	r2, #0
 8006668:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800666a:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 800666c:	2200      	movs	r2, #0
 800666e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 8006672:	2280      	movs	r2, #128	@ 0x80
 8006674:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006676:	4b16      	ldr	r3, [pc, #88]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 8006678:	2200      	movs	r2, #0
 800667a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800667c:	4b14      	ldr	r3, [pc, #80]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 800667e:	2200      	movs	r2, #0
 8006680:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006682:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 8006684:	2220      	movs	r2, #32
 8006686:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 800668a:	2200      	movs	r2, #0
 800668c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800668e:	4810      	ldr	r0, [pc, #64]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 8006690:	f001 ffe4 	bl	800865c <HAL_DMA_Init>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800669a:	f7ff fe73 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a0b      	ldr	r2, [pc, #44]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 80066a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80066a4:	4a0a      	ldr	r2, [pc, #40]	@ (80066d0 <HAL_UART_MspInit+0x114>)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2100      	movs	r1, #0
 80066ae:	2025      	movs	r0, #37	@ 0x25
 80066b0:	f001 ff8f 	bl	80085d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80066b4:	2025      	movs	r0, #37	@ 0x25
 80066b6:	f001 ffa8 	bl	800860a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80066ba:	bf00      	nop
 80066bc:	3758      	adds	r7, #88	@ 0x58
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40013800 	.word	0x40013800
 80066c8:	40021000 	.word	0x40021000
 80066cc:	48000400 	.word	0x48000400
 80066d0:	20000870 	.word	0x20000870
 80066d4:	40020058 	.word	0x40020058

080066d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80066dc:	bf00      	nop
 80066de:	e7fd      	b.n	80066dc <NMI_Handler+0x4>

080066e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <HardFault_Handler+0x4>

080066e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066ec:	bf00      	nop
 80066ee:	e7fd      	b.n	80066ec <MemManage_Handler+0x4>

080066f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <BusFault_Handler+0x4>

080066f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <UsageFault_Handler+0x4>

08006700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800670e:	b480      	push	{r7}
 8006710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006712:	bf00      	nop
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006720:	bf00      	nop
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800672e:	f000 f8cd 	bl	80068cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800673c:	4802      	ldr	r0, [pc, #8]	@ (8006748 <DMA1_Channel1_IRQHandler+0x10>)
 800673e:	f002 f924 	bl	800898a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000700 	.word	0x20000700

0800674c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006750:	4802      	ldr	r0, [pc, #8]	@ (800675c <DMA1_Channel5_IRQHandler+0x10>)
 8006752:	f002 f91a 	bl	800898a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000870 	.word	0x20000870

08006760 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006764:	4802      	ldr	r0, [pc, #8]	@ (8006770 <ADC1_2_IRQHandler+0x10>)
 8006766:	f000 fcff 	bl	8007168 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2000069c 	.word	0x2000069c

08006774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_RPM_Pin);
 8006778:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800677c:	f002 fb7a 	bl	8008e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006780:	bf00      	nop
 8006782:	bd80      	pop	{r7, pc}

08006784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006788:	4802      	ldr	r0, [pc, #8]	@ (8006794 <TIM2_IRQHandler+0x10>)
 800678a:	f004 fbb7 	bl	800aefc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	2000079c 	.word	0x2000079c

08006798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800679c:	4802      	ldr	r0, [pc, #8]	@ (80067a8 <USART1_IRQHandler+0x10>)
 800679e:	f005 f89d 	bl	800b8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200007e8 	.word	0x200007e8

080067ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80067b0:	4b06      	ldr	r3, [pc, #24]	@ (80067cc <SystemInit+0x20>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	4a05      	ldr	r2, [pc, #20]	@ (80067cc <SystemInit+0x20>)
 80067b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80067c0:	bf00      	nop
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 80067d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006808 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80067d4:	f7ff ffea 	bl	80067ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80067d8:	480c      	ldr	r0, [pc, #48]	@ (800680c <LoopForever+0x6>)
  ldr r1, =_edata
 80067da:	490d      	ldr	r1, [pc, #52]	@ (8006810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80067dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006814 <LoopForever+0xe>)
  movs r3, #0
 80067de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067e0:	e002      	b.n	80067e8 <LoopCopyDataInit>

080067e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067e6:	3304      	adds	r3, #4

080067e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067ec:	d3f9      	bcc.n	80067e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80067f0:	4c0a      	ldr	r4, [pc, #40]	@ (800681c <LoopForever+0x16>)
  movs r3, #0
 80067f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067f4:	e001      	b.n	80067fa <LoopFillZerobss>

080067f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067f8:	3204      	adds	r2, #4

080067fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067fc:	d3fb      	bcc.n	80067f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80067fe:	f006 fa71 	bl	800cce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006802:	f7ff fb11 	bl	8005e28 <main>

08006806 <LoopForever>:

LoopForever:
    b LoopForever
 8006806:	e7fe      	b.n	8006806 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006808:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800680c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006810:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006814:	0800cdb8 	.word	0x0800cdb8
  ldr r2, =_sbss
 8006818:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800681c:	200008bc 	.word	0x200008bc

08006820 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006820:	e7fe      	b.n	8006820 <COMP_IRQHandler>

08006822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800682c:	2003      	movs	r0, #3
 800682e:	f001 fec5 	bl	80085bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006832:	200f      	movs	r0, #15
 8006834:	f000 f80e 	bl	8006854 <HAL_InitTick>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	71fb      	strb	r3, [r7, #7]
 8006842:	e001      	b.n	8006848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006844:	f7ff fda4 	bl	8006390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006848:	79fb      	ldrb	r3, [r7, #7]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006860:	4b17      	ldr	r3, [pc, #92]	@ (80068c0 <HAL_InitTick+0x6c>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d023      	beq.n	80068b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006868:	4b16      	ldr	r3, [pc, #88]	@ (80068c4 <HAL_InitTick+0x70>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b14      	ldr	r3, [pc, #80]	@ (80068c0 <HAL_InitTick+0x6c>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	4619      	mov	r1, r3
 8006872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006876:	fbb3 f3f1 	udiv	r3, r3, r1
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	4618      	mov	r0, r3
 8006880:	f001 fedf 	bl	8008642 <HAL_SYSTICK_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b0f      	cmp	r3, #15
 800688e:	d809      	bhi.n	80068a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006890:	2200      	movs	r2, #0
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	f001 fe9b 	bl	80085d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800689c:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <HAL_InitTick+0x74>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	e007      	b.n	80068b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
 80068a8:	e004      	b.n	80068b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
 80068ae:	e001      	b.n	80068b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000008 	.word	0x20000008
 80068c4:	20000000 	.word	0x20000000
 80068c8:	20000004 	.word	0x20000004

080068cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_IncTick+0x20>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <HAL_IncTick+0x24>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4413      	add	r3, r2
 80068dc:	4a04      	ldr	r2, [pc, #16]	@ (80068f0 <HAL_IncTick+0x24>)
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000008 	.word	0x20000008
 80068f0:	200008b8 	.word	0x200008b8

080068f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return uwTick;
 80068f8:	4b03      	ldr	r3, [pc, #12]	@ (8006908 <HAL_GetTick+0x14>)
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	200008b8 	.word	0x200008b8

0800690c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	609a      	str	r2, [r3, #8]
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3360      	adds	r3, #96	@ 0x60
 8006986:	461a      	mov	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b08      	ldr	r3, [pc, #32]	@ (80069b8 <LL_ADC_SetOffset+0x44>)
 8006996:	4013      	ands	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	03fff000 	.word	0x03fff000

080069bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3360      	adds	r3, #96	@ 0x60
 80069ca:	461a      	mov	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3360      	adds	r3, #96	@ 0x60
 80069f8:	461a      	mov	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	615a      	str	r2, [r3, #20]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3330      	adds	r3, #48	@ 0x30
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	f003 030c 	and.w	r3, r3, #12
 8006a86:	4413      	add	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	211f      	movs	r1, #31
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	401a      	ands	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	0e9b      	lsrs	r3, r3, #26
 8006aa2:	f003 011f 	and.w	r1, r3, #31
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ace:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3314      	adds	r3, #20
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	0e5b      	lsrs	r3, r3, #25
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	4413      	add	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	0d1b      	lsrs	r3, r3, #20
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2107      	movs	r1, #7
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	0d1b      	lsrs	r3, r3, #20
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	401a      	ands	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0318 	and.w	r3, r3, #24
 8006b62:	4908      	ldr	r1, [pc, #32]	@ (8006b84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006b64:	40d9      	lsrs	r1, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	400b      	ands	r3, r1
 8006b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	0007ffff 	.word	0x0007ffff

08006b88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 031f 	and.w	r3, r3, #31
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006bd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6093      	str	r3, [r2, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf8:	d101      	bne.n	8006bfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006c1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c48:	d101      	bne.n	8006c4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c70:	f043 0201 	orr.w	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c98:	f043 0202 	orr.w	r2, r3, #2
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <LL_ADC_IsEnabled+0x18>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <LL_ADC_IsEnabled+0x1a>
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d101      	bne.n	8006cea <LL_ADC_IsDisableOngoing+0x18>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <LL_ADC_IsDisableOngoing+0x1a>
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d0c:	f043 0204 	orr.w	r2, r3, #4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d101      	bne.n	8006d38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d101      	bne.n	8006d5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b089      	sub	sp, #36	@ 0x24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e12b      	b.n	8006fde <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff fb1f 	bl	80063d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ff19 	bl	8006be4 <LL_ADC_IsDeepPowerDownEnabled>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff feff 	bl	8006bc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff ff34 	bl	8006c34 <LL_ADC_IsInternalRegulatorEnabled>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d115      	bne.n	8006dfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff ff18 	bl	8006c0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ddc:	4b82      	ldr	r3, [pc, #520]	@ (8006fe8 <HAL_ADC_Init+0x27c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	4a82      	ldr	r2, [pc, #520]	@ (8006fec <HAL_ADC_Init+0x280>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	099b      	lsrs	r3, r3, #6
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006df0:	e002      	b.n	8006df8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f9      	bne.n	8006df2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff ff16 	bl	8006c34 <LL_ADC_IsInternalRegulatorEnabled>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10d      	bne.n	8006e2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	f043 0210 	orr.w	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1e:	f043 0201 	orr.w	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff ff76 	bl	8006d20 <LL_ADC_REG_IsConversionOngoing>
 8006e34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 80c4 	bne.w	8006fcc <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 80c0 	bne.w	8006fcc <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006e54:	f043 0202 	orr.w	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff ff23 	bl	8006cac <LL_ADC_IsEnabled>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d110      	bne.n	8006e8e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e6c:	4860      	ldr	r0, [pc, #384]	@ (8006ff0 <HAL_ADC_Init+0x284>)
 8006e6e:	f7ff ff1d 	bl	8006cac <LL_ADC_IsEnabled>
 8006e72:	4604      	mov	r4, r0
 8006e74:	485f      	ldr	r0, [pc, #380]	@ (8006ff4 <HAL_ADC_Init+0x288>)
 8006e76:	f7ff ff19 	bl	8006cac <LL_ADC_IsEnabled>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4323      	orrs	r3, r4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4619      	mov	r1, r3
 8006e88:	485b      	ldr	r0, [pc, #364]	@ (8006ff8 <HAL_ADC_Init+0x28c>)
 8006e8a:	f7ff fd3f 	bl	800690c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7e5b      	ldrb	r3, [r3, #25]
 8006e92:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e98:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006e9e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006ea4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eac:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d106      	bne.n	8006eca <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	045b      	lsls	r3, r3, #17
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed6:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	4b43      	ldr	r3, [pc, #268]	@ (8006ffc <HAL_ADC_Init+0x290>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	69b9      	ldr	r1, [r7, #24]
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff21 	bl	8006d46 <LL_ADC_INJ_IsConversionOngoing>
 8006f04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d13d      	bne.n	8006f88 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d13a      	bne.n	8006f88 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f20:	4313      	orrs	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f2e:	f023 0302 	bic.w	r3, r3, #2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	69b9      	ldr	r1, [r7, #24]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d118      	bne.n	8006f78 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f50:	f023 0304 	bic.w	r3, r3, #4
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f5c:	4311      	orrs	r1, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f62:	4311      	orrs	r1, r2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	611a      	str	r2, [r3, #16]
 8006f76:	e007      	b.n	8006f88 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0201 	bic.w	r2, r2, #1
 8006f86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10c      	bne.n	8006faa <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	f023 010f 	bic.w	r1, r3, #15
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fa8:	e007      	b.n	8006fba <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 020f 	bic.w	r2, r2, #15
 8006fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fbe:	f023 0303 	bic.w	r3, r3, #3
 8006fc2:	f043 0201 	orr.w	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8006fca:	e007      	b.n	8006fdc <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd0:	f043 0210 	orr.w	r2, r3, #16
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3724      	adds	r7, #36	@ 0x24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd90      	pop	{r4, r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000000 	.word	0x20000000
 8006fec:	053e2d63 	.word	0x053e2d63
 8006ff0:	50040000 	.word	0x50040000
 8006ff4:	50040100 	.word	0x50040100
 8006ff8:	50040300 	.word	0x50040300
 8006ffc:	fff0c007 	.word	0xfff0c007

08007000 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800700c:	4850      	ldr	r0, [pc, #320]	@ (8007150 <HAL_ADC_Start_DMA+0x150>)
 800700e:	f7ff fdbb 	bl	8006b88 <LL_ADC_GetMultimode>
 8007012:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fe81 	bl	8006d20 <LL_ADC_REG_IsConversionOngoing>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 808e 	bne.w	8007142 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_ADC_Start_DMA+0x34>
 8007030:	2302      	movs	r3, #2
 8007032:	e089      	b.n	8007148 <HAL_ADC_Start_DMA+0x148>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b05      	cmp	r3, #5
 8007046:	d002      	beq.n	800704e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b09      	cmp	r3, #9
 800704c:	d172      	bne.n	8007134 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 febe 	bl	8007dd0 <ADC_Enable>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d165      	bne.n	800712a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a37      	ldr	r2, [pc, #220]	@ (8007154 <HAL_ADC_Start_DMA+0x154>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d002      	beq.n	8007082 <HAL_ADC_Start_DMA+0x82>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	e000      	b.n	8007084 <HAL_ADC_Start_DMA+0x84>
 8007082:	4b35      	ldr	r3, [pc, #212]	@ (8007158 <HAL_ADC_Start_DMA+0x158>)
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	4293      	cmp	r3, r2
 800708a:	d002      	beq.n	8007092 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007096:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d006      	beq.n	80070b8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	f023 0206 	bic.w	r2, r3, #6
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80070b6:	e002      	b.n	80070be <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c2:	4a26      	ldr	r2, [pc, #152]	@ (800715c <HAL_ADC_Start_DMA+0x15c>)
 80070c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ca:	4a25      	ldr	r2, [pc, #148]	@ (8007160 <HAL_ADC_Start_DMA+0x160>)
 80070cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d2:	4a24      	ldr	r2, [pc, #144]	@ (8007164 <HAL_ADC_Start_DMA+0x164>)
 80070d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	221c      	movs	r2, #28
 80070dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0210 	orr.w	r2, r2, #16
 80070f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3340      	adds	r3, #64	@ 0x40
 8007110:	4619      	mov	r1, r3
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f001 fb59 	bl	80087cc <HAL_DMA_Start_IT>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fde8 	bl	8006cf8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007128:	e00d      	b.n	8007146 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8007132:	e008      	b.n	8007146 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007140:	e001      	b.n	8007146 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007142:	2302      	movs	r3, #2
 8007144:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	50040300 	.word	0x50040300
 8007154:	50040100 	.word	0x50040100
 8007158:	50040000 	.word	0x50040000
 800715c:	08007f9b 	.word	0x08007f9b
 8007160:	08008073 	.word	0x08008073
 8007164:	0800808f 	.word	0x0800808f

08007168 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	@ 0x28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007170:	2300      	movs	r3, #0
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007184:	4882      	ldr	r0, [pc, #520]	@ (8007390 <HAL_ADC_IRQHandler+0x228>)
 8007186:	f7ff fcff 	bl	8006b88 <LL_ADC_GetMultimode>
 800718a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d017      	beq.n	80071c6 <HAL_ADC_IRQHandler+0x5e>
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d012      	beq.n	80071c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f85d 	bl	8008278 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2202      	movs	r2, #2
 80071c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <HAL_ADC_IRQHandler+0x72>
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8083 	beq.w	80072ec <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d07d      	beq.n	80072ec <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007200:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff fc19 	bl	8006a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d062      	beq.n	80072de <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a5d      	ldr	r2, [pc, #372]	@ (8007394 <HAL_ADC_IRQHandler+0x22c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d002      	beq.n	8007228 <HAL_ADC_IRQHandler+0xc0>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	e000      	b.n	800722a <HAL_ADC_IRQHandler+0xc2>
 8007228:	4b5b      	ldr	r3, [pc, #364]	@ (8007398 <HAL_ADC_IRQHandler+0x230>)
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	4293      	cmp	r3, r2
 8007230:	d008      	beq.n	8007244 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b05      	cmp	r3, #5
 800723c:	d002      	beq.n	8007244 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b09      	cmp	r3, #9
 8007242:	d104      	bne.n	800724e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	623b      	str	r3, [r7, #32]
 800724c:	e00c      	b.n	8007268 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a50      	ldr	r2, [pc, #320]	@ (8007394 <HAL_ADC_IRQHandler+0x22c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d002      	beq.n	800725e <HAL_ADC_IRQHandler+0xf6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	e000      	b.n	8007260 <HAL_ADC_IRQHandler+0xf8>
 800725e:	4b4e      	ldr	r3, [pc, #312]	@ (8007398 <HAL_ADC_IRQHandler+0x230>)
 8007260:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d135      	bne.n	80072de <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d12e      	bne.n	80072de <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fd4b 	bl	8006d20 <LL_ADC_REG_IsConversionOngoing>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d11a      	bne.n	80072c6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 020c 	bic.w	r2, r2, #12
 800729e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072bc:	f043 0201 	orr.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80072c4:	e00b      	b.n	80072de <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ca:	f043 0210 	orr.w	r2, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d6:	f043 0201 	orr.w	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe fd38 	bl	8005d54 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	220c      	movs	r2, #12
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <HAL_ADC_IRQHandler+0x198>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 809f 	beq.w	800744a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 8099 	beq.w	800744a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007328:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fbc4 	bl	8006ac2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800733a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fb7f 	bl	8006a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007346:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a11      	ldr	r2, [pc, #68]	@ (8007394 <HAL_ADC_IRQHandler+0x22c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d002      	beq.n	8007358 <HAL_ADC_IRQHandler+0x1f0>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	e000      	b.n	800735a <HAL_ADC_IRQHandler+0x1f2>
 8007358:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <HAL_ADC_IRQHandler+0x230>)
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6812      	ldr	r2, [r2, #0]
 800735e:	4293      	cmp	r3, r2
 8007360:	d008      	beq.n	8007374 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b06      	cmp	r3, #6
 800736c:	d002      	beq.n	8007374 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b07      	cmp	r3, #7
 8007372:	d104      	bne.n	800737e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	623b      	str	r3, [r7, #32]
 800737c:	e013      	b.n	80073a6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <HAL_ADC_IRQHandler+0x22c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d009      	beq.n	800739c <HAL_ADC_IRQHandler+0x234>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	e007      	b.n	800739e <HAL_ADC_IRQHandler+0x236>
 800738e:	bf00      	nop
 8007390:	50040300 	.word	0x50040300
 8007394:	50040100 	.word	0x50040100
 8007398:	50040000 	.word	0x50040000
 800739c:	4b7d      	ldr	r3, [pc, #500]	@ (8007594 <HAL_ADC_IRQHandler+0x42c>)
 800739e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d047      	beq.n	800743c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <HAL_ADC_IRQHandler+0x25e>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d03f      	beq.n	800743c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d13a      	bne.n	800743c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b40      	cmp	r3, #64	@ 0x40
 80073d2:	d133      	bne.n	800743c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d12e      	bne.n	800743c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fcaf 	bl	8006d46 <LL_ADC_INJ_IsConversionOngoing>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d11a      	bne.n	8007424 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007412:	2b00      	cmp	r3, #0
 8007414:	d112      	bne.n	800743c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741a:	f043 0201 	orr.w	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	655a      	str	r2, [r3, #84]	@ 0x54
 8007422:	e00b      	b.n	800743c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	f043 0210 	orr.w	r2, r3, #16
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007434:	f043 0201 	orr.w	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fef3 	bl	8008228 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2260      	movs	r2, #96	@ 0x60
 8007448:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007450:	2b00      	cmp	r3, #0
 8007452:	d011      	beq.n	8007478 <HAL_ADC_IRQHandler+0x310>
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007462:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8a0 	bl	80075b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2280      	movs	r2, #128	@ 0x80
 8007476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d012      	beq.n	80074a8 <HAL_ADC_IRQHandler+0x340>
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00d      	beq.n	80074a8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007490:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fed9 	bl	8008250 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d012      	beq.n	80074d8 <HAL_ADC_IRQHandler+0x370>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00d      	beq.n	80074d8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fecb 	bl	8008264 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d036      	beq.n	8007550 <HAL_ADC_IRQHandler+0x3e8>
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d031      	beq.n	8007550 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80074f4:	2301      	movs	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f8:	e014      	b.n	8007524 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007500:	4825      	ldr	r0, [pc, #148]	@ (8007598 <HAL_ADC_IRQHandler+0x430>)
 8007502:	f7ff fb4f 	bl	8006ba4 <LL_ADC_GetMultiDMATransfer>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800750c:	2301      	movs	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007510:	e008      	b.n	8007524 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8007520:	2301      	movs	r3, #1
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10e      	bne.n	8007548 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753a:	f043 0202 	orr.w	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f83e 	bl	80075c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2210      	movs	r2, #16
 800754e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007556:	2b00      	cmp	r3, #0
 8007558:	d018      	beq.n	800758c <HAL_ADC_IRQHandler+0x424>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007560:	2b00      	cmp	r3, #0
 8007562:	d013      	beq.n	800758c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007574:	f043 0208 	orr.w	r2, r3, #8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007584:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fe58 	bl	800823c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800758c:	bf00      	nop
 800758e:	3728      	adds	r7, #40	@ 0x28
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	50040000 	.word	0x50040000
 8007598:	50040300 	.word	0x50040300

0800759c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0b6      	sub	sp, #216	@ 0xd8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_ADC_ConfigChannel+0x22>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e3d5      	b.n	8007da6 <HAL_ADC_ConfigChannel+0x7ce>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff fb8a 	bl	8006d20 <LL_ADC_REG_IsConversionOngoing>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	f040 83ba 	bne.w	8007d88 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b05      	cmp	r3, #5
 8007622:	d824      	bhi.n	800766e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	3b02      	subs	r3, #2
 800762a:	2b03      	cmp	r3, #3
 800762c:	d81b      	bhi.n	8007666 <HAL_ADC_ConfigChannel+0x8e>
 800762e:	a201      	add	r2, pc, #4	@ (adr r2, 8007634 <HAL_ADC_ConfigChannel+0x5c>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007645 	.word	0x08007645
 8007638:	0800764d 	.word	0x0800764d
 800763c:	08007655 	.word	0x08007655
 8007640:	0800765d 	.word	0x0800765d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8007644:	230c      	movs	r3, #12
 8007646:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800764a:	e010      	b.n	800766e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800764c:	2312      	movs	r3, #18
 800764e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007652:	e00c      	b.n	800766e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8007654:	2318      	movs	r3, #24
 8007656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800765a:	e008      	b.n	800766e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800765c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007664:	e003      	b.n	800766e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8007666:	2306      	movs	r3, #6
 8007668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800766c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800767c:	f7ff f9f5 	bl	8006a6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fb4b 	bl	8006d20 <LL_ADC_REG_IsConversionOngoing>
 800768a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fb57 	bl	8006d46 <LL_ADC_INJ_IsConversionOngoing>
 8007698:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800769c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 81bf 	bne.w	8007a24 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80076a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 81ba 	bne.w	8007a24 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076b8:	d10f      	bne.n	80076da <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	4619      	mov	r1, r3
 80076c6:	f7ff fa0f 	bl	8006ae8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff f9a3 	bl	8006a1e <LL_ADC_SetSamplingTimeCommonConfig>
 80076d8:	e00e      	b.n	80076f8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7ff f9fe 	bl	8006ae8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff f993 	bl	8006a1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695a      	ldr	r2, [r3, #20]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	08db      	lsrs	r3, r3, #3
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	fa02 f303 	lsl.w	r3, r2, r3
 800770e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b04      	cmp	r3, #4
 8007718:	d00a      	beq.n	8007730 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6919      	ldr	r1, [r3, #16]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800772a:	f7ff f923 	bl	8006974 <LL_ADC_SetOffset>
 800772e:	e179      	b.n	8007a24 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f940 	bl	80069bc <LL_ADC_GetOffsetChannel>
 800773c:	4603      	mov	r3, r0
 800773e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <HAL_ADC_ConfigChannel+0x184>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff f935 	bl	80069bc <LL_ADC_GetOffsetChannel>
 8007752:	4603      	mov	r3, r0
 8007754:	0e9b      	lsrs	r3, r3, #26
 8007756:	f003 021f 	and.w	r2, r3, #31
 800775a:	e01e      	b.n	800779a <HAL_ADC_ConfigChannel+0x1c2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff f92a 	bl	80069bc <LL_ADC_GetOffsetChannel>
 8007768:	4603      	mov	r3, r0
 800776a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007772:	fa93 f3a3 	rbit	r3, r3
 8007776:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800777a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800777e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800778a:	2320      	movs	r3, #32
 800778c:	e004      	b.n	8007798 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800778e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007792:	fab3 f383 	clz	r3, r3
 8007796:	b2db      	uxtb	r3, r3
 8007798:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_ADC_ConfigChannel+0x1da>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	0e9b      	lsrs	r3, r3, #26
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	e018      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x20c>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077be:	fa93 f3a3 	rbit	r3, r3
 80077c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80077c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80077ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80077d6:	2320      	movs	r3, #32
 80077d8:	e004      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80077da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80077de:	fab3 f383 	clz	r3, r3
 80077e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d106      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff f8f9 	bl	80069e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff f8dd 	bl	80069bc <LL_ADC_GetOffsetChannel>
 8007802:	4603      	mov	r3, r0
 8007804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <HAL_ADC_ConfigChannel+0x24a>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff f8d2 	bl	80069bc <LL_ADC_GetOffsetChannel>
 8007818:	4603      	mov	r3, r0
 800781a:	0e9b      	lsrs	r3, r3, #26
 800781c:	f003 021f 	and.w	r2, r3, #31
 8007820:	e01e      	b.n	8007860 <HAL_ADC_ConfigChannel+0x288>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2101      	movs	r1, #1
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff f8c7 	bl	80069bc <LL_ADC_GetOffsetChannel>
 800782e:	4603      	mov	r3, r0
 8007830:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007838:	fa93 f3a3 	rbit	r3, r3
 800783c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8007840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8007850:	2320      	movs	r3, #32
 8007852:	e004      	b.n	800785e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8007854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007858:	fab3 f383 	clz	r3, r3
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x2a0>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	0e9b      	lsrs	r3, r3, #26
 8007872:	f003 031f 	and.w	r3, r3, #31
 8007876:	e018      	b.n	80078aa <HAL_ADC_ConfigChannel+0x2d2>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007880:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007884:	fa93 f3a3 	rbit	r3, r3
 8007888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800788c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800789c:	2320      	movs	r3, #32
 800789e:	e004      	b.n	80078aa <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80078a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d106      	bne.n	80078bc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff f896 	bl	80069e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2102      	movs	r1, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff f87a 	bl	80069bc <LL_ADC_GetOffsetChannel>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <HAL_ADC_ConfigChannel+0x310>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2102      	movs	r1, #2
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff f86f 	bl	80069bc <LL_ADC_GetOffsetChannel>
 80078de:	4603      	mov	r3, r0
 80078e0:	0e9b      	lsrs	r3, r3, #26
 80078e2:	f003 021f 	and.w	r2, r3, #31
 80078e6:	e01e      	b.n	8007926 <HAL_ADC_ConfigChannel+0x34e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2102      	movs	r1, #2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff f864 	bl	80069bc <LL_ADC_GetOffsetChannel>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078fe:	fa93 f3a3 	rbit	r3, r3
 8007902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8007906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800790a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800790e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8007916:	2320      	movs	r3, #32
 8007918:	e004      	b.n	8007924 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800791a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800791e:	fab3 f383 	clz	r3, r3
 8007922:	b2db      	uxtb	r3, r3
 8007924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <HAL_ADC_ConfigChannel+0x366>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	0e9b      	lsrs	r3, r3, #26
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	e014      	b.n	8007968 <HAL_ADC_ConfigChannel+0x390>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007946:	fa93 f3a3 	rbit	r3, r3
 800794a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800794c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800794e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007952:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800795a:	2320      	movs	r3, #32
 800795c:	e004      	b.n	8007968 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800795e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007968:	429a      	cmp	r2, r3
 800796a:	d106      	bne.n	800797a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2200      	movs	r2, #0
 8007972:	2102      	movs	r1, #2
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff f837 	bl	80069e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2103      	movs	r1, #3
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff f81b 	bl	80069bc <LL_ADC_GetOffsetChannel>
 8007986:	4603      	mov	r3, r0
 8007988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <HAL_ADC_ConfigChannel+0x3ce>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2103      	movs	r1, #3
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff f810 	bl	80069bc <LL_ADC_GetOffsetChannel>
 800799c:	4603      	mov	r3, r0
 800799e:	0e9b      	lsrs	r3, r3, #26
 80079a0:	f003 021f 	and.w	r2, r3, #31
 80079a4:	e017      	b.n	80079d6 <HAL_ADC_ConfigChannel+0x3fe>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2103      	movs	r1, #3
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff f805 	bl	80069bc <LL_ADC_GetOffsetChannel>
 80079b2:	4603      	mov	r3, r0
 80079b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079b8:	fa93 f3a3 	rbit	r3, r3
 80079bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80079be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079c0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80079c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80079c8:	2320      	movs	r3, #32
 80079ca:	e003      	b.n	80079d4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80079cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079ce:	fab3 f383 	clz	r3, r3
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d105      	bne.n	80079ee <HAL_ADC_ConfigChannel+0x416>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	0e9b      	lsrs	r3, r3, #26
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	e011      	b.n	8007a12 <HAL_ADC_ConfigChannel+0x43a>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079f6:	fa93 f3a3 	rbit	r3, r3
 80079fa:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80079fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8007a06:	2320      	movs	r3, #32
 8007a08:	e003      	b.n	8007a12 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8007a0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a0c:	fab3 f383 	clz	r3, r3
 8007a10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d106      	bne.n	8007a24 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2103      	movs	r1, #3
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe ffe2 	bl	80069e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff f93f 	bl	8006cac <LL_ADC_IsEnabled>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f040 813f 	bne.w	8007cb4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7ff f87c 	bl	8006b40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	4a8e      	ldr	r2, [pc, #568]	@ (8007c88 <HAL_ADC_ConfigChannel+0x6b0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	f040 8130 	bne.w	8007cb4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <HAL_ADC_ConfigChannel+0x4a4>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	0e9b      	lsrs	r3, r3, #26
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	2b09      	cmp	r3, #9
 8007a72:	bf94      	ite	ls
 8007a74:	2301      	movls	r3, #1
 8007a76:	2300      	movhi	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e019      	b.n	8007ab0 <HAL_ADC_ConfigChannel+0x4d8>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a84:	fa93 f3a3 	rbit	r3, r3
 8007a88:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8007a94:	2320      	movs	r3, #32
 8007a96:	e003      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8007a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a9a:	fab3 f383 	clz	r3, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	bf94      	ite	ls
 8007aaa:	2301      	movls	r3, #1
 8007aac:	2300      	movhi	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d079      	beq.n	8007ba8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d107      	bne.n	8007ad0 <HAL_ADC_ConfigChannel+0x4f8>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	0e9b      	lsrs	r3, r3, #26
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	069b      	lsls	r3, r3, #26
 8007aca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007ace:	e015      	b.n	8007afc <HAL_ADC_ConfigChannel+0x524>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad8:	fa93 f3a3 	rbit	r3, r3
 8007adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ae0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8007ae8:	2320      	movs	r3, #32
 8007aea:	e003      	b.n	8007af4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8007aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aee:	fab3 f383 	clz	r3, r3
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	3301      	adds	r3, #1
 8007af6:	069b      	lsls	r3, r3, #26
 8007af8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <HAL_ADC_ConfigChannel+0x544>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	0e9b      	lsrs	r3, r3, #26
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f003 031f 	and.w	r3, r3, #31
 8007b14:	2101      	movs	r1, #1
 8007b16:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1a:	e017      	b.n	8007b4c <HAL_ADC_ConfigChannel+0x574>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b24:	fa93 f3a3 	rbit	r3, r3
 8007b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8007b34:	2320      	movs	r3, #32
 8007b36:	e003      	b.n	8007b40 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8007b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b3a:	fab3 f383 	clz	r3, r3
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	3301      	adds	r3, #1
 8007b42:	f003 031f 	and.w	r3, r3, #31
 8007b46:	2101      	movs	r1, #1
 8007b48:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4c:	ea42 0103 	orr.w	r1, r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <HAL_ADC_ConfigChannel+0x59a>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	0e9b      	lsrs	r3, r3, #26
 8007b62:	3301      	adds	r3, #1
 8007b64:	f003 021f 	and.w	r2, r3, #31
 8007b68:	4613      	mov	r3, r2
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	051b      	lsls	r3, r3, #20
 8007b70:	e018      	b.n	8007ba4 <HAL_ADC_ConfigChannel+0x5cc>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	fa93 f3a3 	rbit	r3, r3
 8007b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8007b8a:	2320      	movs	r3, #32
 8007b8c:	e003      	b.n	8007b96 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	fab3 f383 	clz	r3, r3
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	3301      	adds	r3, #1
 8007b98:	f003 021f 	and.w	r2, r3, #31
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	e080      	b.n	8007caa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <HAL_ADC_ConfigChannel+0x5ec>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	0e9b      	lsrs	r3, r3, #26
 8007bba:	3301      	adds	r3, #1
 8007bbc:	069b      	lsls	r3, r3, #26
 8007bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bc2:	e015      	b.n	8007bf0 <HAL_ADC_ConfigChannel+0x618>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	fa93 f3a3 	rbit	r3, r3
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8007bdc:	2320      	movs	r3, #32
 8007bde:	e003      	b.n	8007be8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	fab3 f383 	clz	r3, r3
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	3301      	adds	r3, #1
 8007bea:	069b      	lsls	r3, r3, #26
 8007bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <HAL_ADC_ConfigChannel+0x638>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	0e9b      	lsrs	r3, r3, #26
 8007c02:	3301      	adds	r3, #1
 8007c04:	f003 031f 	and.w	r3, r3, #31
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	e017      	b.n	8007c40 <HAL_ADC_ConfigChannel+0x668>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	fa93 f3a3 	rbit	r3, r3
 8007c1c:	61bb      	str	r3, [r7, #24]
  return result;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007c28:	2320      	movs	r3, #32
 8007c2a:	e003      	b.n	8007c34 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	fab3 f383 	clz	r3, r3
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	3301      	adds	r3, #1
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	ea42 0103 	orr.w	r1, r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10d      	bne.n	8007c6c <HAL_ADC_ConfigChannel+0x694>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	0e9b      	lsrs	r3, r3, #26
 8007c56:	3301      	adds	r3, #1
 8007c58:	f003 021f 	and.w	r2, r3, #31
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	3b1e      	subs	r3, #30
 8007c64:	051b      	lsls	r3, r3, #20
 8007c66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c6a:	e01d      	b.n	8007ca8 <HAL_ADC_ConfigChannel+0x6d0>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	fa93 f3a3 	rbit	r3, r3
 8007c78:	60fb      	str	r3, [r7, #12]
  return result;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007c84:	2320      	movs	r3, #32
 8007c86:	e005      	b.n	8007c94 <HAL_ADC_ConfigChannel+0x6bc>
 8007c88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	fab3 f383 	clz	r3, r3
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	3301      	adds	r3, #1
 8007c96:	f003 021f 	and.w	r2, r3, #31
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3b1e      	subs	r3, #30
 8007ca2:	051b      	lsls	r3, r3, #20
 8007ca4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ca8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f7fe ff1a 	bl	8006ae8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8007db0 <HAL_ADC_ConfigChannel+0x7d8>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d06c      	beq.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007cc0:	483c      	ldr	r0, [pc, #240]	@ (8007db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007cc2:	f7fe fe49 	bl	8006958 <LL_ADC_GetCommonPathInternalCh>
 8007cc6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3a      	ldr	r2, [pc, #232]	@ (8007db8 <HAL_ADC_ConfigChannel+0x7e0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d127      	bne.n	8007d24 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d121      	bne.n	8007d24 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a35      	ldr	r2, [pc, #212]	@ (8007dbc <HAL_ADC_ConfigChannel+0x7e4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d157      	bne.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	482f      	ldr	r0, [pc, #188]	@ (8007db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007cf6:	f7fe fe1c 	bl	8006932 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007cfa:	4b31      	ldr	r3, [pc, #196]	@ (8007dc0 <HAL_ADC_ConfigChannel+0x7e8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	4a30      	ldr	r2, [pc, #192]	@ (8007dc4 <HAL_ADC_ConfigChannel+0x7ec>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	099b      	lsrs	r3, r3, #6
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007d14:	e002      	b.n	8007d1c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f9      	bne.n	8007d16 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007d22:	e03a      	b.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a27      	ldr	r2, [pc, #156]	@ (8007dc8 <HAL_ADC_ConfigChannel+0x7f0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d113      	bne.n	8007d56 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10d      	bne.n	8007d56 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dbc <HAL_ADC_ConfigChannel+0x7e4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d12a      	bne.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4819      	ldr	r0, [pc, #100]	@ (8007db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007d50:	f7fe fdef 	bl	8006932 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007d54:	e021      	b.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dcc <HAL_ADC_ConfigChannel+0x7f4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d11c      	bne.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d116      	bne.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a12      	ldr	r2, [pc, #72]	@ (8007dbc <HAL_ADC_ConfigChannel+0x7e4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d111      	bne.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d7e:	4619      	mov	r1, r3
 8007d80:	480c      	ldr	r0, [pc, #48]	@ (8007db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8007d82:	f7fe fdd6 	bl	8006932 <LL_ADC_SetCommonPathInternalCh>
 8007d86:	e008      	b.n	8007d9a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007da2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	37d8      	adds	r7, #216	@ 0xd8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	80080000 	.word	0x80080000
 8007db4:	50040300 	.word	0x50040300
 8007db8:	c7520000 	.word	0xc7520000
 8007dbc:	50040000 	.word	0x50040000
 8007dc0:	20000000 	.word	0x20000000
 8007dc4:	053e2d63 	.word	0x053e2d63
 8007dc8:	cb840000 	.word	0xcb840000
 8007dcc:	80000001 	.word	0x80000001

08007dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe ff63 	bl	8006cac <LL_ADC_IsEnabled>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d169      	bne.n	8007ec0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	4b36      	ldr	r3, [pc, #216]	@ (8007ecc <ADC_Enable+0xfc>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dfe:	f043 0210 	orr.w	r2, r3, #16
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0a:	f043 0201 	orr.w	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e055      	b.n	8007ec2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe ff1e 	bl	8006c5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007e20:	482b      	ldr	r0, [pc, #172]	@ (8007ed0 <ADC_Enable+0x100>)
 8007e22:	f7fe fd99 	bl	8006958 <LL_ADC_GetCommonPathInternalCh>
 8007e26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d013      	beq.n	8007e58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e30:	4b28      	ldr	r3, [pc, #160]	@ (8007ed4 <ADC_Enable+0x104>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	099b      	lsrs	r3, r3, #6
 8007e36:	4a28      	ldr	r2, [pc, #160]	@ (8007ed8 <ADC_Enable+0x108>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	099b      	lsrs	r3, r3, #6
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	4613      	mov	r3, r2
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007e4a:	e002      	b.n	8007e52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f9      	bne.n	8007e4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007e58:	f7fe fd4c 	bl	80068f4 <HAL_GetTick>
 8007e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007e5e:	e028      	b.n	8007eb2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe ff21 	bl	8006cac <LL_ADC_IsEnabled>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fe fef1 	bl	8006c5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007e7a:	f7fe fd3b 	bl	80068f4 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d914      	bls.n	8007eb2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d00d      	beq.n	8007eb2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9a:	f043 0210 	orr.w	r2, r3, #16
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea6:	f043 0201 	orr.w	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e007      	b.n	8007ec2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d1cf      	bne.n	8007e60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	8000003f 	.word	0x8000003f
 8007ed0:	50040300 	.word	0x50040300
 8007ed4:	20000000 	.word	0x20000000
 8007ed8:	053e2d63 	.word	0x053e2d63

08007edc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fe fef2 	bl	8006cd2 <LL_ADC_IsDisableOngoing>
 8007eee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fed9 	bl	8006cac <LL_ADC_IsEnabled>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d047      	beq.n	8007f90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d144      	bne.n	8007f90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 030d 	and.w	r3, r3, #13
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10c      	bne.n	8007f2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe feb3 	bl	8006c84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2203      	movs	r2, #3
 8007f24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007f26:	f7fe fce5 	bl	80068f4 <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007f2c:	e029      	b.n	8007f82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f32:	f043 0210 	orr.w	r2, r3, #16
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3e:	f043 0201 	orr.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e023      	b.n	8007f92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007f4a:	f7fe fcd3 	bl	80068f4 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d914      	bls.n	8007f82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6a:	f043 0210 	orr.w	r2, r3, #16
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f76:	f043 0201 	orr.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e007      	b.n	8007f92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1dc      	bne.n	8007f4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d14b      	bne.n	800804c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0308 	and.w	r3, r3, #8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d021      	beq.n	8008012 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fd36 	bl	8006a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d032      	beq.n	8008044 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d12b      	bne.n	8008044 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11f      	bne.n	8008044 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008008:	f043 0201 	orr.w	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008010:	e018      	b.n	8008044 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d111      	bne.n	8008044 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803c:	f043 0201 	orr.w	r2, r3, #1
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7fd fe85 	bl	8005d54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800804a:	e00e      	b.n	800806a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7ff fab3 	bl	80075c4 <HAL_ADC_ErrorCallback>
}
 800805e:	e004      	b.n	800806a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fa8b 	bl	800759c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008086:	bf00      	nop
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ac:	f043 0204 	orr.w	r2, r3, #4
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fa85 	bl	80075c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <LL_ADC_IsEnabled>:
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <LL_ADC_IsEnabled+0x18>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <LL_ADC_IsEnabled+0x1a>
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <LL_ADC_StartCalibration>:
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80080fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008104:	4313      	orrs	r3, r2
 8008106:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	609a      	str	r2, [r3, #8]
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <LL_ADC_IsCalibrationOnGoing>:
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800812a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800812e:	d101      	bne.n	8008134 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <LL_ADC_REG_IsConversionOngoing>:
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b04      	cmp	r3, #4
 8008154:	d101      	bne.n	800815a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_ADCEx_Calibration_Start+0x1c>
 8008180:	2302      	movs	r3, #2
 8008182:	e04d      	b.n	8008220 <HAL_ADCEx_Calibration_Start+0xb8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff fea5 	bl	8007edc <ADC_Disable>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d136      	bne.n	800820a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80081a4:	f023 0302 	bic.w	r3, r3, #2
 80081a8:	f043 0202 	orr.w	r2, r3, #2
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff ff96 	bl	80080e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80081bc:	e014      	b.n	80081e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3301      	adds	r3, #1
 80081c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80081ca:	d30d      	bcc.n	80081e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d0:	f023 0312 	bic.w	r3, r3, #18
 80081d4:	f043 0210 	orr.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e01b      	b.n	8008220 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff ff94 	bl	800811a <LL_ADC_IsCalibrationOnGoing>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e2      	bne.n	80081be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	f043 0201 	orr.w	r2, r3, #1
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	655a      	str	r2, [r3, #84]	@ 0x54
 8008208:	e005      	b.n	8008216 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820e:	f043 0210 	orr.w	r2, r3, #16
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b09f      	sub	sp, #124	@ 0x7c
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e089      	b.n	80083be <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80082b2:	2300      	movs	r3, #0
 80082b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80082b6:	2300      	movs	r3, #0
 80082b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a42      	ldr	r2, [pc, #264]	@ (80083c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d102      	bne.n	80082ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80082c4:	4b41      	ldr	r3, [pc, #260]	@ (80083cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80082c6:	60bb      	str	r3, [r7, #8]
 80082c8:	e001      	b.n	80082ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d8:	f043 0220 	orr.w	r2, r3, #32
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e068      	b.n	80083be <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff ff27 	bl	8008142 <LL_ADC_REG_IsConversionOngoing>
 80082f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff ff21 	bl	8008142 <LL_ADC_REG_IsConversionOngoing>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d14a      	bne.n	800839c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008308:	2b00      	cmp	r3, #0
 800830a:	d147      	bne.n	800839c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800830c:	4b30      	ldr	r3, [pc, #192]	@ (80083d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800830e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d027      	beq.n	8008368 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	6859      	ldr	r1, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800832a:	035b      	lsls	r3, r3, #13
 800832c:	430b      	orrs	r3, r1
 800832e:	431a      	orrs	r2, r3
 8008330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008332:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008334:	4824      	ldr	r0, [pc, #144]	@ (80083c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8008336:	f7ff fec4 	bl	80080c2 <LL_ADC_IsEnabled>
 800833a:	4604      	mov	r4, r0
 800833c:	4823      	ldr	r0, [pc, #140]	@ (80083cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800833e:	f7ff fec0 	bl	80080c2 <LL_ADC_IsEnabled>
 8008342:	4603      	mov	r3, r0
 8008344:	4323      	orrs	r3, r4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d132      	bne.n	80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800834a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008352:	f023 030f 	bic.w	r3, r3, #15
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	6811      	ldr	r1, [r2, #0]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	6892      	ldr	r2, [r2, #8]
 800835e:	430a      	orrs	r2, r1
 8008360:	431a      	orrs	r2, r3
 8008362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008364:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008366:	e023      	b.n	80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008372:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008374:	4814      	ldr	r0, [pc, #80]	@ (80083c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8008376:	f7ff fea4 	bl	80080c2 <LL_ADC_IsEnabled>
 800837a:	4604      	mov	r4, r0
 800837c:	4813      	ldr	r0, [pc, #76]	@ (80083cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800837e:	f7ff fea0 	bl	80080c2 <LL_ADC_IsEnabled>
 8008382:	4603      	mov	r3, r0
 8008384:	4323      	orrs	r3, r4
 8008386:	2b00      	cmp	r3, #0
 8008388:	d112      	bne.n	80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800838a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008398:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800839a:	e009      	b.n	80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a0:	f043 0220 	orr.w	r2, r3, #32
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80083ae:	e000      	b.n	80083b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80083b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80083ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80083be:	4618      	mov	r0, r3
 80083c0:	377c      	adds	r7, #124	@ 0x7c
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	50040000 	.word	0x50040000
 80083cc:	50040100 	.word	0x50040100
 80083d0:	50040300 	.word	0x50040300

080083d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008418 <__NVIC_SetPriorityGrouping+0x44>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80083f0:	4013      	ands	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008406:	4a04      	ldr	r2, [pc, #16]	@ (8008418 <__NVIC_SetPriorityGrouping+0x44>)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	60d3      	str	r3, [r2, #12]
}
 800840c:	bf00      	nop
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	e000ed00 	.word	0xe000ed00

0800841c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__NVIC_GetPriorityGrouping+0x18>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	f003 0307 	and.w	r3, r3, #7
}
 800842a:	4618      	mov	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	e000ed00 	.word	0xe000ed00

08008438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	db0b      	blt.n	8008462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	f003 021f 	and.w	r2, r3, #31
 8008450:	4907      	ldr	r1, [pc, #28]	@ (8008470 <__NVIC_EnableIRQ+0x38>)
 8008452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	2001      	movs	r0, #1
 800845a:	fa00 f202 	lsl.w	r2, r0, r2
 800845e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000e100 	.word	0xe000e100

08008474 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800847e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	db12      	blt.n	80084ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	f003 021f 	and.w	r2, r3, #31
 800848c:	490a      	ldr	r1, [pc, #40]	@ (80084b8 <__NVIC_DisableIRQ+0x44>)
 800848e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	2001      	movs	r0, #1
 8008496:	fa00 f202 	lsl.w	r2, r0, r2
 800849a:	3320      	adds	r3, #32
 800849c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80084a0:	f3bf 8f4f 	dsb	sy
}
 80084a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084a6:	f3bf 8f6f 	isb	sy
}
 80084aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	e000e100 	.word	0xe000e100

080084bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	db0a      	blt.n	80084e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	490c      	ldr	r1, [pc, #48]	@ (8008508 <__NVIC_SetPriority+0x4c>)
 80084d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084da:	0112      	lsls	r2, r2, #4
 80084dc:	b2d2      	uxtb	r2, r2
 80084de:	440b      	add	r3, r1
 80084e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084e4:	e00a      	b.n	80084fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	4908      	ldr	r1, [pc, #32]	@ (800850c <__NVIC_SetPriority+0x50>)
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	3b04      	subs	r3, #4
 80084f4:	0112      	lsls	r2, r2, #4
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	440b      	add	r3, r1
 80084fa:	761a      	strb	r2, [r3, #24]
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	e000e100 	.word	0xe000e100
 800850c:	e000ed00 	.word	0xe000ed00

08008510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008510:	b480      	push	{r7}
 8008512:	b089      	sub	sp, #36	@ 0x24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f1c3 0307 	rsb	r3, r3, #7
 800852a:	2b04      	cmp	r3, #4
 800852c:	bf28      	it	cs
 800852e:	2304      	movcs	r3, #4
 8008530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	3304      	adds	r3, #4
 8008536:	2b06      	cmp	r3, #6
 8008538:	d902      	bls.n	8008540 <NVIC_EncodePriority+0x30>
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	3b03      	subs	r3, #3
 800853e:	e000      	b.n	8008542 <NVIC_EncodePriority+0x32>
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	fa02 f303 	lsl.w	r3, r2, r3
 800854e:	43da      	mvns	r2, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	401a      	ands	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008558:	f04f 31ff 	mov.w	r1, #4294967295
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	fa01 f303 	lsl.w	r3, r1, r3
 8008562:	43d9      	mvns	r1, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008568:	4313      	orrs	r3, r2
         );
}
 800856a:	4618      	mov	r0, r3
 800856c:	3724      	adds	r7, #36	@ 0x24
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3b01      	subs	r3, #1
 8008584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008588:	d301      	bcc.n	800858e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800858a:	2301      	movs	r3, #1
 800858c:	e00f      	b.n	80085ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800858e:	4a0a      	ldr	r2, [pc, #40]	@ (80085b8 <SysTick_Config+0x40>)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3b01      	subs	r3, #1
 8008594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008596:	210f      	movs	r1, #15
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	f7ff ff8e 	bl	80084bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085a0:	4b05      	ldr	r3, [pc, #20]	@ (80085b8 <SysTick_Config+0x40>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085a6:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <SysTick_Config+0x40>)
 80085a8:	2207      	movs	r2, #7
 80085aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	e000e010 	.word	0xe000e010

080085bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff ff05 	bl	80083d4 <__NVIC_SetPriorityGrouping>
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	4603      	mov	r3, r0
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80085e4:	f7ff ff1a 	bl	800841c <__NVIC_GetPriorityGrouping>
 80085e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	6978      	ldr	r0, [r7, #20]
 80085f0:	f7ff ff8e 	bl	8008510 <NVIC_EncodePriority>
 80085f4:	4602      	mov	r2, r0
 80085f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ff5d 	bl	80084bc <__NVIC_SetPriority>
}
 8008602:	bf00      	nop
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	4603      	mov	r3, r0
 8008612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff ff0d 	bl	8008438 <__NVIC_EnableIRQ>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	4603      	mov	r3, r0
 800862e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff ff1d 	bl	8008474 <__NVIC_DisableIRQ>
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff ff94 	bl	8008578 <SysTick_Config>
 8008650:	4603      	mov	r3, r0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e098      	b.n	80087a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	4b4d      	ldr	r3, [pc, #308]	@ (80087ac <HAL_DMA_Init+0x150>)
 8008676:	429a      	cmp	r2, r3
 8008678:	d80f      	bhi.n	800869a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	4b4b      	ldr	r3, [pc, #300]	@ (80087b0 <HAL_DMA_Init+0x154>)
 8008682:	4413      	add	r3, r2
 8008684:	4a4b      	ldr	r2, [pc, #300]	@ (80087b4 <HAL_DMA_Init+0x158>)
 8008686:	fba2 2303 	umull	r2, r3, r2, r3
 800868a:	091b      	lsrs	r3, r3, #4
 800868c:	009a      	lsls	r2, r3, #2
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a48      	ldr	r2, [pc, #288]	@ (80087b8 <HAL_DMA_Init+0x15c>)
 8008696:	641a      	str	r2, [r3, #64]	@ 0x40
 8008698:	e00e      	b.n	80086b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	4b46      	ldr	r3, [pc, #280]	@ (80087bc <HAL_DMA_Init+0x160>)
 80086a2:	4413      	add	r3, r2
 80086a4:	4a43      	ldr	r2, [pc, #268]	@ (80087b4 <HAL_DMA_Init+0x158>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	091b      	lsrs	r3, r3, #4
 80086ac:	009a      	lsls	r2, r3, #2
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a42      	ldr	r2, [pc, #264]	@ (80087c0 <HAL_DMA_Init+0x164>)
 80086b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80086ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80086dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008712:	d039      	beq.n	8008788 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008718:	4a27      	ldr	r2, [pc, #156]	@ (80087b8 <HAL_DMA_Init+0x15c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d11a      	bne.n	8008754 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800871e:	4b29      	ldr	r3, [pc, #164]	@ (80087c4 <HAL_DMA_Init+0x168>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008726:	f003 031c 	and.w	r3, r3, #28
 800872a:	210f      	movs	r1, #15
 800872c:	fa01 f303 	lsl.w	r3, r1, r3
 8008730:	43db      	mvns	r3, r3
 8008732:	4924      	ldr	r1, [pc, #144]	@ (80087c4 <HAL_DMA_Init+0x168>)
 8008734:	4013      	ands	r3, r2
 8008736:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008738:	4b22      	ldr	r3, [pc, #136]	@ (80087c4 <HAL_DMA_Init+0x168>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6859      	ldr	r1, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008744:	f003 031c 	and.w	r3, r3, #28
 8008748:	fa01 f303 	lsl.w	r3, r1, r3
 800874c:	491d      	ldr	r1, [pc, #116]	@ (80087c4 <HAL_DMA_Init+0x168>)
 800874e:	4313      	orrs	r3, r2
 8008750:	600b      	str	r3, [r1, #0]
 8008752:	e019      	b.n	8008788 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008754:	4b1c      	ldr	r3, [pc, #112]	@ (80087c8 <HAL_DMA_Init+0x16c>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875c:	f003 031c 	and.w	r3, r3, #28
 8008760:	210f      	movs	r1, #15
 8008762:	fa01 f303 	lsl.w	r3, r1, r3
 8008766:	43db      	mvns	r3, r3
 8008768:	4917      	ldr	r1, [pc, #92]	@ (80087c8 <HAL_DMA_Init+0x16c>)
 800876a:	4013      	ands	r3, r2
 800876c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800876e:	4b16      	ldr	r3, [pc, #88]	@ (80087c8 <HAL_DMA_Init+0x16c>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6859      	ldr	r1, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877a:	f003 031c 	and.w	r3, r3, #28
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	4911      	ldr	r1, [pc, #68]	@ (80087c8 <HAL_DMA_Init+0x16c>)
 8008784:	4313      	orrs	r3, r2
 8008786:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	40020407 	.word	0x40020407
 80087b0:	bffdfff8 	.word	0xbffdfff8
 80087b4:	cccccccd 	.word	0xcccccccd
 80087b8:	40020000 	.word	0x40020000
 80087bc:	bffdfbf8 	.word	0xbffdfbf8
 80087c0:	40020400 	.word	0x40020400
 80087c4:	400200a8 	.word	0x400200a8
 80087c8:	400204a8 	.word	0x400204a8

080087cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_DMA_Start_IT+0x20>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e04b      	b.n	8008884 <HAL_DMA_Start_IT+0xb8>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d13a      	bne.n	8008876 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0201 	bic.w	r2, r2, #1
 800881c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f96b 	bl	8008b00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882e:	2b00      	cmp	r3, #0
 8008830:	d008      	beq.n	8008844 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 020e 	orr.w	r2, r2, #14
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e00f      	b.n	8008864 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0204 	bic.w	r2, r2, #4
 8008852:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 020a 	orr.w	r2, r2, #10
 8008862:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e005      	b.n	8008882 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800887e:	2302      	movs	r3, #2
 8008880:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d008      	beq.n	80088b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e022      	b.n	80088fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 020e 	bic.w	r2, r2, #14
 80088c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0201 	bic.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088da:	f003 021c 	and.w	r2, r3, #28
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e2:	2101      	movs	r1, #1
 80088e4:	fa01 f202 	lsl.w	r2, r1, r2
 80088e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d005      	beq.n	800892c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2204      	movs	r2, #4
 8008924:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]
 800892a:	e029      	b.n	8008980 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 020e 	bic.w	r2, r2, #14
 800893a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008950:	f003 021c 	and.w	r2, r3, #28
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008958:	2101      	movs	r1, #1
 800895a:	fa01 f202 	lsl.w	r2, r1, r2
 800895e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3
    }
  }
  return status;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a6:	f003 031c 	and.w	r3, r3, #28
 80089aa:	2204      	movs	r2, #4
 80089ac:	409a      	lsls	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4013      	ands	r3, r2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d026      	beq.n	8008a04 <HAL_DMA_IRQHandler+0x7a>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f003 0304 	and.w	r3, r3, #4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d021      	beq.n	8008a04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d107      	bne.n	80089de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0204 	bic.w	r2, r2, #4
 80089dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e2:	f003 021c 	and.w	r2, r3, #28
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	2104      	movs	r1, #4
 80089ec:	fa01 f202 	lsl.w	r2, r1, r2
 80089f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d071      	beq.n	8008ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008a02:	e06c      	b.n	8008ade <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a08:	f003 031c 	and.w	r3, r3, #28
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	409a      	lsls	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02e      	beq.n	8008a76 <HAL_DMA_IRQHandler+0xec>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d029      	beq.n	8008a76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0320 	and.w	r3, r3, #32
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 020a 	bic.w	r2, r2, #10
 8008a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4c:	f003 021c 	and.w	r2, r3, #28
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a54:	2102      	movs	r1, #2
 8008a56:	fa01 f202 	lsl.w	r2, r1, r2
 8008a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d038      	beq.n	8008ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a74:	e033      	b.n	8008ade <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7a:	f003 031c 	and.w	r3, r3, #28
 8008a7e:	2208      	movs	r2, #8
 8008a80:	409a      	lsls	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4013      	ands	r3, r2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d02a      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0x156>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d025      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 020e 	bic.w	r2, r2, #14
 8008aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa8:	f003 021c 	and.w	r2, r3, #28
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
}
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b12:	f003 021c 	and.w	r2, r3, #28
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d108      	bne.n	8008b44 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b42:	e007      	b.n	8008b54 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]
}
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b6e:	e14e      	b.n	8008e0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	2101      	movs	r1, #1
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8140 	beq.w	8008e08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d005      	beq.n	8008ba0 <HAL_GPIO_Init+0x40>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d130      	bne.n	8008c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	2203      	movs	r2, #3
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43db      	mvns	r3, r3
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4013      	ands	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	091b      	lsrs	r3, r3, #4
 8008bec:	f003 0201 	and.w	r2, r3, #1
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d017      	beq.n	8008c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	2203      	movs	r2, #3
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4013      	ands	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d123      	bne.n	8008c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	08da      	lsrs	r2, r3, #3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3208      	adds	r2, #8
 8008c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	220f      	movs	r2, #15
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	43db      	mvns	r3, r3
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691a      	ldr	r2, [r3, #16]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	08da      	lsrs	r2, r3, #3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3208      	adds	r2, #8
 8008c8c:	6939      	ldr	r1, [r7, #16]
 8008c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	43db      	mvns	r3, r3
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 0203 	and.w	r2, r3, #3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 809a 	beq.w	8008e08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cd4:	4b55      	ldr	r3, [pc, #340]	@ (8008e2c <HAL_GPIO_Init+0x2cc>)
 8008cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cd8:	4a54      	ldr	r2, [pc, #336]	@ (8008e2c <HAL_GPIO_Init+0x2cc>)
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	6613      	str	r3, [r2, #96]	@ 0x60
 8008ce0:	4b52      	ldr	r3, [pc, #328]	@ (8008e2c <HAL_GPIO_Init+0x2cc>)
 8008ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	60bb      	str	r3, [r7, #8]
 8008cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008cec:	4a50      	ldr	r2, [pc, #320]	@ (8008e30 <HAL_GPIO_Init+0x2d0>)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	089b      	lsrs	r3, r3, #2
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	220f      	movs	r2, #15
 8008d04:	fa02 f303 	lsl.w	r3, r2, r3
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d16:	d013      	beq.n	8008d40 <HAL_GPIO_Init+0x1e0>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a46      	ldr	r2, [pc, #280]	@ (8008e34 <HAL_GPIO_Init+0x2d4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00d      	beq.n	8008d3c <HAL_GPIO_Init+0x1dc>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a45      	ldr	r2, [pc, #276]	@ (8008e38 <HAL_GPIO_Init+0x2d8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <HAL_GPIO_Init+0x1d8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a44      	ldr	r2, [pc, #272]	@ (8008e3c <HAL_GPIO_Init+0x2dc>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d101      	bne.n	8008d34 <HAL_GPIO_Init+0x1d4>
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <HAL_GPIO_Init+0x1e2>
 8008d34:	2307      	movs	r3, #7
 8008d36:	e004      	b.n	8008d42 <HAL_GPIO_Init+0x1e2>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e002      	b.n	8008d42 <HAL_GPIO_Init+0x1e2>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <HAL_GPIO_Init+0x1e2>
 8008d40:	2300      	movs	r3, #0
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	f002 0203 	and.w	r2, r2, #3
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	4093      	lsls	r3, r2
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d52:	4937      	ldr	r1, [pc, #220]	@ (8008e30 <HAL_GPIO_Init+0x2d0>)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	3302      	adds	r3, #2
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d60:	4b37      	ldr	r3, [pc, #220]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d84:	4a2e      	ldr	r2, [pc, #184]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	43db      	mvns	r3, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4013      	ands	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dae:	4a24      	ldr	r2, [pc, #144]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008db4:	4b22      	ldr	r3, [pc, #136]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008dd8:	4a19      	ldr	r2, [pc, #100]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008dde:	4b18      	ldr	r3, [pc, #96]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	43db      	mvns	r3, r3
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4013      	ands	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e02:	4a0f      	ldr	r2, [pc, #60]	@ (8008e40 <HAL_GPIO_Init+0x2e0>)
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f47f aea9 	bne.w	8008b70 <HAL_GPIO_Init+0x10>
  }
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	40010000 	.word	0x40010000
 8008e34:	48000400 	.word	0x48000400
 8008e38:	48000800 	.word	0x48000800
 8008e3c:	48000c00 	.word	0x48000c00
 8008e40:	40010400 	.word	0x40010400

08008e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	807b      	strh	r3, [r7, #2]
 8008e50:	4613      	mov	r3, r2
 8008e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e54:	787b      	ldrb	r3, [r7, #1]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e5a:	887a      	ldrh	r2, [r7, #2]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e60:	e002      	b.n	8008e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e62:	887a      	ldrh	r2, [r7, #2]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008e7e:	4b08      	ldr	r3, [pc, #32]	@ (8008ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e80:	695a      	ldr	r2, [r3, #20]
 8008e82:	88fb      	ldrh	r3, [r7, #6]
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d006      	beq.n	8008e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e8a:	4a05      	ldr	r2, [pc, #20]	@ (8008ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e8c:	88fb      	ldrh	r3, [r7, #6]
 8008e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e90:	88fb      	ldrh	r3, [r7, #6]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fc ff0a 	bl	8005cac <HAL_GPIO_EXTI_Callback>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40010400 	.word	0x40010400

08008ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e08d      	b.n	8008fd2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7fd fafa 	bl	80064c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2224      	movs	r2, #36	@ 0x24
 8008ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0201 	bic.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008ef4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d107      	bne.n	8008f1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f1a:	609a      	str	r2, [r3, #8]
 8008f1c:	e006      	b.n	8008f2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d108      	bne.n	8008f46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f42:	605a      	str	r2, [r3, #4]
 8008f44:	e007      	b.n	8008f56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691a      	ldr	r2, [r3, #16]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69d9      	ldr	r1, [r3, #28]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	817b      	strh	r3, [r7, #10]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	813b      	strh	r3, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	f040 80f9 	bne.w	80091f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <HAL_I2C_Mem_Write+0x34>
 800900a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d105      	bne.n	800901c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009016:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e0ed      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_I2C_Mem_Write+0x4e>
 8009026:	2302      	movs	r3, #2
 8009028:	e0e6      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009032:	f7fd fc5f 	bl	80068f4 <HAL_GetTick>
 8009036:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	2319      	movs	r3, #25
 800903e:	2201      	movs	r2, #1
 8009040:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fbaf 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e0d1      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2221      	movs	r2, #33	@ 0x21
 8009058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2240      	movs	r2, #64	@ 0x40
 8009060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a3a      	ldr	r2, [r7, #32]
 800906e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009074:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800907c:	88f8      	ldrh	r0, [r7, #6]
 800907e:	893a      	ldrh	r2, [r7, #8]
 8009080:	8979      	ldrh	r1, [r7, #10]
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	4603      	mov	r3, r0
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 fabf 	bl	8009610 <I2C_RequestMemoryWrite>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e0a9      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2bff      	cmp	r3, #255	@ 0xff
 80090ac:	d90e      	bls.n	80090cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	22ff      	movs	r2, #255	@ 0xff
 80090b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	8979      	ldrh	r1, [r7, #10]
 80090bc:	2300      	movs	r3, #0
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 fd33 	bl	8009b30 <I2C_TransferConfig>
 80090ca:	e00f      	b.n	80090ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	8979      	ldrh	r1, [r7, #10]
 80090de:	2300      	movs	r3, #0
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fd22 	bl	8009b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fbb2 	bl	800985a <I2C_WaitOnTXISFlagUntilTimeout>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e07b      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800911a:	b29b      	uxth	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d034      	beq.n	80091a4 <HAL_I2C_Mem_Write+0x1c8>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800913e:	2b00      	cmp	r3, #0
 8009140:	d130      	bne.n	80091a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009148:	2200      	movs	r2, #0
 800914a:	2180      	movs	r1, #128	@ 0x80
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fb2b 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e04d      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009160:	b29b      	uxth	r3, r3
 8009162:	2bff      	cmp	r3, #255	@ 0xff
 8009164:	d90e      	bls.n	8009184 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	22ff      	movs	r2, #255	@ 0xff
 800916a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009170:	b2da      	uxtb	r2, r3
 8009172:	8979      	ldrh	r1, [r7, #10]
 8009174:	2300      	movs	r3, #0
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 fcd7 	bl	8009b30 <I2C_TransferConfig>
 8009182:	e00f      	b.n	80091a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009192:	b2da      	uxtb	r2, r3
 8009194:	8979      	ldrh	r1, [r7, #10]
 8009196:	2300      	movs	r3, #0
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fcc6 	bl	8009b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d19e      	bne.n	80090ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 fb98 	bl	80098e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e01a      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2220      	movs	r2, #32
 80091c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6859      	ldr	r1, [r3, #4]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009200 <HAL_I2C_Mem_Write+0x224>)
 80091d6:	400b      	ands	r3, r1
 80091d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2220      	movs	r2, #32
 80091de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e000      	b.n	80091f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80091f6:	2302      	movs	r3, #2
  }
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	fe00e800 	.word	0xfe00e800

08009204 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	461a      	mov	r2, r3
 8009212:	4603      	mov	r3, r0
 8009214:	817b      	strh	r3, [r7, #10]
 8009216:	460b      	mov	r3, r1
 8009218:	813b      	strh	r3, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b20      	cmp	r3, #32
 8009228:	f040 80fd 	bne.w	8009426 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <HAL_I2C_Mem_Read+0x34>
 8009232:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	d105      	bne.n	8009244 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800923e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0f1      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_I2C_Mem_Read+0x4e>
 800924e:	2302      	movs	r3, #2
 8009250:	e0ea      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800925a:	f7fd fb4b 	bl	80068f4 <HAL_GetTick>
 800925e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	2319      	movs	r3, #25
 8009266:	2201      	movs	r2, #1
 8009268:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fa9b 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0d5      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2222      	movs	r2, #34	@ 0x22
 8009280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2240      	movs	r2, #64	@ 0x40
 8009288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a3a      	ldr	r2, [r7, #32]
 8009296:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800929c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092a4:	88f8      	ldrh	r0, [r7, #6]
 80092a6:	893a      	ldrh	r2, [r7, #8]
 80092a8:	8979      	ldrh	r1, [r7, #10]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4603      	mov	r3, r0
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f9ff 	bl	80096b8 <I2C_RequestMemoryRead>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e0ad      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2bff      	cmp	r3, #255	@ 0xff
 80092d4:	d90e      	bls.n	80092f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	8979      	ldrh	r1, [r7, #10]
 80092e4:	4b52      	ldr	r3, [pc, #328]	@ (8009430 <HAL_I2C_Mem_Read+0x22c>)
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fc1f 	bl	8009b30 <I2C_TransferConfig>
 80092f2:	e00f      	b.n	8009314 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009302:	b2da      	uxtb	r2, r3
 8009304:	8979      	ldrh	r1, [r7, #10]
 8009306:	4b4a      	ldr	r3, [pc, #296]	@ (8009430 <HAL_I2C_Mem_Read+0x22c>)
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fc0e 	bl	8009b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931a:	2200      	movs	r2, #0
 800931c:	2104      	movs	r1, #4
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 fa42 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e07c      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009356:	b29b      	uxth	r3, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009364:	b29b      	uxth	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d034      	beq.n	80093d4 <HAL_I2C_Mem_Read+0x1d0>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800936e:	2b00      	cmp	r3, #0
 8009370:	d130      	bne.n	80093d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	2200      	movs	r2, #0
 800937a:	2180      	movs	r1, #128	@ 0x80
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 fa13 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e04d      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009390:	b29b      	uxth	r3, r3
 8009392:	2bff      	cmp	r3, #255	@ 0xff
 8009394:	d90e      	bls.n	80093b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	8979      	ldrh	r1, [r7, #10]
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fbbf 	bl	8009b30 <I2C_TransferConfig>
 80093b2:	e00f      	b.n	80093d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	8979      	ldrh	r1, [r7, #10]
 80093c6:	2300      	movs	r3, #0
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fbae 	bl	8009b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d19a      	bne.n	8009314 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fa80 	bl	80098e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e01a      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2220      	movs	r2, #32
 80093f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6859      	ldr	r1, [r3, #4]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <HAL_I2C_Mem_Read+0x230>)
 8009406:	400b      	ands	r3, r1
 8009408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2220      	movs	r2, #32
 800940e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	e000      	b.n	8009428 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009426:	2302      	movs	r3, #2
  }
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	80002400 	.word	0x80002400
 8009434:	fe00e800 	.word	0xfe00e800

08009438 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	@ 0x28
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	460b      	mov	r3, r1
 8009446:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009448:	2300      	movs	r3, #0
 800944a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b20      	cmp	r3, #32
 8009456:	f040 80d6 	bne.w	8009606 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009468:	d101      	bne.n	800946e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800946a:	2302      	movs	r3, #2
 800946c:	e0cc      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_I2C_IsDeviceReady+0x44>
 8009478:	2302      	movs	r3, #2
 800947a:	e0c5      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2224      	movs	r2, #36	@ 0x24
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d107      	bne.n	80094aa <HAL_I2C_IsDeviceReady+0x72>
 800949a:	897b      	ldrh	r3, [r7, #10]
 800949c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80094a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80094a8:	e006      	b.n	80094b8 <HAL_I2C_IsDeviceReady+0x80>
 80094aa:	897b      	ldrh	r3, [r7, #10]
 80094ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80094b4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	6812      	ldr	r2, [r2, #0]
 80094bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80094be:	f7fd fa19 	bl	80068f4 <HAL_GetTick>
 80094c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	bf0c      	ite	eq
 80094d2:	2301      	moveq	r3, #1
 80094d4:	2300      	movne	r3, #0
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b10      	cmp	r3, #16
 80094e6:	bf0c      	ite	eq
 80094e8:	2301      	moveq	r3, #1
 80094ea:	2300      	movne	r3, #0
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80094f0:	e034      	b.n	800955c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f8:	d01a      	beq.n	8009530 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80094fa:	f7fd f9fb 	bl	80068f4 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d302      	bcc.n	8009510 <HAL_I2C_IsDeviceReady+0xd8>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10f      	bne.n	8009530 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2220      	movs	r2, #32
 8009514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951c:	f043 0220 	orr.w	r2, r3, #32
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e06b      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	bf0c      	ite	eq
 800953e:	2301      	moveq	r3, #1
 8009540:	2300      	movne	r3, #0
 8009542:	b2db      	uxtb	r3, r3
 8009544:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b10      	cmp	r3, #16
 8009552:	bf0c      	ite	eq
 8009554:	2301      	moveq	r3, #1
 8009556:	2300      	movne	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800955c:	7ffb      	ldrb	r3, [r7, #31]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <HAL_I2C_IsDeviceReady+0x130>
 8009562:	7fbb      	ldrb	r3, [r7, #30]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0c4      	beq.n	80094f2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b10      	cmp	r3, #16
 8009574:	d01a      	beq.n	80095ac <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2200      	movs	r2, #0
 800957e:	2120      	movs	r1, #32
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f911 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e03b      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2220      	movs	r2, #32
 8009596:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2220      	movs	r2, #32
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e02d      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2200      	movs	r2, #0
 80095b4:	2120      	movs	r1, #32
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f8f6 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e020      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2210      	movs	r2, #16
 80095cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2220      	movs	r2, #32
 80095d4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3301      	adds	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	f63f af56 	bhi.w	8009492 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f2:	f043 0220 	orr.w	r2, r3, #32
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8009606:	2302      	movs	r3, #2
  }
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af02      	add	r7, sp, #8
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	4608      	mov	r0, r1
 800961a:	4611      	mov	r1, r2
 800961c:	461a      	mov	r2, r3
 800961e:	4603      	mov	r3, r0
 8009620:	817b      	strh	r3, [r7, #10]
 8009622:	460b      	mov	r3, r1
 8009624:	813b      	strh	r3, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800962a:	88fb      	ldrh	r3, [r7, #6]
 800962c:	b2da      	uxtb	r2, r3
 800962e:	8979      	ldrh	r1, [r7, #10]
 8009630:	4b20      	ldr	r3, [pc, #128]	@ (80096b4 <I2C_RequestMemoryWrite+0xa4>)
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fa79 	bl	8009b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f909 	bl	800985a <I2C_WaitOnTXISFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e02c      	b.n	80096ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d105      	bne.n	8009664 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009658:	893b      	ldrh	r3, [r7, #8]
 800965a:	b2da      	uxtb	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	629a      	str	r2, [r3, #40]	@ 0x28
 8009662:	e015      	b.n	8009690 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009664:	893b      	ldrh	r3, [r7, #8]
 8009666:	0a1b      	lsrs	r3, r3, #8
 8009668:	b29b      	uxth	r3, r3
 800966a:	b2da      	uxtb	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	69b9      	ldr	r1, [r7, #24]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f8ef 	bl	800985a <I2C_WaitOnTXISFlagUntilTimeout>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e012      	b.n	80096ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009686:	893b      	ldrh	r3, [r7, #8]
 8009688:	b2da      	uxtb	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	2200      	movs	r2, #0
 8009698:	2180      	movs	r1, #128	@ 0x80
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f884 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	80002000 	.word	0x80002000

080096b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	4608      	mov	r0, r1
 80096c2:	4611      	mov	r1, r2
 80096c4:	461a      	mov	r2, r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	817b      	strh	r3, [r7, #10]
 80096ca:	460b      	mov	r3, r1
 80096cc:	813b      	strh	r3, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80096d2:	88fb      	ldrh	r3, [r7, #6]
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	8979      	ldrh	r1, [r7, #10]
 80096d8:	4b20      	ldr	r3, [pc, #128]	@ (800975c <I2C_RequestMemoryRead+0xa4>)
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	2300      	movs	r3, #0
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fa26 	bl	8009b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	69b9      	ldr	r1, [r7, #24]
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f8b6 	bl	800985a <I2C_WaitOnTXISFlagUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e02c      	b.n	8009752 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096f8:	88fb      	ldrh	r3, [r7, #6]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d105      	bne.n	800970a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096fe:	893b      	ldrh	r3, [r7, #8]
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	629a      	str	r2, [r3, #40]	@ 0x28
 8009708:	e015      	b.n	8009736 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800970a:	893b      	ldrh	r3, [r7, #8]
 800970c:	0a1b      	lsrs	r3, r3, #8
 800970e:	b29b      	uxth	r3, r3
 8009710:	b2da      	uxtb	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 f89c 	bl	800985a <I2C_WaitOnTXISFlagUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e012      	b.n	8009752 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800972c:	893b      	ldrh	r3, [r7, #8]
 800972e:	b2da      	uxtb	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	2200      	movs	r2, #0
 800973e:	2140      	movs	r1, #64	@ 0x40
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f831 	bl	80097a8 <I2C_WaitOnFlagUntilTimeout>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	80002000 	.word	0x80002000

08009760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b02      	cmp	r3, #2
 8009774:	d103      	bne.n	800977e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b01      	cmp	r3, #1
 800978a:	d007      	beq.n	800979c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699a      	ldr	r2, [r3, #24]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0201 	orr.w	r2, r2, #1
 800979a:	619a      	str	r2, [r3, #24]
  }
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097b8:	e03b      	b.n	8009832 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f8d6 	bl	8009970 <I2C_IsErrorOccurred>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e041      	b.n	8009852 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d02d      	beq.n	8009832 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097d6:	f7fd f88d 	bl	80068f4 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d122      	bne.n	8009832 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4013      	ands	r3, r2
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	bf0c      	ite	eq
 80097fc:	2301      	moveq	r3, #1
 80097fe:	2300      	movne	r3, #0
 8009800:	b2db      	uxtb	r3, r3
 8009802:	461a      	mov	r2, r3
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	429a      	cmp	r2, r3
 8009808:	d113      	bne.n	8009832 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800980e:	f043 0220 	orr.w	r2, r3, #32
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2220      	movs	r2, #32
 800981a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e00f      	b.n	8009852 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4013      	ands	r3, r2
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	bf0c      	ite	eq
 8009842:	2301      	moveq	r3, #1
 8009844:	2300      	movne	r3, #0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	461a      	mov	r2, r3
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	429a      	cmp	r2, r3
 800984e:	d0b4      	beq.n	80097ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009866:	e033      	b.n	80098d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f87f 	bl	8009970 <I2C_IsErrorOccurred>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e031      	b.n	80098e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009882:	d025      	beq.n	80098d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009884:	f7fd f836 	bl	80068f4 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	429a      	cmp	r2, r3
 8009892:	d302      	bcc.n	800989a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d11a      	bne.n	80098d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d013      	beq.n	80098d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ac:	f043 0220 	orr.w	r2, r3, #32
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e007      	b.n	80098e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d1c4      	bne.n	8009868 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098f4:	e02f      	b.n	8009956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	68b9      	ldr	r1, [r7, #8]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f838 	bl	8009970 <I2C_IsErrorOccurred>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e02d      	b.n	8009966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990a:	f7fc fff3 	bl	80068f4 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	429a      	cmp	r2, r3
 8009918:	d302      	bcc.n	8009920 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d11a      	bne.n	8009956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b20      	cmp	r3, #32
 800992c:	d013      	beq.n	8009956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009932:	f043 0220 	orr.w	r2, r3, #32
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e007      	b.n	8009966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b20      	cmp	r3, #32
 8009962:	d1c8      	bne.n	80098f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	@ 0x28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	f003 0310 	and.w	r3, r3, #16
 8009998:	2b00      	cmp	r3, #0
 800999a:	d068      	beq.n	8009a6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2210      	movs	r2, #16
 80099a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099a4:	e049      	b.n	8009a3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d045      	beq.n	8009a3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80099ae:	f7fc ffa1 	bl	80068f4 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d302      	bcc.n	80099c4 <I2C_IsErrorOccurred+0x54>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d13a      	bne.n	8009a3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099e6:	d121      	bne.n	8009a2c <I2C_IsErrorOccurred+0xbc>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ee:	d01d      	beq.n	8009a2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099f0:	7cfb      	ldrb	r3, [r7, #19]
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d01a      	beq.n	8009a2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a06:	f7fc ff75 	bl	80068f4 <HAL_GetTick>
 8009a0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a0c:	e00e      	b.n	8009a2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a0e:	f7fc ff71 	bl	80068f4 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b19      	cmp	r3, #25
 8009a1a:	d907      	bls.n	8009a2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	f043 0320 	orr.w	r3, r3, #32
 8009a22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009a2a:	e006      	b.n	8009a3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d1e9      	bne.n	8009a0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d003      	beq.n	8009a50 <I2C_IsErrorOccurred+0xe0>
 8009a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0aa      	beq.n	80099a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	f043 0304 	orr.w	r3, r3, #4
 8009a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	f043 0308 	orr.w	r3, r3, #8
 8009aa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	f043 0302 	orr.w	r3, r3, #2
 8009aca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01c      	beq.n	8009b1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff fe3b 	bl	8009760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6859      	ldr	r1, [r3, #4]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	4b0d      	ldr	r3, [pc, #52]	@ (8009b2c <I2C_IsErrorOccurred+0x1bc>)
 8009af6:	400b      	ands	r3, r1
 8009af8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	431a      	orrs	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3728      	adds	r7, #40	@ 0x28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	fe00e800 	.word	0xfe00e800

08009b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	607b      	str	r3, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	817b      	strh	r3, [r7, #10]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b42:	897b      	ldrh	r3, [r7, #10]
 8009b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b48:	7a7b      	ldrb	r3, [r7, #9]
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	0d5b      	lsrs	r3, r3, #21
 8009b6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009b6e:	4b08      	ldr	r3, [pc, #32]	@ (8009b90 <I2C_TransferConfig+0x60>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	43db      	mvns	r3, r3
 8009b74:	ea02 0103 	and.w	r1, r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	03ff63ff 	.word	0x03ff63ff

08009b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d138      	bne.n	8009c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e032      	b.n	8009c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	@ 0x24
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6819      	ldr	r1, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0201 	orr.w	r2, r2, #1
 8009c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	e000      	b.n	8009c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c1c:	2302      	movs	r3, #2
  }
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b085      	sub	sp, #20
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d139      	bne.n	8009cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e033      	b.n	8009cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2224      	movs	r2, #36	@ 0x24
 8009c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0201 	bic.w	r2, r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e000      	b.n	8009cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009cb4:	2302      	movs	r3, #2
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009cc8:	4b04      	ldr	r3, [pc, #16]	@ (8009cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	40007000 	.word	0x40007000

08009ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cee:	d130      	bne.n	8009d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009cf0:	4b23      	ldr	r3, [pc, #140]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfc:	d038      	beq.n	8009d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cfe:	4b20      	ldr	r3, [pc, #128]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009d06:	4a1e      	ldr	r2, [pc, #120]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8009d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2232      	movs	r2, #50	@ 0x32
 8009d14:	fb02 f303 	mul.w	r3, r2, r3
 8009d18:	4a1b      	ldr	r2, [pc, #108]	@ (8009d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	0c9b      	lsrs	r3, r3, #18
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d24:	e002      	b.n	8009d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d2c:	4b14      	ldr	r3, [pc, #80]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d38:	d102      	bne.n	8009d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1f2      	bne.n	8009d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d40:	4b0f      	ldr	r3, [pc, #60]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d4c:	d110      	bne.n	8009d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e00f      	b.n	8009d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009d52:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d5e:	d007      	beq.n	8009d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009d60:	4b07      	ldr	r3, [pc, #28]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009d68:	4a05      	ldr	r2, [pc, #20]	@ (8009d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40007000 	.word	0x40007000
 8009d84:	20000000 	.word	0x20000000
 8009d88:	431bde83 	.word	0x431bde83

08009d8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	@ 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f000 bc4f 	b.w	800a63e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009da0:	4b97      	ldr	r3, [pc, #604]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 030c 	and.w	r3, r3, #12
 8009da8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009daa:	4b95      	ldr	r3, [pc, #596]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0310 	and.w	r3, r3, #16
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 80e6 	beq.w	8009f8e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d007      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x4c>
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	2b0c      	cmp	r3, #12
 8009dcc:	f040 808d 	bne.w	8009eea <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	f040 8089 	bne.w	8009eea <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009dd8:	4b89      	ldr	r3, [pc, #548]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d006      	beq.n	8009df2 <HAL_RCC_OscConfig+0x66>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f000 bc26 	b.w	800a63e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009df6:	4b82      	ldr	r3, [pc, #520]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0308 	and.w	r3, r3, #8
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <HAL_RCC_OscConfig+0x80>
 8009e02:	4b7f      	ldr	r3, [pc, #508]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e0a:	e005      	b.n	8009e18 <HAL_RCC_OscConfig+0x8c>
 8009e0c:	4b7c      	ldr	r3, [pc, #496]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e12:	091b      	lsrs	r3, r3, #4
 8009e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d224      	bcs.n	8009e66 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fdd9 	bl	800a9d8 <RCC_SetFlashLatencyFromMSIRange>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f000 bc06 	b.w	800a63e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e32:	4b73      	ldr	r3, [pc, #460]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a72      	ldr	r2, [pc, #456]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e38:	f043 0308 	orr.w	r3, r3, #8
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4b70      	ldr	r3, [pc, #448]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4a:	496d      	ldr	r1, [pc, #436]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e50:	4b6b      	ldr	r3, [pc, #428]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	4968      	ldr	r1, [pc, #416]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	604b      	str	r3, [r1, #4]
 8009e64:	e025      	b.n	8009eb2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e66:	4b66      	ldr	r3, [pc, #408]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a65      	ldr	r2, [pc, #404]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e6c:	f043 0308 	orr.w	r3, r3, #8
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	4b63      	ldr	r3, [pc, #396]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7e:	4960      	ldr	r1, [pc, #384]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e84:	4b5e      	ldr	r3, [pc, #376]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	021b      	lsls	r3, r3, #8
 8009e92:	495b      	ldr	r1, [pc, #364]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fd98 	bl	800a9d8 <RCC_SetFlashLatencyFromMSIRange>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e3c5      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009eb2:	f000 fccd 	bl	800a850 <HAL_RCC_GetSysClockFreq>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	4b51      	ldr	r3, [pc, #324]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	091b      	lsrs	r3, r3, #4
 8009ebe:	f003 030f 	and.w	r3, r3, #15
 8009ec2:	4950      	ldr	r1, [pc, #320]	@ (800a004 <HAL_RCC_OscConfig+0x278>)
 8009ec4:	5ccb      	ldrb	r3, [r1, r3]
 8009ec6:	f003 031f 	and.w	r3, r3, #31
 8009eca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ece:	4a4e      	ldr	r2, [pc, #312]	@ (800a008 <HAL_RCC_OscConfig+0x27c>)
 8009ed0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800a00c <HAL_RCC_OscConfig+0x280>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fc fcbc 	bl	8006854 <HAL_InitTick>
 8009edc:	4603      	mov	r3, r0
 8009ede:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009ee0:	7dfb      	ldrb	r3, [r7, #23]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d052      	beq.n	8009f8c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	e3a9      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d032      	beq.n	8009f58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009ef2:	4b43      	ldr	r3, [pc, #268]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a42      	ldr	r2, [pc, #264]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009ef8:	f043 0301 	orr.w	r3, r3, #1
 8009efc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009efe:	f7fc fcf9 	bl	80068f4 <HAL_GetTick>
 8009f02:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009f04:	e008      	b.n	8009f18 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f06:	f7fc fcf5 	bl	80068f4 <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d901      	bls.n	8009f18 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e392      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009f18:	4b39      	ldr	r3, [pc, #228]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0f0      	beq.n	8009f06 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f24:	4b36      	ldr	r3, [pc, #216]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a35      	ldr	r2, [pc, #212]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f2a:	f043 0308 	orr.w	r3, r3, #8
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	4b33      	ldr	r3, [pc, #204]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3c:	4930      	ldr	r1, [pc, #192]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009f42:	4b2f      	ldr	r3, [pc, #188]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	021b      	lsls	r3, r3, #8
 8009f50:	492b      	ldr	r1, [pc, #172]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	604b      	str	r3, [r1, #4]
 8009f56:	e01a      	b.n	8009f8e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009f58:	4b29      	ldr	r3, [pc, #164]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a28      	ldr	r2, [pc, #160]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f5e:	f023 0301 	bic.w	r3, r3, #1
 8009f62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009f64:	f7fc fcc6 	bl	80068f4 <HAL_GetTick>
 8009f68:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009f6a:	e008      	b.n	8009f7e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f6c:	f7fc fcc2 	bl	80068f4 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d901      	bls.n	8009f7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e35f      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009f7e:	4b20      	ldr	r3, [pc, #128]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1f0      	bne.n	8009f6c <HAL_RCC_OscConfig+0x1e0>
 8009f8a:	e000      	b.n	8009f8e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009f8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d073      	beq.n	800a082 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d005      	beq.n	8009fac <HAL_RCC_OscConfig+0x220>
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2b0c      	cmp	r3, #12
 8009fa4:	d10e      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	2b03      	cmp	r3, #3
 8009faa:	d10b      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fac:	4b14      	ldr	r3, [pc, #80]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d063      	beq.n	800a080 <HAL_RCC_OscConfig+0x2f4>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d15f      	bne.n	800a080 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e33c      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fcc:	d106      	bne.n	8009fdc <HAL_RCC_OscConfig+0x250>
 8009fce:	4b0c      	ldr	r3, [pc, #48]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a0b      	ldr	r2, [pc, #44]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	e025      	b.n	800a028 <HAL_RCC_OscConfig+0x29c>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fe4:	d114      	bne.n	800a010 <HAL_RCC_OscConfig+0x284>
 8009fe6:	4b06      	ldr	r3, [pc, #24]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a05      	ldr	r2, [pc, #20]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	4b03      	ldr	r3, [pc, #12]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a02      	ldr	r2, [pc, #8]	@ (800a000 <HAL_RCC_OscConfig+0x274>)
 8009ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	e013      	b.n	800a028 <HAL_RCC_OscConfig+0x29c>
 800a000:	40021000 	.word	0x40021000
 800a004:	0800cd60 	.word	0x0800cd60
 800a008:	20000000 	.word	0x20000000
 800a00c:	20000004 	.word	0x20000004
 800a010:	4b8f      	ldr	r3, [pc, #572]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a8e      	ldr	r2, [pc, #568]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	4b8c      	ldr	r3, [pc, #560]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a8b      	ldr	r2, [pc, #556]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d013      	beq.n	800a058 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a030:	f7fc fc60 	bl	80068f4 <HAL_GetTick>
 800a034:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a036:	e008      	b.n	800a04a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a038:	f7fc fc5c 	bl	80068f4 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b64      	cmp	r3, #100	@ 0x64
 800a044:	d901      	bls.n	800a04a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e2f9      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a04a:	4b81      	ldr	r3, [pc, #516]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0f0      	beq.n	800a038 <HAL_RCC_OscConfig+0x2ac>
 800a056:	e014      	b.n	800a082 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a058:	f7fc fc4c 	bl	80068f4 <HAL_GetTick>
 800a05c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a05e:	e008      	b.n	800a072 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a060:	f7fc fc48 	bl	80068f4 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b64      	cmp	r3, #100	@ 0x64
 800a06c:	d901      	bls.n	800a072 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e2e5      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a072:	4b77      	ldr	r3, [pc, #476]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1f0      	bne.n	800a060 <HAL_RCC_OscConfig+0x2d4>
 800a07e:	e000      	b.n	800a082 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d060      	beq.n	800a150 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	2b04      	cmp	r3, #4
 800a092:	d005      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x314>
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	2b0c      	cmp	r3, #12
 800a098:	d119      	bne.n	800a0ce <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d116      	bne.n	800a0ce <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0a0:	4b6b      	ldr	r3, [pc, #428]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d005      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x32c>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e2c2      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b8:	4b65      	ldr	r3, [pc, #404]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	061b      	lsls	r3, r3, #24
 800a0c6:	4962      	ldr	r1, [pc, #392]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0cc:	e040      	b.n	800a150 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d023      	beq.n	800a11e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a5d      	ldr	r2, [pc, #372]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a0dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e2:	f7fc fc07 	bl	80068f4 <HAL_GetTick>
 800a0e6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0e8:	e008      	b.n	800a0fc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0ea:	f7fc fc03 	bl	80068f4 <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d901      	bls.n	800a0fc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e2a0      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0fc:	4b54      	ldr	r3, [pc, #336]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0f0      	beq.n	800a0ea <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a108:	4b51      	ldr	r3, [pc, #324]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	061b      	lsls	r3, r3, #24
 800a116:	494e      	ldr	r1, [pc, #312]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	604b      	str	r3, [r1, #4]
 800a11c:	e018      	b.n	800a150 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a11e:	4b4c      	ldr	r3, [pc, #304]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a4b      	ldr	r2, [pc, #300]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12a:	f7fc fbe3 	bl	80068f4 <HAL_GetTick>
 800a12e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a130:	e008      	b.n	800a144 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a132:	f7fc fbdf 	bl	80068f4 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d901      	bls.n	800a144 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e27c      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a144:	4b42      	ldr	r3, [pc, #264]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1f0      	bne.n	800a132 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0308 	and.w	r3, r3, #8
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 8082 	beq.w	800a262 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d05f      	beq.n	800a226 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800a166:	4b3a      	ldr	r3, [pc, #232]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a16c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	699a      	ldr	r2, [r3, #24]
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f003 0310 	and.w	r3, r3, #16
 800a178:	429a      	cmp	r2, r3
 800a17a:	d037      	beq.n	800a1ec <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d006      	beq.n	800a194 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e254      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01b      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800a19e:	4b2c      	ldr	r3, [pc, #176]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1a4:	4a2a      	ldr	r2, [pc, #168]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1a6:	f023 0301 	bic.w	r3, r3, #1
 800a1aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1ae:	f7fc fba1 	bl	80068f4 <HAL_GetTick>
 800a1b2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1b6:	f7fc fb9d 	bl	80068f4 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b11      	cmp	r3, #17
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e23a      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a1c8:	4b21      	ldr	r3, [pc, #132]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1ce:	f003 0302 	and.w	r3, r3, #2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1ef      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800a1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1dc:	f023 0210 	bic.w	r2, r3, #16
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	491a      	ldr	r1, [pc, #104]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1ec:	4b18      	ldr	r3, [pc, #96]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1f2:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a1f4:	f043 0301 	orr.w	r3, r3, #1
 800a1f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1fc:	f7fc fb7a 	bl	80068f4 <HAL_GetTick>
 800a200:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a202:	e008      	b.n	800a216 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a204:	f7fc fb76 	bl	80068f4 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b11      	cmp	r3, #17
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e213      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a216:	4b0e      	ldr	r3, [pc, #56]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0ef      	beq.n	800a204 <HAL_RCC_OscConfig+0x478>
 800a224:	e01d      	b.n	800a262 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a226:	4b0a      	ldr	r3, [pc, #40]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a22c:	4a08      	ldr	r2, [pc, #32]	@ (800a250 <HAL_RCC_OscConfig+0x4c4>)
 800a22e:	f023 0301 	bic.w	r3, r3, #1
 800a232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a236:	f7fc fb5d 	bl	80068f4 <HAL_GetTick>
 800a23a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a23c:	e00a      	b.n	800a254 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a23e:	f7fc fb59 	bl	80068f4 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b11      	cmp	r3, #17
 800a24a:	d903      	bls.n	800a254 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e1f6      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
 800a250:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a254:	4ba9      	ldr	r3, [pc, #676]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1ed      	bne.n	800a23e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0304 	and.w	r3, r3, #4
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 80bd 	beq.w	800a3ea <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a270:	2300      	movs	r3, #0
 800a272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a276:	4ba1      	ldr	r3, [pc, #644]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a27a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10e      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a282:	4b9e      	ldr	r3, [pc, #632]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a286:	4a9d      	ldr	r2, [pc, #628]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a28c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a28e:	4b9b      	ldr	r3, [pc, #620]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2a0:	4b97      	ldr	r3, [pc, #604]	@ (800a500 <HAL_RCC_OscConfig+0x774>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d118      	bne.n	800a2de <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2ac:	4b94      	ldr	r3, [pc, #592]	@ (800a500 <HAL_RCC_OscConfig+0x774>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a93      	ldr	r2, [pc, #588]	@ (800a500 <HAL_RCC_OscConfig+0x774>)
 800a2b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2b8:	f7fc fb1c 	bl	80068f4 <HAL_GetTick>
 800a2bc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2be:	e008      	b.n	800a2d2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2c0:	f7fc fb18 	bl	80068f4 <HAL_GetTick>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e1b5      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2d2:	4b8b      	ldr	r3, [pc, #556]	@ (800a500 <HAL_RCC_OscConfig+0x774>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0f0      	beq.n	800a2c0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d02c      	beq.n	800a344 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800a2ea:	4b84      	ldr	r3, [pc, #528]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2fc:	497f      	ldr	r1, [pc, #508]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d010      	beq.n	800a332 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a310:	4b7a      	ldr	r3, [pc, #488]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a316:	4a79      	ldr	r2, [pc, #484]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a318:	f043 0304 	orr.w	r3, r3, #4
 800a31c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a320:	4b76      	ldr	r3, [pc, #472]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a326:	4a75      	ldr	r2, [pc, #468]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a328:	f043 0301 	orr.w	r3, r3, #1
 800a32c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a330:	e018      	b.n	800a364 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a332:	4b72      	ldr	r3, [pc, #456]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a338:	4a70      	ldr	r2, [pc, #448]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a33a:	f043 0301 	orr.w	r3, r3, #1
 800a33e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a342:	e00f      	b.n	800a364 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a344:	4b6d      	ldr	r3, [pc, #436]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a34a:	4a6c      	ldr	r2, [pc, #432]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a354:	4b69      	ldr	r3, [pc, #420]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a35a:	4a68      	ldr	r2, [pc, #416]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a35c:	f023 0304 	bic.w	r3, r3, #4
 800a360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d016      	beq.n	800a39a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a36c:	f7fc fac2 	bl	80068f4 <HAL_GetTick>
 800a370:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a372:	e00a      	b.n	800a38a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a374:	f7fc fabe 	bl	80068f4 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a382:	4293      	cmp	r3, r2
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e159      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a38a:	4b5c      	ldr	r3, [pc, #368]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0ed      	beq.n	800a374 <HAL_RCC_OscConfig+0x5e8>
 800a398:	e01d      	b.n	800a3d6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a39a:	f7fc faab 	bl	80068f4 <HAL_GetTick>
 800a39e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a3a0:	e00a      	b.n	800a3b8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3a2:	f7fc faa7 	bl	80068f4 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e142      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a3b8:	4b50      	ldr	r3, [pc, #320]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1ed      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800a3c6:	4b4d      	ldr	r3, [pc, #308]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3cc:	4a4b      	ldr	r2, [pc, #300]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a3ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a3d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d105      	bne.n	800a3ea <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3de:	4b47      	ldr	r3, [pc, #284]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e2:	4a46      	ldr	r2, [pc, #280]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a3e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d03c      	beq.n	800a470 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d01c      	beq.n	800a438 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a404:	4a3d      	ldr	r2, [pc, #244]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a406:	f043 0301 	orr.w	r3, r3, #1
 800a40a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a40e:	f7fc fa71 	bl	80068f4 <HAL_GetTick>
 800a412:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a414:	e008      	b.n	800a428 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a416:	f7fc fa6d 	bl	80068f4 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	2b02      	cmp	r3, #2
 800a422:	d901      	bls.n	800a428 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e10a      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a428:	4b34      	ldr	r3, [pc, #208]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a42a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0ef      	beq.n	800a416 <HAL_RCC_OscConfig+0x68a>
 800a436:	e01b      	b.n	800a470 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a438:	4b30      	ldr	r3, [pc, #192]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a43a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a43e:	4a2f      	ldr	r2, [pc, #188]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a440:	f023 0301 	bic.w	r3, r3, #1
 800a444:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a448:	f7fc fa54 	bl	80068f4 <HAL_GetTick>
 800a44c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a44e:	e008      	b.n	800a462 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a450:	f7fc fa50 	bl	80068f4 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e0ed      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a462:	4b26      	ldr	r3, [pc, #152]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1ef      	bne.n	800a450 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 80e1 	beq.w	800a63c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	2b02      	cmp	r3, #2
 800a480:	f040 80b5 	bne.w	800a5ee <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a484:	4b1d      	ldr	r3, [pc, #116]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	f003 0203 	and.w	r2, r3, #3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a494:	429a      	cmp	r2, r3
 800a496:	d124      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d11b      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d113      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d109      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d05f      	beq.n	800a5a2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	2b0c      	cmp	r3, #12
 800a4e6:	d05a      	beq.n	800a59e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a4e8:	4b04      	ldr	r3, [pc, #16]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a03      	ldr	r2, [pc, #12]	@ (800a4fc <HAL_RCC_OscConfig+0x770>)
 800a4ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a4f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a4f4:	f7fc f9fe 	bl	80068f4 <HAL_GetTick>
 800a4f8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4fa:	e00c      	b.n	800a516 <HAL_RCC_OscConfig+0x78a>
 800a4fc:	40021000 	.word	0x40021000
 800a500:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a504:	f7fc f9f6 	bl	80068f4 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e093      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a516:	4b4c      	ldr	r3, [pc, #304]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f0      	bne.n	800a504 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a522:	4b49      	ldr	r3, [pc, #292]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	4b49      	ldr	r3, [pc, #292]	@ (800a64c <HAL_RCC_OscConfig+0x8c0>)
 800a528:	4013      	ands	r3, r2
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a532:	3a01      	subs	r2, #1
 800a534:	0112      	lsls	r2, r2, #4
 800a536:	4311      	orrs	r1, r2
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a53c:	0212      	lsls	r2, r2, #8
 800a53e:	4311      	orrs	r1, r2
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a544:	0852      	lsrs	r2, r2, #1
 800a546:	3a01      	subs	r2, #1
 800a548:	0552      	lsls	r2, r2, #21
 800a54a:	4311      	orrs	r1, r2
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a550:	0852      	lsrs	r2, r2, #1
 800a552:	3a01      	subs	r2, #1
 800a554:	0652      	lsls	r2, r2, #25
 800a556:	430a      	orrs	r2, r1
 800a558:	493b      	ldr	r1, [pc, #236]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a55e:	4b3a      	ldr	r3, [pc, #232]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a39      	ldr	r2, [pc, #228]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a568:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a56a:	4b37      	ldr	r3, [pc, #220]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	4a36      	ldr	r2, [pc, #216]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a574:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a576:	f7fc f9bd 	bl	80068f4 <HAL_GetTick>
 800a57a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a57c:	e008      	b.n	800a590 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a57e:	f7fc f9b9 	bl	80068f4 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d901      	bls.n	800a590 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e056      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a590:	4b2d      	ldr	r3, [pc, #180]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0f0      	beq.n	800a57e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a59c:	e04e      	b.n	800a63c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e04d      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a5a2:	4b29      	ldr	r3, [pc, #164]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d146      	bne.n	800a63c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a5ae:	4b26      	ldr	r3, [pc, #152]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a25      	ldr	r2, [pc, #148]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5b8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a5ba:	4b23      	ldr	r3, [pc, #140]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	4a22      	ldr	r2, [pc, #136]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5c4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a5c6:	f7fc f995 	bl	80068f4 <HAL_GetTick>
 800a5ca:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a5cc:	e008      	b.n	800a5e0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5ce:	f7fc f991 	bl	80068f4 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d901      	bls.n	800a5e0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e02e      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a5e0:	4b19      	ldr	r3, [pc, #100]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0f0      	beq.n	800a5ce <HAL_RCC_OscConfig+0x842>
 800a5ec:	e026      	b.n	800a63c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	2b0c      	cmp	r3, #12
 800a5f2:	d021      	beq.n	800a638 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5f4:	4b14      	ldr	r3, [pc, #80]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a13      	ldr	r2, [pc, #76]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a5fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a600:	f7fc f978 	bl	80068f4 <HAL_GetTick>
 800a604:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a606:	e008      	b.n	800a61a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a608:	f7fc f974 	bl	80068f4 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b02      	cmp	r3, #2
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e011      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a61a:	4b0b      	ldr	r3, [pc, #44]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800a626:	4b08      	ldr	r3, [pc, #32]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	4a07      	ldr	r2, [pc, #28]	@ (800a648 <HAL_RCC_OscConfig+0x8bc>)
 800a62c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	60d3      	str	r3, [r2, #12]
 800a636:	e001      	b.n	800a63c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e000      	b.n	800a63e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3728      	adds	r7, #40	@ 0x28
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	40021000 	.word	0x40021000
 800a64c:	f99f808c 	.word	0xf99f808c

0800a650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e0e7      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a664:	4b75      	ldr	r3, [pc, #468]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d910      	bls.n	800a694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a672:	4b72      	ldr	r3, [pc, #456]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f023 0207 	bic.w	r2, r3, #7
 800a67a:	4970      	ldr	r1, [pc, #448]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	4313      	orrs	r3, r2
 800a680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a682:	4b6e      	ldr	r3, [pc, #440]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d001      	beq.n	800a694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e0cf      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d010      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	4b66      	ldr	r3, [pc, #408]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d908      	bls.n	800a6c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6b0:	4b63      	ldr	r3, [pc, #396]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	4960      	ldr	r1, [pc, #384]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d04c      	beq.n	800a768 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d107      	bne.n	800a6e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6d6:	4b5a      	ldr	r3, [pc, #360]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d121      	bne.n	800a726 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e0a6      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d107      	bne.n	800a6fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6ee:	4b54      	ldr	r3, [pc, #336]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d115      	bne.n	800a726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e09a      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d107      	bne.n	800a716 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a706:	4b4e      	ldr	r3, [pc, #312]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d109      	bne.n	800a726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e08e      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a716:	4b4a      	ldr	r3, [pc, #296]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e086      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a726:	4b46      	ldr	r3, [pc, #280]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f023 0203 	bic.w	r2, r3, #3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	4943      	ldr	r1, [pc, #268]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a734:	4313      	orrs	r3, r2
 800a736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a738:	f7fc f8dc 	bl	80068f4 <HAL_GetTick>
 800a73c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a73e:	e00a      	b.n	800a756 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a740:	f7fc f8d8 	bl	80068f4 <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a74e:	4293      	cmp	r3, r2
 800a750:	d901      	bls.n	800a756 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e06e      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a756:	4b3a      	ldr	r3, [pc, #232]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f003 020c 	and.w	r2, r3, #12
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	429a      	cmp	r2, r3
 800a766:	d1eb      	bne.n	800a740 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d010      	beq.n	800a796 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689a      	ldr	r2, [r3, #8]
 800a778:	4b31      	ldr	r3, [pc, #196]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a780:	429a      	cmp	r2, r3
 800a782:	d208      	bcs.n	800a796 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a784:	4b2e      	ldr	r3, [pc, #184]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	492b      	ldr	r1, [pc, #172]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a792:	4313      	orrs	r3, r2
 800a794:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a796:	4b29      	ldr	r3, [pc, #164]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0307 	and.w	r3, r3, #7
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d210      	bcs.n	800a7c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7a4:	4b25      	ldr	r3, [pc, #148]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f023 0207 	bic.w	r2, r3, #7
 800a7ac:	4923      	ldr	r1, [pc, #140]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7b4:	4b21      	ldr	r3, [pc, #132]	@ (800a83c <HAL_RCC_ClockConfig+0x1ec>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0307 	and.w	r3, r3, #7
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d001      	beq.n	800a7c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e036      	b.n	800a834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0304 	and.w	r3, r3, #4
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d008      	beq.n	800a7e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	4918      	ldr	r1, [pc, #96]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d009      	beq.n	800a804 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7f0:	4b13      	ldr	r3, [pc, #76]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	4910      	ldr	r1, [pc, #64]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a800:	4313      	orrs	r3, r2
 800a802:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a804:	f000 f824 	bl	800a850 <HAL_RCC_GetSysClockFreq>
 800a808:	4602      	mov	r2, r0
 800a80a:	4b0d      	ldr	r3, [pc, #52]	@ (800a840 <HAL_RCC_ClockConfig+0x1f0>)
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	091b      	lsrs	r3, r3, #4
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	490b      	ldr	r1, [pc, #44]	@ (800a844 <HAL_RCC_ClockConfig+0x1f4>)
 800a816:	5ccb      	ldrb	r3, [r1, r3]
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	fa22 f303 	lsr.w	r3, r2, r3
 800a820:	4a09      	ldr	r2, [pc, #36]	@ (800a848 <HAL_RCC_ClockConfig+0x1f8>)
 800a822:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a824:	4b09      	ldr	r3, [pc, #36]	@ (800a84c <HAL_RCC_ClockConfig+0x1fc>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fc f813 	bl	8006854 <HAL_InitTick>
 800a82e:	4603      	mov	r3, r0
 800a830:	72fb      	strb	r3, [r7, #11]

  return status;
 800a832:	7afb      	ldrb	r3, [r7, #11]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	40022000 	.word	0x40022000
 800a840:	40021000 	.word	0x40021000
 800a844:	0800cd60 	.word	0x0800cd60
 800a848:	20000000 	.word	0x20000000
 800a84c:	20000004 	.word	0x20000004

0800a850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a850:	b480      	push	{r7}
 800a852:	b089      	sub	sp, #36	@ 0x24
 800a854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	2300      	movs	r3, #0
 800a85c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a85e:	4b3e      	ldr	r3, [pc, #248]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 030c 	and.w	r3, r3, #12
 800a866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a868:	4b3b      	ldr	r3, [pc, #236]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_RCC_GetSysClockFreq+0x34>
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	2b0c      	cmp	r3, #12
 800a87c:	d121      	bne.n	800a8c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d11e      	bne.n	800a8c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a884:	4b34      	ldr	r3, [pc, #208]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d107      	bne.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a890:	4b31      	ldr	r3, [pc, #196]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	61fb      	str	r3, [r7, #28]
 800a89e:	e005      	b.n	800a8ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a8a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	091b      	lsrs	r3, r3, #4
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a8ac:	4a2b      	ldr	r2, [pc, #172]	@ (800a95c <HAL_RCC_GetSysClockFreq+0x10c>)
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10d      	bne.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a8c0:	e00a      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a8c8:	4b25      	ldr	r3, [pc, #148]	@ (800a960 <HAL_RCC_GetSysClockFreq+0x110>)
 800a8ca:	61bb      	str	r3, [r7, #24]
 800a8cc:	e004      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d101      	bne.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a8d4:	4b23      	ldr	r3, [pc, #140]	@ (800a964 <HAL_RCC_GetSysClockFreq+0x114>)
 800a8d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b0c      	cmp	r3, #12
 800a8dc:	d134      	bne.n	800a948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a8de:	4b1e      	ldr	r3, [pc, #120]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	f003 0303 	and.w	r3, r3, #3
 800a8e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d003      	beq.n	800a8f6 <HAL_RCC_GetSysClockFreq+0xa6>
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d003      	beq.n	800a8fc <HAL_RCC_GetSysClockFreq+0xac>
 800a8f4:	e005      	b.n	800a902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a8f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a960 <HAL_RCC_GetSysClockFreq+0x110>)
 800a8f8:	617b      	str	r3, [r7, #20]
      break;
 800a8fa:	e005      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a8fc:	4b19      	ldr	r3, [pc, #100]	@ (800a964 <HAL_RCC_GetSysClockFreq+0x114>)
 800a8fe:	617b      	str	r3, [r7, #20]
      break;
 800a900:	e002      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	617b      	str	r3, [r7, #20]
      break;
 800a906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a908:	4b13      	ldr	r3, [pc, #76]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	091b      	lsrs	r3, r3, #4
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	3301      	adds	r3, #1
 800a914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a916:	4b10      	ldr	r3, [pc, #64]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	0a1b      	lsrs	r3, r3, #8
 800a91c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	fb03 f202 	mul.w	r2, r3, r2
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a92e:	4b0a      	ldr	r3, [pc, #40]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x108>)
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	0e5b      	lsrs	r3, r3, #25
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	3301      	adds	r3, #1
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	fbb2 f3f3 	udiv	r3, r2, r3
 800a946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a948:	69bb      	ldr	r3, [r7, #24]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3724      	adds	r7, #36	@ 0x24
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40021000 	.word	0x40021000
 800a95c:	0800cd78 	.word	0x0800cd78
 800a960:	00f42400 	.word	0x00f42400
 800a964:	007a1200 	.word	0x007a1200

0800a968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a96c:	4b03      	ldr	r3, [pc, #12]	@ (800a97c <HAL_RCC_GetHCLKFreq+0x14>)
 800a96e:	681b      	ldr	r3, [r3, #0]
}
 800a970:	4618      	mov	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	20000000 	.word	0x20000000

0800a980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a984:	f7ff fff0 	bl	800a968 <HAL_RCC_GetHCLKFreq>
 800a988:	4602      	mov	r2, r0
 800a98a:	4b06      	ldr	r3, [pc, #24]	@ (800a9a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	0a1b      	lsrs	r3, r3, #8
 800a990:	f003 0307 	and.w	r3, r3, #7
 800a994:	4904      	ldr	r1, [pc, #16]	@ (800a9a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a996:	5ccb      	ldrb	r3, [r1, r3]
 800a998:	f003 031f 	and.w	r3, r3, #31
 800a99c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	40021000 	.word	0x40021000
 800a9a8:	0800cd70 	.word	0x0800cd70

0800a9ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a9b0:	f7ff ffda 	bl	800a968 <HAL_RCC_GetHCLKFreq>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	4b06      	ldr	r3, [pc, #24]	@ (800a9d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	0adb      	lsrs	r3, r3, #11
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	4904      	ldr	r1, [pc, #16]	@ (800a9d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a9c2:	5ccb      	ldrb	r3, [r1, r3]
 800a9c4:	f003 031f 	and.w	r3, r3, #31
 800a9c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	40021000 	.word	0x40021000
 800a9d4:	0800cd70 	.word	0x0800cd70

0800a9d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a9e4:	4b2a      	ldr	r3, [pc, #168]	@ (800aa90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a9f0:	f7ff f968 	bl	8009cc4 <HAL_PWREx_GetVoltageRange>
 800a9f4:	6178      	str	r0, [r7, #20]
 800a9f6:	e014      	b.n	800aa22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a9f8:	4b25      	ldr	r3, [pc, #148]	@ (800aa90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a9fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9fc:	4a24      	ldr	r2, [pc, #144]	@ (800aa90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a9fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa02:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa04:	4b22      	ldr	r3, [pc, #136]	@ (800aa90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aa06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa0c:	60fb      	str	r3, [r7, #12]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800aa10:	f7ff f958 	bl	8009cc4 <HAL_PWREx_GetVoltageRange>
 800aa14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800aa16:	4b1e      	ldr	r3, [pc, #120]	@ (800aa90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa1a:	4a1d      	ldr	r2, [pc, #116]	@ (800aa90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aa1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa28:	d10b      	bne.n	800aa42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b80      	cmp	r3, #128	@ 0x80
 800aa2e:	d919      	bls.n	800aa64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2ba0      	cmp	r3, #160	@ 0xa0
 800aa34:	d902      	bls.n	800aa3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800aa36:	2302      	movs	r3, #2
 800aa38:	613b      	str	r3, [r7, #16]
 800aa3a:	e013      	b.n	800aa64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	613b      	str	r3, [r7, #16]
 800aa40:	e010      	b.n	800aa64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b80      	cmp	r3, #128	@ 0x80
 800aa46:	d902      	bls.n	800aa4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800aa48:	2303      	movs	r3, #3
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	e00a      	b.n	800aa64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b80      	cmp	r3, #128	@ 0x80
 800aa52:	d102      	bne.n	800aa5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800aa54:	2302      	movs	r3, #2
 800aa56:	613b      	str	r3, [r7, #16]
 800aa58:	e004      	b.n	800aa64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b70      	cmp	r3, #112	@ 0x70
 800aa5e:	d101      	bne.n	800aa64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800aa60:	2301      	movs	r3, #1
 800aa62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800aa64:	4b0b      	ldr	r3, [pc, #44]	@ (800aa94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f023 0207 	bic.w	r2, r3, #7
 800aa6c:	4909      	ldr	r1, [pc, #36]	@ (800aa94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800aa74:	4b07      	ldr	r3, [pc, #28]	@ (800aa94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0307 	and.w	r3, r3, #7
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d001      	beq.n	800aa86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	40021000 	.word	0x40021000
 800aa94:	40022000 	.word	0x40022000

0800aa98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 809e 	beq.w	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aab6:	2300      	movs	r3, #0
 800aab8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aaba:	4b46      	ldr	r3, [pc, #280]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800aabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aabe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x32>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x34>
 800aaca:	2300      	movs	r3, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00d      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aad0:	4b40      	ldr	r3, [pc, #256]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800aad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aad4:	4a3f      	ldr	r2, [pc, #252]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800aad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aada:	6593      	str	r3, [r2, #88]	@ 0x58
 800aadc:	4b3d      	ldr	r3, [pc, #244]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800aade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aae4:	60bb      	str	r3, [r7, #8]
 800aae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aae8:	2301      	movs	r3, #1
 800aaea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aaec:	4b3a      	ldr	r3, [pc, #232]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a39      	ldr	r2, [pc, #228]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800aaf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aaf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aaf8:	f7fb fefc 	bl	80068f4 <HAL_GetTick>
 800aafc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aafe:	e009      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab00:	f7fb fef8 	bl	80068f4 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d902      	bls.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	74fb      	strb	r3, [r7, #19]
        break;
 800ab12:	e005      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ab14:	4b30      	ldr	r3, [pc, #192]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0ef      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800ab20:	7cfb      	ldrb	r3, [r7, #19]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d15a      	bne.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab26:	4b2b      	ldr	r3, [pc, #172]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01e      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d019      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ab42:	4b24      	ldr	r3, [pc, #144]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab4e:	4b21      	ldr	r3, [pc, #132]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab54:	4a1f      	ldr	r2, [pc, #124]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ab5e:	4b1d      	ldr	r3, [pc, #116]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab64:	4a1b      	ldr	r2, [pc, #108]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ab6e:	4a19      	ldr	r2, [pc, #100]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d016      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab80:	f7fb feb8 	bl	80068f4 <HAL_GetTick>
 800ab84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab86:	e00b      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab88:	f7fb feb4 	bl	80068f4 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d902      	bls.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	74fb      	strb	r3, [r7, #19]
            break;
 800ab9e:	e006      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aba0:	4b0c      	ldr	r3, [pc, #48]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800aba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0ec      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800abae:	7cfb      	ldrb	r3, [r7, #19]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10b      	bne.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abb4:	4b07      	ldr	r3, [pc, #28]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800abb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc2:	4904      	ldr	r1, [pc, #16]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800abca:	e009      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800abcc:	7cfb      	ldrb	r3, [r7, #19]
 800abce:	74bb      	strb	r3, [r7, #18]
 800abd0:	e006      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800abd2:	bf00      	nop
 800abd4:	40021000 	.word	0x40021000
 800abd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abdc:	7cfb      	ldrb	r3, [r7, #19]
 800abde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800abe0:	7c7b      	ldrb	r3, [r7, #17]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d105      	bne.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abe6:	4b6e      	ldr	r3, [pc, #440]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800abe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abea:	4a6d      	ldr	r2, [pc, #436]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800abec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abf0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800abfe:	4b68      	ldr	r3, [pc, #416]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac04:	f023 0203 	bic.w	r2, r3, #3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4964      	ldr	r1, [pc, #400]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac20:	4b5f      	ldr	r3, [pc, #380]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac26:	f023 020c 	bic.w	r2, r3, #12
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	495c      	ldr	r1, [pc, #368]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0304 	and.w	r3, r3, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00a      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ac42:	4b57      	ldr	r3, [pc, #348]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	4953      	ldr	r1, [pc, #332]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00a      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac64:	4b4e      	ldr	r3, [pc, #312]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	494b      	ldr	r1, [pc, #300]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00a      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac86:	4b46      	ldr	r3, [pc, #280]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	4942      	ldr	r1, [pc, #264]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00a      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aca8:	4b3d      	ldr	r3, [pc, #244]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb6:	493a      	ldr	r1, [pc, #232]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800acca:	4b35      	ldr	r3, [pc, #212]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	4931      	ldr	r1, [pc, #196]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00a      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800acec:	4b2c      	ldr	r3, [pc, #176]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acf2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	4929      	ldr	r1, [pc, #164]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00a      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad0e:	4b24      	ldr	r3, [pc, #144]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	4920      	ldr	r1, [pc, #128]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d015      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad30:	4b1b      	ldr	r3, [pc, #108]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3e:	4918      	ldr	r1, [pc, #96]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad4e:	d105      	bne.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad50:	4b13      	ldr	r3, [pc, #76]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	4a12      	ldr	r2, [pc, #72]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d015      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad68:	4b0d      	ldr	r3, [pc, #52]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad76:	490a      	ldr	r1, [pc, #40]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad86:	d105      	bne.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad88:	4b05      	ldr	r3, [pc, #20]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	4a04      	ldr	r2, [pc, #16]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ad8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ad94:	7cbb      	ldrb	r3, [r7, #18]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40021000 	.word	0x40021000

0800ada4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e049      	b.n	800ae4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7fb fbd2 	bl	8006574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2202      	movs	r2, #2
 800add4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
 800ade0:	4619      	mov	r1, r3
 800ade2:	4610      	mov	r0, r2
 800ade4:	f000 fa82 	bl	800b2ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d001      	beq.n	800ae6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e03b      	b.n	800aee4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68da      	ldr	r2, [r3, #12]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a19      	ldr	r2, [pc, #100]	@ (800aef0 <HAL_TIM_Base_Start_IT+0x9c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d009      	beq.n	800aea2 <HAL_TIM_Base_Start_IT+0x4e>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae96:	d004      	beq.n	800aea2 <HAL_TIM_Base_Start_IT+0x4e>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a15      	ldr	r2, [pc, #84]	@ (800aef4 <HAL_TIM_Base_Start_IT+0xa0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d115      	bne.n	800aece <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	4b13      	ldr	r3, [pc, #76]	@ (800aef8 <HAL_TIM_Base_Start_IT+0xa4>)
 800aeaa:	4013      	ands	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b06      	cmp	r3, #6
 800aeb2:	d015      	beq.n	800aee0 <HAL_TIM_Base_Start_IT+0x8c>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeba:	d011      	beq.n	800aee0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f042 0201 	orr.w	r2, r2, #1
 800aeca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aecc:	e008      	b.n	800aee0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f042 0201 	orr.w	r2, r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	e000      	b.n	800aee2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	40012c00 	.word	0x40012c00
 800aef4:	40014000 	.word	0x40014000
 800aef8:	00010007 	.word	0x00010007

0800aefc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d020      	beq.n	800af60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01b      	beq.n	800af60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0202 	mvn.w	r2, #2
 800af30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f9b2 	bl	800b2b0 <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f9a4 	bl	800b29c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f9b5 	bl	800b2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d020      	beq.n	800afac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01b      	beq.n	800afac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0204 	mvn.w	r2, #4
 800af7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2202      	movs	r2, #2
 800af82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f98c 	bl	800b2b0 <HAL_TIM_IC_CaptureCallback>
 800af98:	e005      	b.n	800afa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f97e 	bl	800b29c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f98f 	bl	800b2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f003 0308 	and.w	r3, r3, #8
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d020      	beq.n	800aff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01b      	beq.n	800aff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f06f 0208 	mvn.w	r2, #8
 800afc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2204      	movs	r2, #4
 800afce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	f003 0303 	and.w	r3, r3, #3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d003      	beq.n	800afe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f966 	bl	800b2b0 <HAL_TIM_IC_CaptureCallback>
 800afe4:	e005      	b.n	800aff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f958 	bl	800b29c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f969 	bl	800b2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f003 0310 	and.w	r3, r3, #16
 800affe:	2b00      	cmp	r3, #0
 800b000:	d020      	beq.n	800b044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f003 0310 	and.w	r3, r3, #16
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01b      	beq.n	800b044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0210 	mvn.w	r2, #16
 800b014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2208      	movs	r2, #8
 800b01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f940 	bl	800b2b0 <HAL_TIM_IC_CaptureCallback>
 800b030:	e005      	b.n	800b03e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f932 	bl	800b29c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f943 	bl	800b2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00c      	beq.n	800b068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d007      	beq.n	800b068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f06f 0201 	mvn.w	r2, #1
 800b060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7fa fecc 	bl	8005e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d104      	bne.n	800b07c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00c      	beq.n	800b096 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b082:	2b00      	cmp	r3, #0
 800b084:	d007      	beq.n	800b096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 faa5 	bl	800b5e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00c      	beq.n	800b0ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fa9d 	bl	800b5f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00c      	beq.n	800b0de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d007      	beq.n	800b0de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f8fd 	bl	800b2d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f003 0320 	and.w	r3, r3, #32
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00c      	beq.n	800b102 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f003 0320 	and.w	r3, r3, #32
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d007      	beq.n	800b102 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f06f 0220 	mvn.w	r2, #32
 800b0fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fa65 	bl	800b5cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d101      	bne.n	800b126 <HAL_TIM_ConfigClockSource+0x1c>
 800b122:	2302      	movs	r3, #2
 800b124:	e0b6      	b.n	800b294 <HAL_TIM_ConfigClockSource+0x18a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2202      	movs	r2, #2
 800b132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b144:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b148:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b150:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b162:	d03e      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0xd8>
 800b164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b168:	f200 8087 	bhi.w	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b16c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b170:	f000 8086 	beq.w	800b280 <HAL_TIM_ConfigClockSource+0x176>
 800b174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b178:	d87f      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b17a:	2b70      	cmp	r3, #112	@ 0x70
 800b17c:	d01a      	beq.n	800b1b4 <HAL_TIM_ConfigClockSource+0xaa>
 800b17e:	2b70      	cmp	r3, #112	@ 0x70
 800b180:	d87b      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b182:	2b60      	cmp	r3, #96	@ 0x60
 800b184:	d050      	beq.n	800b228 <HAL_TIM_ConfigClockSource+0x11e>
 800b186:	2b60      	cmp	r3, #96	@ 0x60
 800b188:	d877      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b18a:	2b50      	cmp	r3, #80	@ 0x50
 800b18c:	d03c      	beq.n	800b208 <HAL_TIM_ConfigClockSource+0xfe>
 800b18e:	2b50      	cmp	r3, #80	@ 0x50
 800b190:	d873      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b192:	2b40      	cmp	r3, #64	@ 0x40
 800b194:	d058      	beq.n	800b248 <HAL_TIM_ConfigClockSource+0x13e>
 800b196:	2b40      	cmp	r3, #64	@ 0x40
 800b198:	d86f      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b19a:	2b30      	cmp	r3, #48	@ 0x30
 800b19c:	d064      	beq.n	800b268 <HAL_TIM_ConfigClockSource+0x15e>
 800b19e:	2b30      	cmp	r3, #48	@ 0x30
 800b1a0:	d86b      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b1a2:	2b20      	cmp	r3, #32
 800b1a4:	d060      	beq.n	800b268 <HAL_TIM_ConfigClockSource+0x15e>
 800b1a6:	2b20      	cmp	r3, #32
 800b1a8:	d867      	bhi.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d05c      	beq.n	800b268 <HAL_TIM_ConfigClockSource+0x15e>
 800b1ae:	2b10      	cmp	r3, #16
 800b1b0:	d05a      	beq.n	800b268 <HAL_TIM_ConfigClockSource+0x15e>
 800b1b2:	e062      	b.n	800b27a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1c4:	f000 f97c 	bl	800b4c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b1d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	609a      	str	r2, [r3, #8]
      break;
 800b1e0:	e04f      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1f2:	f000 f965 	bl	800b4c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b204:	609a      	str	r2, [r3, #8]
      break;
 800b206:	e03c      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b214:	461a      	mov	r2, r3
 800b216:	f000 f8d9 	bl	800b3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2150      	movs	r1, #80	@ 0x50
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f932 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800b226:	e02c      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b234:	461a      	mov	r2, r3
 800b236:	f000 f8f8 	bl	800b42a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2160      	movs	r1, #96	@ 0x60
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f922 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800b246:	e01c      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b254:	461a      	mov	r2, r3
 800b256:	f000 f8b9 	bl	800b3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2140      	movs	r1, #64	@ 0x40
 800b260:	4618      	mov	r0, r3
 800b262:	f000 f912 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800b266:	e00c      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4619      	mov	r1, r3
 800b272:	4610      	mov	r0, r2
 800b274:	f000 f909 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800b278:	e003      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	73fb      	strb	r3, [r7, #15]
      break;
 800b27e:	e000      	b.n	800b282 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b280:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a30      	ldr	r2, [pc, #192]	@ (800b3c0 <TIM_Base_SetConfig+0xd4>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d003      	beq.n	800b30c <TIM_Base_SetConfig+0x20>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b30a:	d108      	bne.n	800b31e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a27      	ldr	r2, [pc, #156]	@ (800b3c0 <TIM_Base_SetConfig+0xd4>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d00b      	beq.n	800b33e <TIM_Base_SetConfig+0x52>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b32c:	d007      	beq.n	800b33e <TIM_Base_SetConfig+0x52>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a24      	ldr	r2, [pc, #144]	@ (800b3c4 <TIM_Base_SetConfig+0xd8>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d003      	beq.n	800b33e <TIM_Base_SetConfig+0x52>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a23      	ldr	r2, [pc, #140]	@ (800b3c8 <TIM_Base_SetConfig+0xdc>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d108      	bne.n	800b350 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a12      	ldr	r2, [pc, #72]	@ (800b3c0 <TIM_Base_SetConfig+0xd4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d007      	beq.n	800b38c <TIM_Base_SetConfig+0xa0>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a11      	ldr	r2, [pc, #68]	@ (800b3c4 <TIM_Base_SetConfig+0xd8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d003      	beq.n	800b38c <TIM_Base_SetConfig+0xa0>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a10      	ldr	r2, [pc, #64]	@ (800b3c8 <TIM_Base_SetConfig+0xdc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d103      	bne.n	800b394 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	691a      	ldr	r2, [r3, #16]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d105      	bne.n	800b3b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f023 0201 	bic.w	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	611a      	str	r2, [r3, #16]
  }
}
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	40012c00 	.word	0x40012c00
 800b3c4:	40014000 	.word	0x40014000
 800b3c8:	40014400 	.word	0x40014400

0800b3cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	f023 0201 	bic.w	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f023 030a 	bic.w	r3, r3, #10
 800b408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4313      	orrs	r3, r2
 800b410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	621a      	str	r2, [r3, #32]
}
 800b41e:	bf00      	nop
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	f023 0210 	bic.w	r2, r3, #16
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	031b      	lsls	r3, r3, #12
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b466:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	621a      	str	r2, [r3, #32]
}
 800b47e:	bf00      	nop
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	f043 0307 	orr.w	r3, r3, #7
 800b4ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	609a      	str	r2, [r3, #8]
}
 800b4b4:	bf00      	nop
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b087      	sub	sp, #28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	021a      	lsls	r2, r3, #8
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	609a      	str	r2, [r3, #8]
}
 800b4f4:	bf00      	nop
 800b4f6:	371c      	adds	r7, #28
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b514:	2302      	movs	r3, #2
 800b516:	e04f      	b.n	800b5b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a21      	ldr	r2, [pc, #132]	@ (800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d108      	bne.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b548:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	4313      	orrs	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b55a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a14      	ldr	r2, [pc, #80]	@ (800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d009      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b580:	d004      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a10      	ldr	r2, [pc, #64]	@ (800b5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d10c      	bne.n	800b5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	40012c00 	.word	0x40012c00
 800b5c8:	40014000 	.word	0x40014000

0800b5cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e040      	b.n	800b69c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7fa ffc6 	bl	80065bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2224      	movs	r2, #36	@ 0x24
 800b634:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0201 	bic.w	r2, r2, #1
 800b644:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fecc 	bl	800c3ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fc6f 	bl	800bf38 <UART_SetConfig>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d101      	bne.n	800b664 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e01b      	b.n	800b69c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f042 0201 	orr.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 ff4b 	bl	800c530 <UART_CheckIdleState>
 800b69a:	4603      	mov	r3, r0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	@ 0x28
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6b8:	2b20      	cmp	r3, #32
 800b6ba:	d177      	bne.n	800b7ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <HAL_UART_Transmit+0x24>
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e070      	b.n	800b7ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2221      	movs	r2, #33	@ 0x21
 800b6d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6da:	f7fb f90b 	bl	80068f4 <HAL_GetTick>
 800b6de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	88fa      	ldrh	r2, [r7, #6]
 800b6e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6f8:	d108      	bne.n	800b70c <HAL_UART_Transmit+0x68>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d104      	bne.n	800b70c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	61bb      	str	r3, [r7, #24]
 800b70a:	e003      	b.n	800b714 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b710:	2300      	movs	r3, #0
 800b712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b714:	e02f      	b.n	800b776 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	2180      	movs	r1, #128	@ 0x80
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 ffad 	bl	800c680 <UART_WaitOnFlagUntilTimeout>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2220      	movs	r2, #32
 800b730:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e03b      	b.n	800b7ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10b      	bne.n	800b754 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	881a      	ldrh	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b748:	b292      	uxth	r2, r2
 800b74a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	3302      	adds	r3, #2
 800b750:	61bb      	str	r3, [r7, #24]
 800b752:	e007      	b.n	800b764 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	3301      	adds	r3, #1
 800b762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	3b01      	subs	r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1c9      	bne.n	800b716 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2200      	movs	r2, #0
 800b78a:	2140      	movs	r1, #64	@ 0x40
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 ff77 	bl	800c680 <UART_WaitOnFlagUntilTimeout>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d004      	beq.n	800b7a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2220      	movs	r2, #32
 800b79c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e005      	b.n	800b7ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e000      	b.n	800b7ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b7ac:	2302      	movs	r3, #2
  }
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3720      	adds	r7, #32
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b090      	sub	sp, #64	@ 0x40
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7d6:	2b80      	cmp	r3, #128	@ 0x80
 800b7d8:	d139      	bne.n	800b84e <HAL_UART_DMAStop+0x98>
 800b7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7dc:	2b21      	cmp	r3, #33	@ 0x21
 800b7de:	d136      	bne.n	800b84e <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	e853 3f00 	ldrex	r3, [r3]
 800b7ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b802:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b808:	e841 2300 	strex	r3, r2, [r1]
 800b80c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e5      	bne.n	800b7e0 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d015      	beq.n	800b848 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b820:	4618      	mov	r0, r3
 800b822:	f7fd f833 	bl	800888c <HAL_DMA_Abort>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00d      	beq.n	800b848 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b830:	4618      	mov	r0, r3
 800b832:	f7fd f959 	bl	8008ae8 <HAL_DMA_GetError>
 800b836:	4603      	mov	r3, r0
 800b838:	2b20      	cmp	r3, #32
 800b83a:	d105      	bne.n	800b848 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2210      	movs	r2, #16
 800b840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e044      	b.n	800b8d2 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f001 f827 	bl	800c89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b858:	2b40      	cmp	r3, #64	@ 0x40
 800b85a:	d139      	bne.n	800b8d0 <HAL_UART_DMAStop+0x11a>
 800b85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85e:	2b22      	cmp	r3, #34	@ 0x22
 800b860:	d136      	bne.n	800b8d0 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3308      	adds	r3, #8
 800b868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	60bb      	str	r3, [r7, #8]
   return(result);
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b878:	633b      	str	r3, [r7, #48]	@ 0x30
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b882:	61ba      	str	r2, [r7, #24]
 800b884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6979      	ldr	r1, [r7, #20]
 800b888:	69ba      	ldr	r2, [r7, #24]
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	613b      	str	r3, [r7, #16]
   return(result);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e5      	bne.n	800b862 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d015      	beq.n	800b8ca <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fc fff2 	bl	800888c <HAL_DMA_Abort>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00d      	beq.n	800b8ca <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fd f918 	bl	8008ae8 <HAL_DMA_GetError>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b20      	cmp	r3, #32
 800b8bc:	d105      	bne.n	800b8ca <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2210      	movs	r2, #16
 800b8c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e003      	b.n	800b8d2 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 f80c 	bl	800c8e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3740      	adds	r7, #64	@ 0x40
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b0ba      	sub	sp, #232	@ 0xe8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b906:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b90a:	4013      	ands	r3, r2
 800b90c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b914:	2b00      	cmp	r3, #0
 800b916:	d115      	bne.n	800b944 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00f      	beq.n	800b944 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 82ca 	beq.w	800bece <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
      }
      return;
 800b942:	e2c4      	b.n	800bece <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8117 	beq.w	800bb7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b94e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b95a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b95e:	4b85      	ldr	r3, [pc, #532]	@ (800bb74 <HAL_UART_IRQHandler+0x298>)
 800b960:	4013      	ands	r3, r2
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 810a 	beq.w	800bb7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d011      	beq.n	800b998 <HAL_UART_IRQHandler+0xbc>
 800b974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2201      	movs	r2, #1
 800b986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b98e:	f043 0201 	orr.w	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d011      	beq.n	800b9c8 <HAL_UART_IRQHandler+0xec>
 800b9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9be:	f043 0204 	orr.w	r2, r3, #4
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d011      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x11c>
 800b9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00b      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9ee:	f043 0202 	orr.w	r2, r3, #2
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9fc:	f003 0308 	and.w	r3, r3, #8
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d017      	beq.n	800ba34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba08:	f003 0320 	and.w	r3, r3, #32
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ba10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2208      	movs	r2, #8
 800ba22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba2a:	f043 0208 	orr.w	r2, r3, #8
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d012      	beq.n	800ba66 <HAL_UART_IRQHandler+0x18a>
 800ba40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00c      	beq.n	800ba66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba5c:	f043 0220 	orr.w	r2, r3, #32
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 8230 	beq.w	800bed2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00d      	beq.n	800ba9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba82:	f003 0320 	and.w	r3, r3, #32
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d007      	beq.n	800ba9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baa0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baae:	2b40      	cmp	r3, #64	@ 0x40
 800bab0:	d005      	beq.n	800babe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bab6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baba:	2b00      	cmp	r3, #0
 800babc:	d04f      	beq.n	800bb5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 ff12 	bl	800c8e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bace:	2b40      	cmp	r3, #64	@ 0x40
 800bad0:	d141      	bne.n	800bb56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800badc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800baec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3308      	adds	r3, #8
 800bafa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bafe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bb02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bb0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bb16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1d9      	bne.n	800bad2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d013      	beq.n	800bb4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb2a:	4a13      	ldr	r2, [pc, #76]	@ (800bb78 <HAL_UART_IRQHandler+0x29c>)
 800bb2c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fc fee8 	bl	8008908 <HAL_DMA_Abort_IT>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d017      	beq.n	800bb6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4c:	e00f      	b.n	800bb6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f9e8 	bl	800bf24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb54:	e00b      	b.n	800bb6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f9e4 	bl	800bf24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb5c:	e007      	b.n	800bb6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f9e0 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bb6c:	e1b1      	b.n	800bed2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6e:	bf00      	nop
    return;
 800bb70:	e1af      	b.n	800bed2 <HAL_UART_IRQHandler+0x5f6>
 800bb72:	bf00      	nop
 800bb74:	04000120 	.word	0x04000120
 800bb78:	0800cb99 	.word	0x0800cb99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	f040 816a 	bne.w	800be5a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb8a:	f003 0310 	and.w	r3, r3, #16
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 8163 	beq.w	800be5a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb98:	f003 0310 	and.w	r3, r3, #16
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 815c 	beq.w	800be5a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2210      	movs	r2, #16
 800bba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb4:	2b40      	cmp	r3, #64	@ 0x40
 800bbb6:	f040 80d4 	bne.w	800bd62 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 80ad 	beq.w	800bd2a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bbd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	f080 80a5 	bcs.w	800bd2a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbe6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0320 	and.w	r3, r3, #32
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f040 8086 	bne.w	800bd08 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc08:	e853 3f00 	ldrex	r3, [r3]
 800bc0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	461a      	mov	r2, r3
 800bc22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1da      	bne.n	800bbfc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc58:	f023 0301 	bic.w	r3, r3, #1
 800bc5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3308      	adds	r3, #8
 800bc66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc76:	e841 2300 	strex	r3, r2, [r1]
 800bc7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1e1      	bne.n	800bc46 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3308      	adds	r3, #8
 800bc88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3308      	adds	r3, #8
 800bca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bca8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcae:	e841 2300 	strex	r3, r2, [r1]
 800bcb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bcb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1e3      	bne.n	800bc82 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2220      	movs	r2, #32
 800bcbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcd8:	f023 0310 	bic.w	r3, r3, #16
 800bcdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	461a      	mov	r2, r3
 800bce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bcf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e4      	bne.n	800bcc8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc fdc2 	bl	800888c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7f9 ffd8 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bd28:	e0d5      	b.n	800bed6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bd30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f040 80ce 	bne.w	800bed6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b20      	cmp	r3, #32
 800bd48:	f040 80c5 	bne.w	800bed6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7f9 ffbc 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
      return;
 800bd60:	e0b9      	b.n	800bed6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80ab 	beq.w	800beda <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800bd84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 80a6 	beq.w	800beda <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bda2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdb8:	e841 2300 	strex	r3, r2, [r1]
 800bdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e4      	bne.n	800bd8e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3308      	adds	r3, #8
 800bdca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	623b      	str	r3, [r7, #32]
   return(result);
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	f023 0301 	bic.w	r3, r3, #1
 800bdda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3308      	adds	r3, #8
 800bde4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bde8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdf0:	e841 2300 	strex	r3, r2, [r1]
 800bdf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1e3      	bne.n	800bdc4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	e853 3f00 	ldrex	r3, [r3]
 800be1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f023 0310 	bic.w	r3, r3, #16
 800be24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	461a      	mov	r2, r3
 800be2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be32:	61fb      	str	r3, [r7, #28]
 800be34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be36:	69b9      	ldr	r1, [r7, #24]
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	e841 2300 	strex	r3, r2, [r1]
 800be3e:	617b      	str	r3, [r7, #20]
   return(result);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1e4      	bne.n	800be10 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2202      	movs	r2, #2
 800be4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7f9 ff40 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be58:	e03f      	b.n	800beda <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00e      	beq.n	800be84 <HAL_UART_IRQHandler+0x5a8>
 800be66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d008      	beq.n	800be84 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fecb 	bl	800cc18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be82:	e02d      	b.n	800bee0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800be84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00e      	beq.n	800beae <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800be90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d008      	beq.n	800beae <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01c      	beq.n	800bede <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	4798      	blx	r3
    }
    return;
 800beac:	e017      	b.n	800bede <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800beae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d012      	beq.n	800bee0 <HAL_UART_IRQHandler+0x604>
 800beba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00c      	beq.n	800bee0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fe7c 	bl	800cbc4 <UART_EndTransmit_IT>
    return;
 800becc:	e008      	b.n	800bee0 <HAL_UART_IRQHandler+0x604>
      return;
 800bece:	bf00      	nop
 800bed0:	e006      	b.n	800bee0 <HAL_UART_IRQHandler+0x604>
    return;
 800bed2:	bf00      	nop
 800bed4:	e004      	b.n	800bee0 <HAL_UART_IRQHandler+0x604>
      return;
 800bed6:	bf00      	nop
 800bed8:	e002      	b.n	800bee0 <HAL_UART_IRQHandler+0x604>
      return;
 800beda:	bf00      	nop
 800bedc:	e000      	b.n	800bee0 <HAL_UART_IRQHandler+0x604>
    return;
 800bede:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800bee0:	37e8      	adds	r7, #232	@ 0xe8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop

0800bee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf18:	bf00      	nop
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf3c:	b08a      	sub	sp, #40	@ 0x28
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	431a      	orrs	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	431a      	orrs	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	69db      	ldr	r3, [r3, #28]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	4b9e      	ldr	r3, [pc, #632]	@ (800c1e0 <UART_SetConfig+0x2a8>)
 800bf68:	4013      	ands	r3, r2
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	6812      	ldr	r2, [r2, #0]
 800bf6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf70:	430b      	orrs	r3, r1
 800bf72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	430a      	orrs	r2, r1
 800bf88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a93      	ldr	r2, [pc, #588]	@ (800c1e4 <UART_SetConfig+0x2ac>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d004      	beq.n	800bfa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a8a      	ldr	r2, [pc, #552]	@ (800c1e8 <UART_SetConfig+0x2b0>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d126      	bne.n	800c010 <UART_SetConfig+0xd8>
 800bfc2:	4b8a      	ldr	r3, [pc, #552]	@ (800c1ec <UART_SetConfig+0x2b4>)
 800bfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d81b      	bhi.n	800c008 <UART_SetConfig+0xd0>
 800bfd0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd8 <UART_SetConfig+0xa0>)
 800bfd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd6:	bf00      	nop
 800bfd8:	0800bfe9 	.word	0x0800bfe9
 800bfdc:	0800bff9 	.word	0x0800bff9
 800bfe0:	0800bff1 	.word	0x0800bff1
 800bfe4:	0800c001 	.word	0x0800c001
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfee:	e0ab      	b.n	800c148 <UART_SetConfig+0x210>
 800bff0:	2302      	movs	r3, #2
 800bff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bff6:	e0a7      	b.n	800c148 <UART_SetConfig+0x210>
 800bff8:	2304      	movs	r3, #4
 800bffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bffe:	e0a3      	b.n	800c148 <UART_SetConfig+0x210>
 800c000:	2308      	movs	r3, #8
 800c002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c006:	e09f      	b.n	800c148 <UART_SetConfig+0x210>
 800c008:	2310      	movs	r3, #16
 800c00a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c00e:	e09b      	b.n	800c148 <UART_SetConfig+0x210>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a76      	ldr	r2, [pc, #472]	@ (800c1f0 <UART_SetConfig+0x2b8>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d138      	bne.n	800c08c <UART_SetConfig+0x154>
 800c01a:	4b74      	ldr	r3, [pc, #464]	@ (800c1ec <UART_SetConfig+0x2b4>)
 800c01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c020:	f003 030c 	and.w	r3, r3, #12
 800c024:	2b0c      	cmp	r3, #12
 800c026:	d82d      	bhi.n	800c084 <UART_SetConfig+0x14c>
 800c028:	a201      	add	r2, pc, #4	@ (adr r2, 800c030 <UART_SetConfig+0xf8>)
 800c02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02e:	bf00      	nop
 800c030:	0800c065 	.word	0x0800c065
 800c034:	0800c085 	.word	0x0800c085
 800c038:	0800c085 	.word	0x0800c085
 800c03c:	0800c085 	.word	0x0800c085
 800c040:	0800c075 	.word	0x0800c075
 800c044:	0800c085 	.word	0x0800c085
 800c048:	0800c085 	.word	0x0800c085
 800c04c:	0800c085 	.word	0x0800c085
 800c050:	0800c06d 	.word	0x0800c06d
 800c054:	0800c085 	.word	0x0800c085
 800c058:	0800c085 	.word	0x0800c085
 800c05c:	0800c085 	.word	0x0800c085
 800c060:	0800c07d 	.word	0x0800c07d
 800c064:	2300      	movs	r3, #0
 800c066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c06a:	e06d      	b.n	800c148 <UART_SetConfig+0x210>
 800c06c:	2302      	movs	r3, #2
 800c06e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c072:	e069      	b.n	800c148 <UART_SetConfig+0x210>
 800c074:	2304      	movs	r3, #4
 800c076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c07a:	e065      	b.n	800c148 <UART_SetConfig+0x210>
 800c07c:	2308      	movs	r3, #8
 800c07e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c082:	e061      	b.n	800c148 <UART_SetConfig+0x210>
 800c084:	2310      	movs	r3, #16
 800c086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c08a:	e05d      	b.n	800c148 <UART_SetConfig+0x210>
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a58      	ldr	r2, [pc, #352]	@ (800c1f4 <UART_SetConfig+0x2bc>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d125      	bne.n	800c0e2 <UART_SetConfig+0x1aa>
 800c096:	4b55      	ldr	r3, [pc, #340]	@ (800c1ec <UART_SetConfig+0x2b4>)
 800c098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c09c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c0a0:	2b30      	cmp	r3, #48	@ 0x30
 800c0a2:	d016      	beq.n	800c0d2 <UART_SetConfig+0x19a>
 800c0a4:	2b30      	cmp	r3, #48	@ 0x30
 800c0a6:	d818      	bhi.n	800c0da <UART_SetConfig+0x1a2>
 800c0a8:	2b20      	cmp	r3, #32
 800c0aa:	d00a      	beq.n	800c0c2 <UART_SetConfig+0x18a>
 800c0ac:	2b20      	cmp	r3, #32
 800c0ae:	d814      	bhi.n	800c0da <UART_SetConfig+0x1a2>
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <UART_SetConfig+0x182>
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	d008      	beq.n	800c0ca <UART_SetConfig+0x192>
 800c0b8:	e00f      	b.n	800c0da <UART_SetConfig+0x1a2>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0c0:	e042      	b.n	800c148 <UART_SetConfig+0x210>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0c8:	e03e      	b.n	800c148 <UART_SetConfig+0x210>
 800c0ca:	2304      	movs	r3, #4
 800c0cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0d0:	e03a      	b.n	800c148 <UART_SetConfig+0x210>
 800c0d2:	2308      	movs	r3, #8
 800c0d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0d8:	e036      	b.n	800c148 <UART_SetConfig+0x210>
 800c0da:	2310      	movs	r3, #16
 800c0dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0e0:	e032      	b.n	800c148 <UART_SetConfig+0x210>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a3f      	ldr	r2, [pc, #252]	@ (800c1e4 <UART_SetConfig+0x2ac>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d12a      	bne.n	800c142 <UART_SetConfig+0x20a>
 800c0ec:	4b3f      	ldr	r3, [pc, #252]	@ (800c1ec <UART_SetConfig+0x2b4>)
 800c0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c0f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c0fa:	d01a      	beq.n	800c132 <UART_SetConfig+0x1fa>
 800c0fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c100:	d81b      	bhi.n	800c13a <UART_SetConfig+0x202>
 800c102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c106:	d00c      	beq.n	800c122 <UART_SetConfig+0x1ea>
 800c108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c10c:	d815      	bhi.n	800c13a <UART_SetConfig+0x202>
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <UART_SetConfig+0x1e2>
 800c112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c116:	d008      	beq.n	800c12a <UART_SetConfig+0x1f2>
 800c118:	e00f      	b.n	800c13a <UART_SetConfig+0x202>
 800c11a:	2300      	movs	r3, #0
 800c11c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c120:	e012      	b.n	800c148 <UART_SetConfig+0x210>
 800c122:	2302      	movs	r3, #2
 800c124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c128:	e00e      	b.n	800c148 <UART_SetConfig+0x210>
 800c12a:	2304      	movs	r3, #4
 800c12c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c130:	e00a      	b.n	800c148 <UART_SetConfig+0x210>
 800c132:	2308      	movs	r3, #8
 800c134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c138:	e006      	b.n	800c148 <UART_SetConfig+0x210>
 800c13a:	2310      	movs	r3, #16
 800c13c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c140:	e002      	b.n	800c148 <UART_SetConfig+0x210>
 800c142:	2310      	movs	r3, #16
 800c144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a25      	ldr	r2, [pc, #148]	@ (800c1e4 <UART_SetConfig+0x2ac>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	f040 808a 	bne.w	800c268 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c154:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c158:	2b08      	cmp	r3, #8
 800c15a:	d824      	bhi.n	800c1a6 <UART_SetConfig+0x26e>
 800c15c:	a201      	add	r2, pc, #4	@ (adr r2, 800c164 <UART_SetConfig+0x22c>)
 800c15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c162:	bf00      	nop
 800c164:	0800c189 	.word	0x0800c189
 800c168:	0800c1a7 	.word	0x0800c1a7
 800c16c:	0800c191 	.word	0x0800c191
 800c170:	0800c1a7 	.word	0x0800c1a7
 800c174:	0800c197 	.word	0x0800c197
 800c178:	0800c1a7 	.word	0x0800c1a7
 800c17c:	0800c1a7 	.word	0x0800c1a7
 800c180:	0800c1a7 	.word	0x0800c1a7
 800c184:	0800c19f 	.word	0x0800c19f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c188:	f7fe fbfa 	bl	800a980 <HAL_RCC_GetPCLK1Freq>
 800c18c:	61f8      	str	r0, [r7, #28]
        break;
 800c18e:	e010      	b.n	800c1b2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c190:	4b19      	ldr	r3, [pc, #100]	@ (800c1f8 <UART_SetConfig+0x2c0>)
 800c192:	61fb      	str	r3, [r7, #28]
        break;
 800c194:	e00d      	b.n	800c1b2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c196:	f7fe fb5b 	bl	800a850 <HAL_RCC_GetSysClockFreq>
 800c19a:	61f8      	str	r0, [r7, #28]
        break;
 800c19c:	e009      	b.n	800c1b2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c19e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1a2:	61fb      	str	r3, [r7, #28]
        break;
 800c1a4:	e005      	b.n	800c1b2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c1b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8109 	beq.w	800c3cc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	005b      	lsls	r3, r3, #1
 800c1c2:	4413      	add	r3, r2
 800c1c4:	69fa      	ldr	r2, [r7, #28]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d305      	bcc.n	800c1d6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d912      	bls.n	800c1fc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c1dc:	e0f6      	b.n	800c3cc <UART_SetConfig+0x494>
 800c1de:	bf00      	nop
 800c1e0:	efff69f3 	.word	0xefff69f3
 800c1e4:	40008000 	.word	0x40008000
 800c1e8:	40013800 	.word	0x40013800
 800c1ec:	40021000 	.word	0x40021000
 800c1f0:	40004400 	.word	0x40004400
 800c1f4:	40004800 	.word	0x40004800
 800c1f8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	2200      	movs	r2, #0
 800c200:	461c      	mov	r4, r3
 800c202:	4615      	mov	r5, r2
 800c204:	f04f 0200 	mov.w	r2, #0
 800c208:	f04f 0300 	mov.w	r3, #0
 800c20c:	022b      	lsls	r3, r5, #8
 800c20e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c212:	0222      	lsls	r2, r4, #8
 800c214:	68f9      	ldr	r1, [r7, #12]
 800c216:	6849      	ldr	r1, [r1, #4]
 800c218:	0849      	lsrs	r1, r1, #1
 800c21a:	2000      	movs	r0, #0
 800c21c:	4688      	mov	r8, r1
 800c21e:	4681      	mov	r9, r0
 800c220:	eb12 0a08 	adds.w	sl, r2, r8
 800c224:	eb43 0b09 	adc.w	fp, r3, r9
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	603b      	str	r3, [r7, #0]
 800c230:	607a      	str	r2, [r7, #4]
 800c232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c236:	4650      	mov	r0, sl
 800c238:	4659      	mov	r1, fp
 800c23a:	f7f4 fbe7 	bl	8000a0c <__aeabi_uldivmod>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4613      	mov	r3, r2
 800c244:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c24c:	d308      	bcc.n	800c260 <UART_SetConfig+0x328>
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c254:	d204      	bcs.n	800c260 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	60da      	str	r2, [r3, #12]
 800c25e:	e0b5      	b.n	800c3cc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c266:	e0b1      	b.n	800c3cc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	69db      	ldr	r3, [r3, #28]
 800c26c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c270:	d15d      	bne.n	800c32e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800c272:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c276:	2b08      	cmp	r3, #8
 800c278:	d827      	bhi.n	800c2ca <UART_SetConfig+0x392>
 800c27a:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <UART_SetConfig+0x348>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c2a5 	.word	0x0800c2a5
 800c284:	0800c2ad 	.word	0x0800c2ad
 800c288:	0800c2b5 	.word	0x0800c2b5
 800c28c:	0800c2cb 	.word	0x0800c2cb
 800c290:	0800c2bb 	.word	0x0800c2bb
 800c294:	0800c2cb 	.word	0x0800c2cb
 800c298:	0800c2cb 	.word	0x0800c2cb
 800c29c:	0800c2cb 	.word	0x0800c2cb
 800c2a0:	0800c2c3 	.word	0x0800c2c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2a4:	f7fe fb6c 	bl	800a980 <HAL_RCC_GetPCLK1Freq>
 800c2a8:	61f8      	str	r0, [r7, #28]
        break;
 800c2aa:	e014      	b.n	800c2d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2ac:	f7fe fb7e 	bl	800a9ac <HAL_RCC_GetPCLK2Freq>
 800c2b0:	61f8      	str	r0, [r7, #28]
        break;
 800c2b2:	e010      	b.n	800c2d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c3e8 <UART_SetConfig+0x4b0>)
 800c2b6:	61fb      	str	r3, [r7, #28]
        break;
 800c2b8:	e00d      	b.n	800c2d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2ba:	f7fe fac9 	bl	800a850 <HAL_RCC_GetSysClockFreq>
 800c2be:	61f8      	str	r0, [r7, #28]
        break;
 800c2c0:	e009      	b.n	800c2d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2c6:	61fb      	str	r3, [r7, #28]
        break;
 800c2c8:	e005      	b.n	800c2d6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c2d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d077      	beq.n	800c3cc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	005a      	lsls	r2, r3, #1
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	085b      	lsrs	r3, r3, #1
 800c2e6:	441a      	add	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	2b0f      	cmp	r3, #15
 800c2f6:	d916      	bls.n	800c326 <UART_SetConfig+0x3ee>
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2fe:	d212      	bcs.n	800c326 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	b29b      	uxth	r3, r3
 800c304:	f023 030f 	bic.w	r3, r3, #15
 800c308:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	085b      	lsrs	r3, r3, #1
 800c30e:	b29b      	uxth	r3, r3
 800c310:	f003 0307 	and.w	r3, r3, #7
 800c314:	b29a      	uxth	r2, r3
 800c316:	8afb      	ldrh	r3, [r7, #22]
 800c318:	4313      	orrs	r3, r2
 800c31a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	8afa      	ldrh	r2, [r7, #22]
 800c322:	60da      	str	r2, [r3, #12]
 800c324:	e052      	b.n	800c3cc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c32c:	e04e      	b.n	800c3cc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c32e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c332:	2b08      	cmp	r3, #8
 800c334:	d827      	bhi.n	800c386 <UART_SetConfig+0x44e>
 800c336:	a201      	add	r2, pc, #4	@ (adr r2, 800c33c <UART_SetConfig+0x404>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c361 	.word	0x0800c361
 800c340:	0800c369 	.word	0x0800c369
 800c344:	0800c371 	.word	0x0800c371
 800c348:	0800c387 	.word	0x0800c387
 800c34c:	0800c377 	.word	0x0800c377
 800c350:	0800c387 	.word	0x0800c387
 800c354:	0800c387 	.word	0x0800c387
 800c358:	0800c387 	.word	0x0800c387
 800c35c:	0800c37f 	.word	0x0800c37f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c360:	f7fe fb0e 	bl	800a980 <HAL_RCC_GetPCLK1Freq>
 800c364:	61f8      	str	r0, [r7, #28]
        break;
 800c366:	e014      	b.n	800c392 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c368:	f7fe fb20 	bl	800a9ac <HAL_RCC_GetPCLK2Freq>
 800c36c:	61f8      	str	r0, [r7, #28]
        break;
 800c36e:	e010      	b.n	800c392 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c370:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <UART_SetConfig+0x4b0>)
 800c372:	61fb      	str	r3, [r7, #28]
        break;
 800c374:	e00d      	b.n	800c392 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c376:	f7fe fa6b 	bl	800a850 <HAL_RCC_GetSysClockFreq>
 800c37a:	61f8      	str	r0, [r7, #28]
        break;
 800c37c:	e009      	b.n	800c392 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c37e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c382:	61fb      	str	r3, [r7, #28]
        break;
 800c384:	e005      	b.n	800c392 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c390:	bf00      	nop
    }

    if (pclk != 0U)
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d019      	beq.n	800c3cc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	085a      	lsrs	r2, r3, #1
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	2b0f      	cmp	r3, #15
 800c3b0:	d909      	bls.n	800c3c6 <UART_SetConfig+0x48e>
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3b8:	d205      	bcs.n	800c3c6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60da      	str	r2, [r3, #12]
 800c3c4:	e002      	b.n	800c3cc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c3d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3728      	adds	r7, #40	@ 0x28
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3e6:	bf00      	nop
 800c3e8:	00f42400 	.word	0x00f42400

0800c3ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00a      	beq.n	800c416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00a      	beq.n	800c438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	430a      	orrs	r2, r1
 800c436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	f003 0302 	and.w	r3, r3, #2
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00a      	beq.n	800c45a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	430a      	orrs	r2, r1
 800c458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45e:	f003 0304 	and.w	r3, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00a      	beq.n	800c47c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	430a      	orrs	r2, r1
 800c47a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c480:	f003 0310 	and.w	r3, r3, #16
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00a      	beq.n	800c49e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	430a      	orrs	r2, r1
 800c49c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a2:	f003 0320 	and.w	r3, r3, #32
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00a      	beq.n	800c4c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01a      	beq.n	800c502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4ea:	d10a      	bne.n	800c502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	605a      	str	r2, [r3, #4]
  }
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b098      	sub	sp, #96	@ 0x60
 800c534:	af02      	add	r7, sp, #8
 800c536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c540:	f7fa f9d8 	bl	80068f4 <HAL_GetTick>
 800c544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0308 	and.w	r3, r3, #8
 800c550:	2b08      	cmp	r3, #8
 800c552:	d12e      	bne.n	800c5b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c55c:	2200      	movs	r2, #0
 800c55e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f88c 	bl	800c680 <UART_WaitOnFlagUntilTimeout>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d021      	beq.n	800c5b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c57e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c582:	653b      	str	r3, [r7, #80]	@ 0x50
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	461a      	mov	r2, r3
 800c58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c58c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c58e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c594:	e841 2300 	strex	r3, r2, [r1]
 800c598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1e6      	bne.n	800c56e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e062      	b.n	800c678 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0304 	and.w	r3, r3, #4
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d149      	bne.n	800c654 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f856 	bl	800c680 <UART_WaitOnFlagUntilTimeout>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d03c      	beq.n	800c654 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e2:	e853 3f00 	ldrex	r3, [r3]
 800c5e6:	623b      	str	r3, [r7, #32]
   return(result);
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c600:	e841 2300 	strex	r3, r2, [r1]
 800c604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1e6      	bne.n	800c5da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f023 0301 	bic.w	r3, r3, #1
 800c622:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3308      	adds	r3, #8
 800c62a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c62c:	61fa      	str	r2, [r7, #28]
 800c62e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	69b9      	ldr	r1, [r7, #24]
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	617b      	str	r3, [r7, #20]
   return(result);
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e5      	bne.n	800c60c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2220      	movs	r2, #32
 800c644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e011      	b.n	800c678 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2220      	movs	r2, #32
 800c658:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2220      	movs	r2, #32
 800c65e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3758      	adds	r7, #88	@ 0x58
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	4613      	mov	r3, r2
 800c68e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c690:	e04f      	b.n	800c732 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c698:	d04b      	beq.n	800c732 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c69a:	f7fa f92b 	bl	80068f4 <HAL_GetTick>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	69ba      	ldr	r2, [r7, #24]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d302      	bcc.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d101      	bne.n	800c6b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e04e      	b.n	800c752 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 0304 	and.w	r3, r3, #4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d037      	beq.n	800c732 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	2b80      	cmp	r3, #128	@ 0x80
 800c6c6:	d034      	beq.n	800c732 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b40      	cmp	r3, #64	@ 0x40
 800c6cc:	d031      	beq.n	800c732 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	69db      	ldr	r3, [r3, #28]
 800c6d4:	f003 0308 	and.w	r3, r3, #8
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d110      	bne.n	800c6fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 f8ff 	bl	800c8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e029      	b.n	800c752 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c70c:	d111      	bne.n	800c732 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f000 f8e5 	bl	800c8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2220      	movs	r2, #32
 800c722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e00f      	b.n	800c752 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	69da      	ldr	r2, [r3, #28]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	4013      	ands	r3, r2
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	429a      	cmp	r2, r3
 800c740:	bf0c      	ite	eq
 800c742:	2301      	moveq	r3, #1
 800c744:	2300      	movne	r3, #0
 800c746:	b2db      	uxtb	r3, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d0a0      	beq.n	800c692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b096      	sub	sp, #88	@ 0x58
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	4613      	mov	r3, r2
 800c768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	88fa      	ldrh	r2, [r7, #6]
 800c774:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2222      	movs	r2, #34	@ 0x22
 800c784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d028      	beq.n	800c7e2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c794:	4a3e      	ldr	r2, [pc, #248]	@ (800c890 <UART_Start_Receive_DMA+0x134>)
 800c796:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c79c:	4a3d      	ldr	r2, [pc, #244]	@ (800c894 <UART_Start_Receive_DMA+0x138>)
 800c79e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7a4:	4a3c      	ldr	r2, [pc, #240]	@ (800c898 <UART_Start_Receive_DMA+0x13c>)
 800c7a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3324      	adds	r3, #36	@ 0x24
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	88fb      	ldrh	r3, [r7, #6]
 800c7c4:	f7fc f802 	bl	80087cc <HAL_DMA_Start_IT>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d009      	beq.n	800c7e2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2210      	movs	r2, #16
 800c7d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2220      	movs	r2, #32
 800c7da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e051      	b.n	800c886 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d018      	beq.n	800c81c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f2:	e853 3f00 	ldrex	r3, [r3]
 800c7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c80a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c80e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c810:	e841 2300 	strex	r3, r2, [r1]
 800c814:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1e6      	bne.n	800c7ea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3308      	adds	r3, #8
 800c822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	653b      	str	r3, [r7, #80]	@ 0x50
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3308      	adds	r3, #8
 800c83a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c83c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c83e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e5      	bne.n	800c81c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3308      	adds	r3, #8
 800c856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	e853 3f00 	ldrex	r3, [r3]
 800c85e:	613b      	str	r3, [r7, #16]
   return(result);
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3308      	adds	r3, #8
 800c86e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c870:	623a      	str	r2, [r7, #32]
 800c872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c874:	69f9      	ldr	r1, [r7, #28]
 800c876:	6a3a      	ldr	r2, [r7, #32]
 800c878:	e841 2300 	strex	r3, r2, [r1]
 800c87c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e5      	bne.n	800c850 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3758      	adds	r7, #88	@ 0x58
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	0800c9b1 	.word	0x0800c9b1
 800c894:	0800cadd 	.word	0x0800cadd
 800c898:	0800cb1b 	.word	0x0800cb1b

0800c89c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b089      	sub	sp, #36	@ 0x24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	e853 3f00 	ldrex	r3, [r3]
 800c8b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c8b8:	61fb      	str	r3, [r7, #28]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	61bb      	str	r3, [r7, #24]
 800c8c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c6:	6979      	ldr	r1, [r7, #20]
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	e841 2300 	strex	r3, r2, [r1]
 800c8ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1e6      	bne.n	800c8a4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800c8dc:	bf00      	nop
 800c8de:	3724      	adds	r7, #36	@ 0x24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b095      	sub	sp, #84	@ 0x54
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f8:	e853 3f00 	ldrex	r3, [r3]
 800c8fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c90e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c910:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c916:	e841 2300 	strex	r3, r2, [r1]
 800c91a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e6      	bne.n	800c8f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	e853 3f00 	ldrex	r3, [r3]
 800c930:	61fb      	str	r3, [r7, #28]
   return(result);
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	f023 0301 	bic.w	r3, r3, #1
 800c938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3308      	adds	r3, #8
 800c940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e5      	bne.n	800c922 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d118      	bne.n	800c990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	e853 3f00 	ldrex	r3, [r3]
 800c96a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f023 0310 	bic.w	r3, r3, #16
 800c972:	647b      	str	r3, [r7, #68]	@ 0x44
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c97c:	61bb      	str	r3, [r7, #24]
 800c97e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c980:	6979      	ldr	r1, [r7, #20]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	e841 2300 	strex	r3, r2, [r1]
 800c988:	613b      	str	r3, [r7, #16]
   return(result);
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e6      	bne.n	800c95e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2220      	movs	r2, #32
 800c994:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c9a4:	bf00      	nop
 800c9a6:	3754      	adds	r7, #84	@ 0x54
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b09c      	sub	sp, #112	@ 0x70
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f003 0320 	and.w	r3, r3, #32
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d171      	bne.n	800cab0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c9cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9dc:	e853 3f00 	ldrex	r3, [r3]
 800c9e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9fa:	e841 2300 	strex	r3, r2, [r1]
 800c9fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1e6      	bne.n	800c9d4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca10:	e853 3f00 	ldrex	r3, [r3]
 800ca14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca18:	f023 0301 	bic.w	r3, r3, #1
 800ca1c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3308      	adds	r3, #8
 800ca24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ca26:	647a      	str	r2, [r7, #68]	@ 0x44
 800ca28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca2e:	e841 2300 	strex	r3, r2, [r1]
 800ca32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1e5      	bne.n	800ca06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	3308      	adds	r3, #8
 800ca40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	e853 3f00 	ldrex	r3, [r3]
 800ca48:	623b      	str	r3, [r7, #32]
   return(result);
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca50:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3308      	adds	r3, #8
 800ca58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca5a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca62:	e841 2300 	strex	r3, r2, [r1]
 800ca66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1e5      	bne.n	800ca3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca70:	2220      	movs	r2, #32
 800ca72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d118      	bne.n	800cab0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	e853 3f00 	ldrex	r3, [r3]
 800ca8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f023 0310 	bic.w	r3, r3, #16
 800ca92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca9c:	61fb      	str	r3, [r7, #28]
 800ca9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	69b9      	ldr	r1, [r7, #24]
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	e841 2300 	strex	r3, r2, [r1]
 800caa8:	617b      	str	r3, [r7, #20]
   return(result);
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1e6      	bne.n	800ca7e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cab2:	2200      	movs	r2, #0
 800cab4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d107      	bne.n	800cace <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cac0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cac4:	4619      	mov	r1, r3
 800cac6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cac8:	f7f9 f906 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cacc:	e002      	b.n	800cad4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cace:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cad0:	f7ff fa14 	bl	800befc <HAL_UART_RxCpltCallback>
}
 800cad4:	bf00      	nop
 800cad6:	3770      	adds	r7, #112	@ 0x70
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d109      	bne.n	800cb0c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	4619      	mov	r1, r3
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7f9 f8e7 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb0a:	e002      	b.n	800cb12 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff f9ff 	bl	800bf10 <HAL_UART_RxHalfCpltCallback>
}
 800cb12:	bf00      	nop
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b086      	sub	sp, #24
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb40:	2b80      	cmp	r3, #128	@ 0x80
 800cb42:	d109      	bne.n	800cb58 <UART_DMAError+0x3e>
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	2b21      	cmp	r3, #33	@ 0x21
 800cb48:	d106      	bne.n	800cb58 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800cb52:	6978      	ldr	r0, [r7, #20]
 800cb54:	f7ff fea2 	bl	800c89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb62:	2b40      	cmp	r3, #64	@ 0x40
 800cb64:	d109      	bne.n	800cb7a <UART_DMAError+0x60>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2b22      	cmp	r3, #34	@ 0x22
 800cb6a:	d106      	bne.n	800cb7a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800cb74:	6978      	ldr	r0, [r7, #20]
 800cb76:	f7ff feb7 	bl	800c8e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb80:	f043 0210 	orr.w	r2, r3, #16
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb8a:	6978      	ldr	r0, [r7, #20]
 800cb8c:	f7ff f9ca 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb90:	bf00      	nop
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff f9b4 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbbc:	bf00      	nop
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbe0:	61fb      	str	r3, [r7, #28]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	61bb      	str	r3, [r7, #24]
 800cbec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	6979      	ldr	r1, [r7, #20]
 800cbf0:	69ba      	ldr	r2, [r7, #24]
 800cbf2:	e841 2300 	strex	r3, r2, [r1]
 800cbf6:	613b      	str	r3, [r7, #16]
   return(result);
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e6      	bne.n	800cbcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2220      	movs	r2, #32
 800cc02:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff f96c 	bl	800bee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc10:	bf00      	nop
 800cc12:	3720      	adds	r7, #32
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08c      	sub	sp, #48	@ 0x30
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	4613      	mov	r3, r2
 800cc38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc40:	2b20      	cmp	r3, #32
 800cc42:	d142      	bne.n	800ccca <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d101      	bne.n	800cc54 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e03b      	b.n	800cccc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2201      	movs	r2, #1
 800cc58:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800cc60:	88fb      	ldrh	r3, [r7, #6]
 800cc62:	461a      	mov	r2, r3
 800cc64:	68b9      	ldr	r1, [r7, #8]
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff fd78 	bl	800c75c <UART_Start_Receive_DMA>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cc72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d124      	bne.n	800ccc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d11d      	bne.n	800ccbe <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2210      	movs	r2, #16
 800cc88:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	e853 3f00 	ldrex	r3, [r3]
 800cc96:	617b      	str	r3, [r7, #20]
   return(result);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f043 0310 	orr.w	r3, r3, #16
 800cc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	461a      	mov	r2, r3
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccaa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccac:	6a39      	ldr	r1, [r7, #32]
 800ccae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccb0:	e841 2300 	strex	r3, r2, [r1]
 800ccb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e6      	bne.n	800cc8a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ccbc:	e002      	b.n	800ccc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ccc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccc8:	e000      	b.n	800cccc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ccca:	2302      	movs	r3, #2
  }
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3730      	adds	r7, #48	@ 0x30
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <memset>:
 800ccd4:	4402      	add	r2, r0
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d100      	bne.n	800ccde <memset+0xa>
 800ccdc:	4770      	bx	lr
 800ccde:	f803 1b01 	strb.w	r1, [r3], #1
 800cce2:	e7f9      	b.n	800ccd8 <memset+0x4>

0800cce4 <__libc_init_array>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	4d0d      	ldr	r5, [pc, #52]	@ (800cd1c <__libc_init_array+0x38>)
 800cce8:	4c0d      	ldr	r4, [pc, #52]	@ (800cd20 <__libc_init_array+0x3c>)
 800ccea:	1b64      	subs	r4, r4, r5
 800ccec:	10a4      	asrs	r4, r4, #2
 800ccee:	2600      	movs	r6, #0
 800ccf0:	42a6      	cmp	r6, r4
 800ccf2:	d109      	bne.n	800cd08 <__libc_init_array+0x24>
 800ccf4:	4d0b      	ldr	r5, [pc, #44]	@ (800cd24 <__libc_init_array+0x40>)
 800ccf6:	4c0c      	ldr	r4, [pc, #48]	@ (800cd28 <__libc_init_array+0x44>)
 800ccf8:	f000 f826 	bl	800cd48 <_init>
 800ccfc:	1b64      	subs	r4, r4, r5
 800ccfe:	10a4      	asrs	r4, r4, #2
 800cd00:	2600      	movs	r6, #0
 800cd02:	42a6      	cmp	r6, r4
 800cd04:	d105      	bne.n	800cd12 <__libc_init_array+0x2e>
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd0c:	4798      	blx	r3
 800cd0e:	3601      	adds	r6, #1
 800cd10:	e7ee      	b.n	800ccf0 <__libc_init_array+0xc>
 800cd12:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd16:	4798      	blx	r3
 800cd18:	3601      	adds	r6, #1
 800cd1a:	e7f2      	b.n	800cd02 <__libc_init_array+0x1e>
 800cd1c:	0800cdb0 	.word	0x0800cdb0
 800cd20:	0800cdb0 	.word	0x0800cdb0
 800cd24:	0800cdb0 	.word	0x0800cdb0
 800cd28:	0800cdb4 	.word	0x0800cdb4

0800cd2c <memcpy>:
 800cd2c:	440a      	add	r2, r1
 800cd2e:	4291      	cmp	r1, r2
 800cd30:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd34:	d100      	bne.n	800cd38 <memcpy+0xc>
 800cd36:	4770      	bx	lr
 800cd38:	b510      	push	{r4, lr}
 800cd3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd42:	4291      	cmp	r1, r2
 800cd44:	d1f9      	bne.n	800cd3a <memcpy+0xe>
 800cd46:	bd10      	pop	{r4, pc}

0800cd48 <_init>:
 800cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4a:	bf00      	nop
 800cd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4e:	bc08      	pop	{r3}
 800cd50:	469e      	mov	lr, r3
 800cd52:	4770      	bx	lr

0800cd54 <_fini>:
 800cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd56:	bf00      	nop
 800cd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd5a:	bc08      	pop	{r3}
 800cd5c:	469e      	mov	lr, r3
 800cd5e:	4770      	bx	lr
